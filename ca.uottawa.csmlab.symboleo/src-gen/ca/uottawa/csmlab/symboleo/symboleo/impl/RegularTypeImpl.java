/**
 * generated by Xtext 2.31.0
 */
package ca.uottawa.csmlab.symboleo.symboleo.impl;

import ca.uottawa.csmlab.symboleo.symboleo.Attribute;
import ca.uottawa.csmlab.symboleo.symboleo.OntologyType;
import ca.uottawa.csmlab.symboleo.symboleo.RegularType;
import ca.uottawa.csmlab.symboleo.symboleo.SymboleoPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Regular Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.RegularTypeImpl#getOntologyType <em>Ontology Type</em>}</li>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.RegularTypeImpl#getAttributes <em>Attributes</em>}</li>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.RegularTypeImpl#getRegularType <em>Regular Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RegularTypeImpl extends DomainTypeImpl implements RegularType
{
  /**
   * The cached value of the '{@link #getOntologyType() <em>Ontology Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOntologyType()
   * @generated
   * @ordered
   */
  protected OntologyType ontologyType;

  /**
   * The cached value of the '{@link #getAttributes() <em>Attributes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributes()
   * @generated
   * @ordered
   */
  protected EList<Attribute> attributes;

  /**
   * The cached value of the '{@link #getRegularType() <em>Regular Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRegularType()
   * @generated
   * @ordered
   */
  protected RegularType regularType;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RegularTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SymboleoPackage.Literals.REGULAR_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OntologyType getOntologyType()
  {
    return ontologyType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOntologyType(OntologyType newOntologyType, NotificationChain msgs)
  {
    OntologyType oldOntologyType = ontologyType;
    ontologyType = newOntologyType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SymboleoPackage.REGULAR_TYPE__ONTOLOGY_TYPE, oldOntologyType, newOntologyType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOntologyType(OntologyType newOntologyType)
  {
    if (newOntologyType != ontologyType)
    {
      NotificationChain msgs = null;
      if (ontologyType != null)
        msgs = ((InternalEObject)ontologyType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SymboleoPackage.REGULAR_TYPE__ONTOLOGY_TYPE, null, msgs);
      if (newOntologyType != null)
        msgs = ((InternalEObject)newOntologyType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SymboleoPackage.REGULAR_TYPE__ONTOLOGY_TYPE, null, msgs);
      msgs = basicSetOntologyType(newOntologyType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SymboleoPackage.REGULAR_TYPE__ONTOLOGY_TYPE, newOntologyType, newOntologyType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Attribute> getAttributes()
  {
    if (attributes == null)
    {
      attributes = new EObjectContainmentEList<Attribute>(Attribute.class, this, SymboleoPackage.REGULAR_TYPE__ATTRIBUTES);
    }
    return attributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RegularType getRegularType()
  {
    if (regularType != null && regularType.eIsProxy())
    {
      InternalEObject oldRegularType = (InternalEObject)regularType;
      regularType = (RegularType)eResolveProxy(oldRegularType);
      if (regularType != oldRegularType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SymboleoPackage.REGULAR_TYPE__REGULAR_TYPE, oldRegularType, regularType));
      }
    }
    return regularType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RegularType basicGetRegularType()
  {
    return regularType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRegularType(RegularType newRegularType)
  {
    RegularType oldRegularType = regularType;
    regularType = newRegularType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SymboleoPackage.REGULAR_TYPE__REGULAR_TYPE, oldRegularType, regularType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SymboleoPackage.REGULAR_TYPE__ONTOLOGY_TYPE:
        return basicSetOntologyType(null, msgs);
      case SymboleoPackage.REGULAR_TYPE__ATTRIBUTES:
        return ((InternalEList<?>)getAttributes()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SymboleoPackage.REGULAR_TYPE__ONTOLOGY_TYPE:
        return getOntologyType();
      case SymboleoPackage.REGULAR_TYPE__ATTRIBUTES:
        return getAttributes();
      case SymboleoPackage.REGULAR_TYPE__REGULAR_TYPE:
        if (resolve) return getRegularType();
        return basicGetRegularType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SymboleoPackage.REGULAR_TYPE__ONTOLOGY_TYPE:
        setOntologyType((OntologyType)newValue);
        return;
      case SymboleoPackage.REGULAR_TYPE__ATTRIBUTES:
        getAttributes().clear();
        getAttributes().addAll((Collection<? extends Attribute>)newValue);
        return;
      case SymboleoPackage.REGULAR_TYPE__REGULAR_TYPE:
        setRegularType((RegularType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SymboleoPackage.REGULAR_TYPE__ONTOLOGY_TYPE:
        setOntologyType((OntologyType)null);
        return;
      case SymboleoPackage.REGULAR_TYPE__ATTRIBUTES:
        getAttributes().clear();
        return;
      case SymboleoPackage.REGULAR_TYPE__REGULAR_TYPE:
        setRegularType((RegularType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SymboleoPackage.REGULAR_TYPE__ONTOLOGY_TYPE:
        return ontologyType != null;
      case SymboleoPackage.REGULAR_TYPE__ATTRIBUTES:
        return attributes != null && !attributes.isEmpty();
      case SymboleoPackage.REGULAR_TYPE__REGULAR_TYPE:
        return regularType != null;
    }
    return super.eIsSet(featureID);
  }

} //RegularTypeImpl

/*
 * generated by Xtext 2.31.0
 */
package ca.uottawa.csmlab.symboleo.serializer;

import ca.uottawa.csmlab.symboleo.services.SymboleoGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class SymboleoSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SymboleoGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Model_ConstraintsKeyword_17_0_q;
	protected AbstractElementAlias match_Model_DeclarationsKeyword_11_0_q;
	protected AbstractElementAlias match_Model_ObligationsKeyword_14_0_a;
	protected AbstractElementAlias match_Model_ObligationsKeyword_14_0_p;
	protected AbstractElementAlias match_Model_PostconditionsKeyword_13_0_q;
	protected AbstractElementAlias match_Model_PowersKeyword_16_0_q;
	protected AbstractElementAlias match_Model_PreconditionsKeyword_12_0_q;
	protected AbstractElementAlias match_Model___SurvivingKeyword_15_0_ObligationsKeyword_15_1__q;
	protected AbstractElementAlias match_Obligation_OKeyword_3_0_or_ObligationKeyword_3_1;
	protected AbstractElementAlias match_Power_PKeyword_3_0_or_PowerKeyword_3_1;
	protected AbstractElementAlias match_RegularType_IsAKeyword_0_1_0_or_IsAnKeyword_0_1_1;
	protected AbstractElementAlias match_RegularType_IsAKeyword_1_1_0_or_IsAnKeyword_1_1_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SymboleoGrammarAccess) access;
		match_Model_ConstraintsKeyword_17_0_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getConstraintsKeyword_17_0());
		match_Model_DeclarationsKeyword_11_0_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getDeclarationsKeyword_11_0());
		match_Model_ObligationsKeyword_14_0_a = new TokenAlias(true, true, grammarAccess.getModelAccess().getObligationsKeyword_14_0());
		match_Model_ObligationsKeyword_14_0_p = new TokenAlias(true, false, grammarAccess.getModelAccess().getObligationsKeyword_14_0());
		match_Model_PostconditionsKeyword_13_0_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getPostconditionsKeyword_13_0());
		match_Model_PowersKeyword_16_0_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getPowersKeyword_16_0());
		match_Model_PreconditionsKeyword_12_0_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getPreconditionsKeyword_12_0());
		match_Model___SurvivingKeyword_15_0_ObligationsKeyword_15_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getModelAccess().getSurvivingKeyword_15_0()), new TokenAlias(false, false, grammarAccess.getModelAccess().getObligationsKeyword_15_1()));
		match_Obligation_OKeyword_3_0_or_ObligationKeyword_3_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getObligationAccess().getOKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getObligationAccess().getObligationKeyword_3_1()));
		match_Power_PKeyword_3_0_or_PowerKeyword_3_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPowerAccess().getPKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getPowerAccess().getPowerKeyword_3_1()));
		match_RegularType_IsAKeyword_0_1_0_or_IsAnKeyword_0_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getRegularTypeAccess().getIsAKeyword_0_1_0()), new TokenAlias(false, false, grammarAccess.getRegularTypeAccess().getIsAnKeyword_0_1_1()));
		match_RegularType_IsAKeyword_1_1_0_or_IsAnKeyword_1_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getRegularTypeAccess().getIsAKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getRegularTypeAccess().getIsAnKeyword_1_1_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Model_ConstraintsKeyword_17_0_q.equals(syntax))
				emit_Model_ConstraintsKeyword_17_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_DeclarationsKeyword_11_0_q.equals(syntax))
				emit_Model_DeclarationsKeyword_11_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_ObligationsKeyword_14_0_a.equals(syntax))
				emit_Model_ObligationsKeyword_14_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_ObligationsKeyword_14_0_p.equals(syntax))
				emit_Model_ObligationsKeyword_14_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_PostconditionsKeyword_13_0_q.equals(syntax))
				emit_Model_PostconditionsKeyword_13_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_PowersKeyword_16_0_q.equals(syntax))
				emit_Model_PowersKeyword_16_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_PreconditionsKeyword_12_0_q.equals(syntax))
				emit_Model_PreconditionsKeyword_12_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model___SurvivingKeyword_15_0_ObligationsKeyword_15_1__q.equals(syntax))
				emit_Model___SurvivingKeyword_15_0_ObligationsKeyword_15_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Obligation_OKeyword_3_0_or_ObligationKeyword_3_1.equals(syntax))
				emit_Obligation_OKeyword_3_0_or_ObligationKeyword_3_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Power_PKeyword_3_0_or_PowerKeyword_3_1.equals(syntax))
				emit_Power_PKeyword_3_0_or_PowerKeyword_3_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RegularType_IsAKeyword_0_1_0_or_IsAnKeyword_0_1_1.equals(syntax))
				emit_RegularType_IsAKeyword_0_1_0_or_IsAnKeyword_0_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RegularType_IsAKeyword_1_1_0_or_IsAnKeyword_1_1_1.equals(syntax))
				emit_RegularType_IsAKeyword_1_1_0_or_IsAnKeyword_1_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'Constraints'?
	 *
	 * This ambiguous syntax occurs at:
	 *     obligations+=Obligation ';' 'Obligations'* ('Surviving' 'Obligations')? 'Powers'? (ambiguity) 'endContract' (rule end)
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? 'Postconditions'? 'Obligations'+ ('Surviving' 'Obligations')? 'Powers'? (ambiguity) 'endContract' (rule end)
	 *     postconditions+=Proposition ';' 'Obligations'+ ('Surviving' 'Obligations')? 'Powers'? (ambiguity) 'endContract' (rule end)
	 *     powers+=Power ';' (ambiguity) 'endContract' (rule end)
	 *     preconditions+=Proposition ';' 'Postconditions'? 'Obligations'+ ('Surviving' 'Obligations')? 'Powers'? (ambiguity) 'endContract' (rule end)
	 *     survivingObligations+=Obligation ';' 'Powers'? (ambiguity) 'endContract' (rule end)
	 *     variables+=Variable ';' 'Preconditions'? 'Postconditions'? 'Obligations'+ ('Surviving' 'Obligations')? 'Powers'? (ambiguity) 'endContract' (rule end)
	 
	 * </pre>
	 */
	protected void emit_Model_ConstraintsKeyword_17_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'Declarations'?
	 *
	 * This ambiguous syntax occurs at:
	 *     parameters+=Parameter ')' (ambiguity) 'Preconditions' preconditions+=Proposition
	 *     parameters+=Parameter ')' (ambiguity) 'Preconditions'? 'Postconditions' postconditions+=Proposition
	 *     parameters+=Parameter ')' (ambiguity) 'Preconditions'? 'Postconditions'? 'Obligations'+ 'Surviving' 'Obligations' survivingObligations+=Obligation
	 *     parameters+=Parameter ')' (ambiguity) 'Preconditions'? 'Postconditions'? 'Obligations'+ ('Surviving' 'Obligations')? 'Powers' powers+=Power
	 *     parameters+=Parameter ')' (ambiguity) 'Preconditions'? 'Postconditions'? 'Obligations'+ ('Surviving' 'Obligations')? 'Powers'? 'Constraints' constraints+=Proposition
	 *     parameters+=Parameter ')' (ambiguity) 'Preconditions'? 'Postconditions'? 'Obligations'+ ('Surviving' 'Obligations')? 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     parameters+=Parameter ')' (ambiguity) 'Preconditions'? 'Postconditions'? 'Obligations'+ obligations+=Obligation
	 
	 * </pre>
	 */
	protected void emit_Model_DeclarationsKeyword_11_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'Obligations'*
	 *
	 * This ambiguous syntax occurs at:
	 *     obligations+=Obligation ';' (ambiguity) 'Surviving' 'Obligations' survivingObligations+=Obligation
	 *     obligations+=Obligation ';' (ambiguity) ('Surviving' 'Obligations')? 'Powers' powers+=Power
	 *     obligations+=Obligation ';' (ambiguity) ('Surviving' 'Obligations')? 'Powers'? 'Constraints' constraints+=Proposition
	 *     obligations+=Obligation ';' (ambiguity) ('Surviving' 'Obligations')? 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     obligations+=Obligation ';' (ambiguity) obligations+=Obligation
	 
	 * </pre>
	 */
	protected void emit_Model_ObligationsKeyword_14_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'Obligations'+
	 *
	 * This ambiguous syntax occurs at:
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? 'Postconditions'? (ambiguity) 'Surviving' 'Obligations' survivingObligations+=Obligation
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? 'Postconditions'? (ambiguity) ('Surviving' 'Obligations')? 'Powers' powers+=Power
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? 'Postconditions'? (ambiguity) ('Surviving' 'Obligations')? 'Powers'? 'Constraints' constraints+=Proposition
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? 'Postconditions'? (ambiguity) ('Surviving' 'Obligations')? 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? 'Postconditions'? (ambiguity) obligations+=Obligation
	 *     postconditions+=Proposition ';' (ambiguity) 'Surviving' 'Obligations' survivingObligations+=Obligation
	 *     postconditions+=Proposition ';' (ambiguity) ('Surviving' 'Obligations')? 'Powers' powers+=Power
	 *     postconditions+=Proposition ';' (ambiguity) ('Surviving' 'Obligations')? 'Powers'? 'Constraints' constraints+=Proposition
	 *     postconditions+=Proposition ';' (ambiguity) ('Surviving' 'Obligations')? 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     postconditions+=Proposition ';' (ambiguity) obligations+=Obligation
	 *     preconditions+=Proposition ';' 'Postconditions'? (ambiguity) 'Surviving' 'Obligations' survivingObligations+=Obligation
	 *     preconditions+=Proposition ';' 'Postconditions'? (ambiguity) ('Surviving' 'Obligations')? 'Powers' powers+=Power
	 *     preconditions+=Proposition ';' 'Postconditions'? (ambiguity) ('Surviving' 'Obligations')? 'Powers'? 'Constraints' constraints+=Proposition
	 *     preconditions+=Proposition ';' 'Postconditions'? (ambiguity) ('Surviving' 'Obligations')? 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     preconditions+=Proposition ';' 'Postconditions'? (ambiguity) obligations+=Obligation
	 *     variables+=Variable ';' 'Preconditions'? 'Postconditions'? (ambiguity) 'Surviving' 'Obligations' survivingObligations+=Obligation
	 *     variables+=Variable ';' 'Preconditions'? 'Postconditions'? (ambiguity) ('Surviving' 'Obligations')? 'Powers' powers+=Power
	 *     variables+=Variable ';' 'Preconditions'? 'Postconditions'? (ambiguity) ('Surviving' 'Obligations')? 'Powers'? 'Constraints' constraints+=Proposition
	 *     variables+=Variable ';' 'Preconditions'? 'Postconditions'? (ambiguity) ('Surviving' 'Obligations')? 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     variables+=Variable ';' 'Preconditions'? 'Postconditions'? (ambiguity) obligations+=Obligation
	 
	 * </pre>
	 */
	protected void emit_Model_ObligationsKeyword_14_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'Postconditions'?
	 *
	 * This ambiguous syntax occurs at:
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? (ambiguity) 'Obligations'+ 'Surviving' 'Obligations' survivingObligations+=Obligation
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? (ambiguity) 'Obligations'+ ('Surviving' 'Obligations')? 'Powers' powers+=Power
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? (ambiguity) 'Obligations'+ ('Surviving' 'Obligations')? 'Powers'? 'Constraints' constraints+=Proposition
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? (ambiguity) 'Obligations'+ ('Surviving' 'Obligations')? 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? (ambiguity) 'Obligations'+ obligations+=Obligation
	 *     preconditions+=Proposition ';' (ambiguity) 'Obligations'+ 'Surviving' 'Obligations' survivingObligations+=Obligation
	 *     preconditions+=Proposition ';' (ambiguity) 'Obligations'+ ('Surviving' 'Obligations')? 'Powers' powers+=Power
	 *     preconditions+=Proposition ';' (ambiguity) 'Obligations'+ ('Surviving' 'Obligations')? 'Powers'? 'Constraints' constraints+=Proposition
	 *     preconditions+=Proposition ';' (ambiguity) 'Obligations'+ ('Surviving' 'Obligations')? 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     preconditions+=Proposition ';' (ambiguity) 'Obligations'+ obligations+=Obligation
	 *     variables+=Variable ';' 'Preconditions'? (ambiguity) 'Obligations'+ 'Surviving' 'Obligations' survivingObligations+=Obligation
	 *     variables+=Variable ';' 'Preconditions'? (ambiguity) 'Obligations'+ ('Surviving' 'Obligations')? 'Powers' powers+=Power
	 *     variables+=Variable ';' 'Preconditions'? (ambiguity) 'Obligations'+ ('Surviving' 'Obligations')? 'Powers'? 'Constraints' constraints+=Proposition
	 *     variables+=Variable ';' 'Preconditions'? (ambiguity) 'Obligations'+ ('Surviving' 'Obligations')? 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     variables+=Variable ';' 'Preconditions'? (ambiguity) 'Obligations'+ obligations+=Obligation
	 
	 * </pre>
	 */
	protected void emit_Model_PostconditionsKeyword_13_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'Powers'?
	 *
	 * This ambiguous syntax occurs at:
	 *     obligations+=Obligation ';' 'Obligations'* ('Surviving' 'Obligations')? (ambiguity) 'Constraints' constraints+=Proposition
	 *     obligations+=Obligation ';' 'Obligations'* ('Surviving' 'Obligations')? (ambiguity) 'Constraints'? 'endContract' (rule end)
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? 'Postconditions'? 'Obligations'+ ('Surviving' 'Obligations')? (ambiguity) 'Constraints' constraints+=Proposition
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? 'Postconditions'? 'Obligations'+ ('Surviving' 'Obligations')? (ambiguity) 'Constraints'? 'endContract' (rule end)
	 *     postconditions+=Proposition ';' 'Obligations'+ ('Surviving' 'Obligations')? (ambiguity) 'Constraints' constraints+=Proposition
	 *     postconditions+=Proposition ';' 'Obligations'+ ('Surviving' 'Obligations')? (ambiguity) 'Constraints'? 'endContract' (rule end)
	 *     preconditions+=Proposition ';' 'Postconditions'? 'Obligations'+ ('Surviving' 'Obligations')? (ambiguity) 'Constraints' constraints+=Proposition
	 *     preconditions+=Proposition ';' 'Postconditions'? 'Obligations'+ ('Surviving' 'Obligations')? (ambiguity) 'Constraints'? 'endContract' (rule end)
	 *     survivingObligations+=Obligation ';' (ambiguity) 'Constraints' constraints+=Proposition
	 *     survivingObligations+=Obligation ';' (ambiguity) 'Constraints'? 'endContract' (rule end)
	 *     variables+=Variable ';' 'Preconditions'? 'Postconditions'? 'Obligations'+ ('Surviving' 'Obligations')? (ambiguity) 'Constraints' constraints+=Proposition
	 *     variables+=Variable ';' 'Preconditions'? 'Postconditions'? 'Obligations'+ ('Surviving' 'Obligations')? (ambiguity) 'Constraints'? 'endContract' (rule end)
	 
	 * </pre>
	 */
	protected void emit_Model_PowersKeyword_16_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'Preconditions'?
	 *
	 * This ambiguous syntax occurs at:
	 *     parameters+=Parameter ')' 'Declarations'? (ambiguity) 'Postconditions' postconditions+=Proposition
	 *     parameters+=Parameter ')' 'Declarations'? (ambiguity) 'Postconditions'? 'Obligations'+ 'Surviving' 'Obligations' survivingObligations+=Obligation
	 *     parameters+=Parameter ')' 'Declarations'? (ambiguity) 'Postconditions'? 'Obligations'+ ('Surviving' 'Obligations')? 'Powers' powers+=Power
	 *     parameters+=Parameter ')' 'Declarations'? (ambiguity) 'Postconditions'? 'Obligations'+ ('Surviving' 'Obligations')? 'Powers'? 'Constraints' constraints+=Proposition
	 *     parameters+=Parameter ')' 'Declarations'? (ambiguity) 'Postconditions'? 'Obligations'+ ('Surviving' 'Obligations')? 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     parameters+=Parameter ')' 'Declarations'? (ambiguity) 'Postconditions'? 'Obligations'+ obligations+=Obligation
	 *     variables+=Variable ';' (ambiguity) 'Postconditions' postconditions+=Proposition
	 *     variables+=Variable ';' (ambiguity) 'Postconditions'? 'Obligations'+ 'Surviving' 'Obligations' survivingObligations+=Obligation
	 *     variables+=Variable ';' (ambiguity) 'Postconditions'? 'Obligations'+ ('Surviving' 'Obligations')? 'Powers' powers+=Power
	 *     variables+=Variable ';' (ambiguity) 'Postconditions'? 'Obligations'+ ('Surviving' 'Obligations')? 'Powers'? 'Constraints' constraints+=Proposition
	 *     variables+=Variable ';' (ambiguity) 'Postconditions'? 'Obligations'+ ('Surviving' 'Obligations')? 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     variables+=Variable ';' (ambiguity) 'Postconditions'? 'Obligations'+ obligations+=Obligation
	 
	 * </pre>
	 */
	protected void emit_Model_PreconditionsKeyword_12_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('Surviving' 'Obligations')?
	 *
	 * This ambiguous syntax occurs at:
	 *     obligations+=Obligation ';' 'Obligations'* (ambiguity) 'Powers' powers+=Power
	 *     obligations+=Obligation ';' 'Obligations'* (ambiguity) 'Powers'? 'Constraints' constraints+=Proposition
	 *     obligations+=Obligation ';' 'Obligations'* (ambiguity) 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? 'Postconditions'? 'Obligations'+ (ambiguity) 'Powers' powers+=Power
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? 'Postconditions'? 'Obligations'+ (ambiguity) 'Powers'? 'Constraints' constraints+=Proposition
	 *     parameters+=Parameter ')' 'Declarations'? 'Preconditions'? 'Postconditions'? 'Obligations'+ (ambiguity) 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     postconditions+=Proposition ';' 'Obligations'+ (ambiguity) 'Powers' powers+=Power
	 *     postconditions+=Proposition ';' 'Obligations'+ (ambiguity) 'Powers'? 'Constraints' constraints+=Proposition
	 *     postconditions+=Proposition ';' 'Obligations'+ (ambiguity) 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     preconditions+=Proposition ';' 'Postconditions'? 'Obligations'+ (ambiguity) 'Powers' powers+=Power
	 *     preconditions+=Proposition ';' 'Postconditions'? 'Obligations'+ (ambiguity) 'Powers'? 'Constraints' constraints+=Proposition
	 *     preconditions+=Proposition ';' 'Postconditions'? 'Obligations'+ (ambiguity) 'Powers'? 'Constraints'? 'endContract' (rule end)
	 *     variables+=Variable ';' 'Preconditions'? 'Postconditions'? 'Obligations'+ (ambiguity) 'Powers' powers+=Power
	 *     variables+=Variable ';' 'Preconditions'? 'Postconditions'? 'Obligations'+ (ambiguity) 'Powers'? 'Constraints' constraints+=Proposition
	 *     variables+=Variable ';' 'Preconditions'? 'Postconditions'? 'Obligations'+ (ambiguity) 'Powers'? 'Constraints'? 'endContract' (rule end)
	 
	 * </pre>
	 */
	protected void emit_Model___SurvivingKeyword_15_0_ObligationsKeyword_15_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'O' | 'Obligation'
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID ':' (ambiguity) '(' debtor=VariableDotExpression
	 *     trigger=Proposition '-&gt;' (ambiguity) '(' debtor=VariableDotExpression
	 
	 * </pre>
	 */
	protected void emit_Obligation_OKeyword_3_0_or_ObligationKeyword_3_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'P' | 'Power'
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID ':' (ambiguity) '(' creditor=VariableDotExpression
	 *     trigger=Proposition '-&gt;' (ambiguity) '(' creditor=VariableDotExpression
	 
	 * </pre>
	 */
	protected void emit_Power_PKeyword_3_0_or_PowerKeyword_3_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'isA' | 'isAn'
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) ontologyType=OntologyType
	 
	 * </pre>
	 */
	protected void emit_RegularType_IsAKeyword_0_1_0_or_IsAnKeyword_0_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'isA' | 'isAn'
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) regularType=[RegularType|ID]
	 
	 * </pre>
	 */
	protected void emit_RegularType_IsAKeyword_1_1_0_or_IsAnKeyword_1_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}

/**
 * generated by Xtext 2.31.0
 */
package ca.uottawa.csmlab.symboleo.symboleo.impl;

import ca.uottawa.csmlab.symboleo.symboleo.Power;
import ca.uottawa.csmlab.symboleo.symboleo.PowerFunction;
import ca.uottawa.csmlab.symboleo.symboleo.Proposition;
import ca.uottawa.csmlab.symboleo.symboleo.Ref;
import ca.uottawa.csmlab.symboleo.symboleo.SymboleoPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Power</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.PowerImpl#getName <em>Name</em>}</li>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.PowerImpl#getTrigger <em>Trigger</em>}</li>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.PowerImpl#getCreditor <em>Creditor</em>}</li>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.PowerImpl#getDebtor <em>Debtor</em>}</li>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.PowerImpl#getAntecedent <em>Antecedent</em>}</li>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.PowerImpl#getConsequent <em>Consequent</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PowerImpl extends MinimalEObjectImpl.Container implements Power
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getTrigger() <em>Trigger</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTrigger()
   * @generated
   * @ordered
   */
  protected Proposition trigger;

  /**
   * The cached value of the '{@link #getCreditor() <em>Creditor</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCreditor()
   * @generated
   * @ordered
   */
  protected Ref creditor;

  /**
   * The cached value of the '{@link #getDebtor() <em>Debtor</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDebtor()
   * @generated
   * @ordered
   */
  protected Ref debtor;

  /**
   * The cached value of the '{@link #getAntecedent() <em>Antecedent</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAntecedent()
   * @generated
   * @ordered
   */
  protected Proposition antecedent;

  /**
   * The cached value of the '{@link #getConsequent() <em>Consequent</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConsequent()
   * @generated
   * @ordered
   */
  protected PowerFunction consequent;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PowerImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SymboleoPackage.Literals.POWER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SymboleoPackage.POWER__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Proposition getTrigger()
  {
    return trigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTrigger(Proposition newTrigger, NotificationChain msgs)
  {
    Proposition oldTrigger = trigger;
    trigger = newTrigger;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SymboleoPackage.POWER__TRIGGER, oldTrigger, newTrigger);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTrigger(Proposition newTrigger)
  {
    if (newTrigger != trigger)
    {
      NotificationChain msgs = null;
      if (trigger != null)
        msgs = ((InternalEObject)trigger).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SymboleoPackage.POWER__TRIGGER, null, msgs);
      if (newTrigger != null)
        msgs = ((InternalEObject)newTrigger).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SymboleoPackage.POWER__TRIGGER, null, msgs);
      msgs = basicSetTrigger(newTrigger, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SymboleoPackage.POWER__TRIGGER, newTrigger, newTrigger));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ref getCreditor()
  {
    return creditor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCreditor(Ref newCreditor, NotificationChain msgs)
  {
    Ref oldCreditor = creditor;
    creditor = newCreditor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SymboleoPackage.POWER__CREDITOR, oldCreditor, newCreditor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCreditor(Ref newCreditor)
  {
    if (newCreditor != creditor)
    {
      NotificationChain msgs = null;
      if (creditor != null)
        msgs = ((InternalEObject)creditor).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SymboleoPackage.POWER__CREDITOR, null, msgs);
      if (newCreditor != null)
        msgs = ((InternalEObject)newCreditor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SymboleoPackage.POWER__CREDITOR, null, msgs);
      msgs = basicSetCreditor(newCreditor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SymboleoPackage.POWER__CREDITOR, newCreditor, newCreditor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ref getDebtor()
  {
    return debtor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDebtor(Ref newDebtor, NotificationChain msgs)
  {
    Ref oldDebtor = debtor;
    debtor = newDebtor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SymboleoPackage.POWER__DEBTOR, oldDebtor, newDebtor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDebtor(Ref newDebtor)
  {
    if (newDebtor != debtor)
    {
      NotificationChain msgs = null;
      if (debtor != null)
        msgs = ((InternalEObject)debtor).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SymboleoPackage.POWER__DEBTOR, null, msgs);
      if (newDebtor != null)
        msgs = ((InternalEObject)newDebtor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SymboleoPackage.POWER__DEBTOR, null, msgs);
      msgs = basicSetDebtor(newDebtor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SymboleoPackage.POWER__DEBTOR, newDebtor, newDebtor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Proposition getAntecedent()
  {
    return antecedent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAntecedent(Proposition newAntecedent, NotificationChain msgs)
  {
    Proposition oldAntecedent = antecedent;
    antecedent = newAntecedent;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SymboleoPackage.POWER__ANTECEDENT, oldAntecedent, newAntecedent);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAntecedent(Proposition newAntecedent)
  {
    if (newAntecedent != antecedent)
    {
      NotificationChain msgs = null;
      if (antecedent != null)
        msgs = ((InternalEObject)antecedent).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SymboleoPackage.POWER__ANTECEDENT, null, msgs);
      if (newAntecedent != null)
        msgs = ((InternalEObject)newAntecedent).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SymboleoPackage.POWER__ANTECEDENT, null, msgs);
      msgs = basicSetAntecedent(newAntecedent, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SymboleoPackage.POWER__ANTECEDENT, newAntecedent, newAntecedent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PowerFunction getConsequent()
  {
    return consequent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConsequent(PowerFunction newConsequent, NotificationChain msgs)
  {
    PowerFunction oldConsequent = consequent;
    consequent = newConsequent;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SymboleoPackage.POWER__CONSEQUENT, oldConsequent, newConsequent);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConsequent(PowerFunction newConsequent)
  {
    if (newConsequent != consequent)
    {
      NotificationChain msgs = null;
      if (consequent != null)
        msgs = ((InternalEObject)consequent).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SymboleoPackage.POWER__CONSEQUENT, null, msgs);
      if (newConsequent != null)
        msgs = ((InternalEObject)newConsequent).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SymboleoPackage.POWER__CONSEQUENT, null, msgs);
      msgs = basicSetConsequent(newConsequent, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SymboleoPackage.POWER__CONSEQUENT, newConsequent, newConsequent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SymboleoPackage.POWER__TRIGGER:
        return basicSetTrigger(null, msgs);
      case SymboleoPackage.POWER__CREDITOR:
        return basicSetCreditor(null, msgs);
      case SymboleoPackage.POWER__DEBTOR:
        return basicSetDebtor(null, msgs);
      case SymboleoPackage.POWER__ANTECEDENT:
        return basicSetAntecedent(null, msgs);
      case SymboleoPackage.POWER__CONSEQUENT:
        return basicSetConsequent(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SymboleoPackage.POWER__NAME:
        return getName();
      case SymboleoPackage.POWER__TRIGGER:
        return getTrigger();
      case SymboleoPackage.POWER__CREDITOR:
        return getCreditor();
      case SymboleoPackage.POWER__DEBTOR:
        return getDebtor();
      case SymboleoPackage.POWER__ANTECEDENT:
        return getAntecedent();
      case SymboleoPackage.POWER__CONSEQUENT:
        return getConsequent();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SymboleoPackage.POWER__NAME:
        setName((String)newValue);
        return;
      case SymboleoPackage.POWER__TRIGGER:
        setTrigger((Proposition)newValue);
        return;
      case SymboleoPackage.POWER__CREDITOR:
        setCreditor((Ref)newValue);
        return;
      case SymboleoPackage.POWER__DEBTOR:
        setDebtor((Ref)newValue);
        return;
      case SymboleoPackage.POWER__ANTECEDENT:
        setAntecedent((Proposition)newValue);
        return;
      case SymboleoPackage.POWER__CONSEQUENT:
        setConsequent((PowerFunction)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SymboleoPackage.POWER__NAME:
        setName(NAME_EDEFAULT);
        return;
      case SymboleoPackage.POWER__TRIGGER:
        setTrigger((Proposition)null);
        return;
      case SymboleoPackage.POWER__CREDITOR:
        setCreditor((Ref)null);
        return;
      case SymboleoPackage.POWER__DEBTOR:
        setDebtor((Ref)null);
        return;
      case SymboleoPackage.POWER__ANTECEDENT:
        setAntecedent((Proposition)null);
        return;
      case SymboleoPackage.POWER__CONSEQUENT:
        setConsequent((PowerFunction)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SymboleoPackage.POWER__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case SymboleoPackage.POWER__TRIGGER:
        return trigger != null;
      case SymboleoPackage.POWER__CREDITOR:
        return creditor != null;
      case SymboleoPackage.POWER__DEBTOR:
        return debtor != null;
      case SymboleoPackage.POWER__ANTECEDENT:
        return antecedent != null;
      case SymboleoPackage.POWER__CONSEQUENT:
        return consequent != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //PowerImpl

/**
 * generated by Xtext 2.31.0
 */
package ca.uottawa.csmlab.symboleo.symboleo.impl;

import ca.uottawa.csmlab.symboleo.symboleo.Attribute;
import ca.uottawa.csmlab.symboleo.symboleo.AttributeModifier;
import ca.uottawa.csmlab.symboleo.symboleo.BaseType;
import ca.uottawa.csmlab.symboleo.symboleo.DomainType;
import ca.uottawa.csmlab.symboleo.symboleo.SymboleoPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Attribute</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.AttributeImpl#getAttributeModifier <em>Attribute Modifier</em>}</li>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.AttributeImpl#getName <em>Name</em>}</li>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.AttributeImpl#getBaseType <em>Base Type</em>}</li>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.AttributeImpl#getDomainType <em>Domain Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AttributeImpl extends MinimalEObjectImpl.Container implements Attribute
{
  /**
   * The cached value of the '{@link #getAttributeModifier() <em>Attribute Modifier</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributeModifier()
   * @generated
   * @ordered
   */
  protected AttributeModifier attributeModifier;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getBaseType() <em>Base Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBaseType()
   * @generated
   * @ordered
   */
  protected BaseType baseType;

  /**
   * The cached value of the '{@link #getDomainType() <em>Domain Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomainType()
   * @generated
   * @ordered
   */
  protected DomainType domainType;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AttributeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SymboleoPackage.Literals.ATTRIBUTE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttributeModifier getAttributeModifier()
  {
    return attributeModifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAttributeModifier(AttributeModifier newAttributeModifier, NotificationChain msgs)
  {
    AttributeModifier oldAttributeModifier = attributeModifier;
    attributeModifier = newAttributeModifier;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SymboleoPackage.ATTRIBUTE__ATTRIBUTE_MODIFIER, oldAttributeModifier, newAttributeModifier);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAttributeModifier(AttributeModifier newAttributeModifier)
  {
    if (newAttributeModifier != attributeModifier)
    {
      NotificationChain msgs = null;
      if (attributeModifier != null)
        msgs = ((InternalEObject)attributeModifier).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SymboleoPackage.ATTRIBUTE__ATTRIBUTE_MODIFIER, null, msgs);
      if (newAttributeModifier != null)
        msgs = ((InternalEObject)newAttributeModifier).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SymboleoPackage.ATTRIBUTE__ATTRIBUTE_MODIFIER, null, msgs);
      msgs = basicSetAttributeModifier(newAttributeModifier, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SymboleoPackage.ATTRIBUTE__ATTRIBUTE_MODIFIER, newAttributeModifier, newAttributeModifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SymboleoPackage.ATTRIBUTE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BaseType getBaseType()
  {
    return baseType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBaseType(BaseType newBaseType, NotificationChain msgs)
  {
    BaseType oldBaseType = baseType;
    baseType = newBaseType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SymboleoPackage.ATTRIBUTE__BASE_TYPE, oldBaseType, newBaseType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBaseType(BaseType newBaseType)
  {
    if (newBaseType != baseType)
    {
      NotificationChain msgs = null;
      if (baseType != null)
        msgs = ((InternalEObject)baseType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SymboleoPackage.ATTRIBUTE__BASE_TYPE, null, msgs);
      if (newBaseType != null)
        msgs = ((InternalEObject)newBaseType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SymboleoPackage.ATTRIBUTE__BASE_TYPE, null, msgs);
      msgs = basicSetBaseType(newBaseType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SymboleoPackage.ATTRIBUTE__BASE_TYPE, newBaseType, newBaseType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DomainType getDomainType()
  {
    if (domainType != null && domainType.eIsProxy())
    {
      InternalEObject oldDomainType = (InternalEObject)domainType;
      domainType = (DomainType)eResolveProxy(oldDomainType);
      if (domainType != oldDomainType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SymboleoPackage.ATTRIBUTE__DOMAIN_TYPE, oldDomainType, domainType));
      }
    }
    return domainType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DomainType basicGetDomainType()
  {
    return domainType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDomainType(DomainType newDomainType)
  {
    DomainType oldDomainType = domainType;
    domainType = newDomainType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SymboleoPackage.ATTRIBUTE__DOMAIN_TYPE, oldDomainType, domainType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SymboleoPackage.ATTRIBUTE__ATTRIBUTE_MODIFIER:
        return basicSetAttributeModifier(null, msgs);
      case SymboleoPackage.ATTRIBUTE__BASE_TYPE:
        return basicSetBaseType(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SymboleoPackage.ATTRIBUTE__ATTRIBUTE_MODIFIER:
        return getAttributeModifier();
      case SymboleoPackage.ATTRIBUTE__NAME:
        return getName();
      case SymboleoPackage.ATTRIBUTE__BASE_TYPE:
        return getBaseType();
      case SymboleoPackage.ATTRIBUTE__DOMAIN_TYPE:
        if (resolve) return getDomainType();
        return basicGetDomainType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SymboleoPackage.ATTRIBUTE__ATTRIBUTE_MODIFIER:
        setAttributeModifier((AttributeModifier)newValue);
        return;
      case SymboleoPackage.ATTRIBUTE__NAME:
        setName((String)newValue);
        return;
      case SymboleoPackage.ATTRIBUTE__BASE_TYPE:
        setBaseType((BaseType)newValue);
        return;
      case SymboleoPackage.ATTRIBUTE__DOMAIN_TYPE:
        setDomainType((DomainType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SymboleoPackage.ATTRIBUTE__ATTRIBUTE_MODIFIER:
        setAttributeModifier((AttributeModifier)null);
        return;
      case SymboleoPackage.ATTRIBUTE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case SymboleoPackage.ATTRIBUTE__BASE_TYPE:
        setBaseType((BaseType)null);
        return;
      case SymboleoPackage.ATTRIBUTE__DOMAIN_TYPE:
        setDomainType((DomainType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SymboleoPackage.ATTRIBUTE__ATTRIBUTE_MODIFIER:
        return attributeModifier != null;
      case SymboleoPackage.ATTRIBUTE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case SymboleoPackage.ATTRIBUTE__BASE_TYPE:
        return baseType != null;
      case SymboleoPackage.ATTRIBUTE__DOMAIN_TYPE:
        return domainType != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //AttributeImpl

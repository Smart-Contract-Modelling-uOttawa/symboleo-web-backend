/**
 * generated by Xtext 2.31.0
 */
package ca.uottawa.csmlab.symboleo.symboleo.util;

import ca.uottawa.csmlab.symboleo.symboleo.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see ca.uottawa.csmlab.symboleo.symboleo.SymboleoPackage
 * @generated
 */
public class SymboleoAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SymboleoPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SymboleoAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = SymboleoPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SymboleoSwitch<Adapter> modelSwitch =
    new SymboleoSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseDomainType(DomainType object)
      {
        return createDomainTypeAdapter();
      }
      @Override
      public Adapter caseAlias(Alias object)
      {
        return createAliasAdapter();
      }
      @Override
      public Adapter caseEnumeration(Enumeration object)
      {
        return createEnumerationAdapter();
      }
      @Override
      public Adapter caseEnumItem(EnumItem object)
      {
        return createEnumItemAdapter();
      }
      @Override
      public Adapter caseRegularType(RegularType object)
      {
        return createRegularTypeAdapter();
      }
      @Override
      public Adapter caseAttribute(Attribute object)
      {
        return createAttributeAdapter();
      }
      @Override
      public Adapter caseBaseType(BaseType object)
      {
        return createBaseTypeAdapter();
      }
      @Override
      public Adapter caseOntologyType(OntologyType object)
      {
        return createOntologyTypeAdapter();
      }
      @Override
      public Adapter caseAttributeModifier(AttributeModifier object)
      {
        return createAttributeModifierAdapter();
      }
      @Override
      public Adapter caseParameter(Parameter object)
      {
        return createParameterAdapter();
      }
      @Override
      public Adapter caseParameterType(ParameterType object)
      {
        return createParameterTypeAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseOAssignment(OAssignment object)
      {
        return createOAssignmentAdapter();
      }
      @Override
      public Adapter caseRef(Ref object)
      {
        return createRefAdapter();
      }
      @Override
      public Adapter caseAssignment(Assignment object)
      {
        return createAssignmentAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseFunctionCall(FunctionCall object)
      {
        return createFunctionCallAdapter();
      }
      @Override
      public Adapter caseObligation(Obligation object)
      {
        return createObligationAdapter();
      }
      @Override
      public Adapter casePower(Power object)
      {
        return createPowerAdapter();
      }
      @Override
      public Adapter casePowerFunction(PowerFunction object)
      {
        return createPowerFunctionAdapter();
      }
      @Override
      public Adapter caseProposition(Proposition object)
      {
        return createPropositionAdapter();
      }
      @Override
      public Adapter casePredicateFunction(PredicateFunction object)
      {
        return createPredicateFunctionAdapter();
      }
      @Override
      public Adapter caseOtherFunction(OtherFunction object)
      {
        return createOtherFunctionAdapter();
      }
      @Override
      public Adapter caseEvent(Event object)
      {
        return createEventAdapter();
      }
      @Override
      public Adapter casePoint(Point object)
      {
        return createPointAdapter();
      }
      @Override
      public Adapter casePointExpression(PointExpression object)
      {
        return createPointExpressionAdapter();
      }
      @Override
      public Adapter caseTimevalue(Timevalue object)
      {
        return createTimevalueAdapter();
      }
      @Override
      public Adapter caseInterval(Interval object)
      {
        return createIntervalAdapter();
      }
      @Override
      public Adapter caseIntervalExpression(IntervalExpression object)
      {
        return createIntervalExpressionAdapter();
      }
      @Override
      public Adapter caseSituation(Situation object)
      {
        return createSituationAdapter();
      }
      @Override
      public Adapter casePowerState(PowerState object)
      {
        return createPowerStateAdapter();
      }
      @Override
      public Adapter caseObligationState(ObligationState object)
      {
        return createObligationStateAdapter();
      }
      @Override
      public Adapter caseContractState(ContractState object)
      {
        return createContractStateAdapter();
      }
      @Override
      public Adapter caseOAssignExpression(OAssignExpression object)
      {
        return createOAssignExpressionAdapter();
      }
      @Override
      public Adapter caseVariableDotExpression(VariableDotExpression object)
      {
        return createVariableDotExpressionAdapter();
      }
      @Override
      public Adapter caseVariableRef(VariableRef object)
      {
        return createVariableRefAdapter();
      }
      @Override
      public Adapter caseAssignExpression(AssignExpression object)
      {
        return createAssignExpressionAdapter();
      }
      @Override
      public Adapter caseOr(Or object)
      {
        return createOrAdapter();
      }
      @Override
      public Adapter caseAnd(And object)
      {
        return createAndAdapter();
      }
      @Override
      public Adapter caseEquality(Equality object)
      {
        return createEqualityAdapter();
      }
      @Override
      public Adapter caseComparison(Comparison object)
      {
        return createComparisonAdapter();
      }
      @Override
      public Adapter casePlus(Plus object)
      {
        return createPlusAdapter();
      }
      @Override
      public Adapter caseMinus(Minus object)
      {
        return createMinusAdapter();
      }
      @Override
      public Adapter caseMulti(Multi object)
      {
        return createMultiAdapter();
      }
      @Override
      public Adapter caseDiv(Div object)
      {
        return createDivAdapter();
      }
      @Override
      public Adapter casePrimaryExpressionRecursive(PrimaryExpressionRecursive object)
      {
        return createPrimaryExpressionRecursiveAdapter();
      }
      @Override
      public Adapter casePrimaryExpressionFunctionCall(PrimaryExpressionFunctionCall object)
      {
        return createPrimaryExpressionFunctionCallAdapter();
      }
      @Override
      public Adapter caseNegatedPrimaryExpression(NegatedPrimaryExpression object)
      {
        return createNegatedPrimaryExpressionAdapter();
      }
      @Override
      public Adapter caseAtomicExpressionTrue(AtomicExpressionTrue object)
      {
        return createAtomicExpressionTrueAdapter();
      }
      @Override
      public Adapter caseAtomicExpressionFalse(AtomicExpressionFalse object)
      {
        return createAtomicExpressionFalseAdapter();
      }
      @Override
      public Adapter caseAtomicExpressionDouble(AtomicExpressionDouble object)
      {
        return createAtomicExpressionDoubleAdapter();
      }
      @Override
      public Adapter caseAtomicExpressionInt(AtomicExpressionInt object)
      {
        return createAtomicExpressionIntAdapter();
      }
      @Override
      public Adapter caseAtomicExpressionDate(AtomicExpressionDate object)
      {
        return createAtomicExpressionDateAdapter();
      }
      @Override
      public Adapter caseAtomicExpressionEnum(AtomicExpressionEnum object)
      {
        return createAtomicExpressionEnumAdapter();
      }
      @Override
      public Adapter caseAtomicExpressionString(AtomicExpressionString object)
      {
        return createAtomicExpressionStringAdapter();
      }
      @Override
      public Adapter caseAtomicExpressionParameter(AtomicExpressionParameter object)
      {
        return createAtomicExpressionParameterAdapter();
      }
      @Override
      public Adapter caseTwoArgMathFunction(TwoArgMathFunction object)
      {
        return createTwoArgMathFunctionAdapter();
      }
      @Override
      public Adapter caseOneArgMathFunction(OneArgMathFunction object)
      {
        return createOneArgMathFunctionAdapter();
      }
      @Override
      public Adapter caseThreeArgStringFunction(ThreeArgStringFunction object)
      {
        return createThreeArgStringFunctionAdapter();
      }
      @Override
      public Adapter caseTwoArgStringFunction(TwoArgStringFunction object)
      {
        return createTwoArgStringFunctionAdapter();
      }
      @Override
      public Adapter caseOneArgStringFunction(OneArgStringFunction object)
      {
        return createOneArgStringFunctionAdapter();
      }
      @Override
      public Adapter caseThreeArgDateFunction(ThreeArgDateFunction object)
      {
        return createThreeArgDateFunctionAdapter();
      }
      @Override
      public Adapter casePFObligationSuspended(PFObligationSuspended object)
      {
        return createPFObligationSuspendedAdapter();
      }
      @Override
      public Adapter casePFObligationResumed(PFObligationResumed object)
      {
        return createPFObligationResumedAdapter();
      }
      @Override
      public Adapter casePFObligationDischarged(PFObligationDischarged object)
      {
        return createPFObligationDischargedAdapter();
      }
      @Override
      public Adapter casePFObligationTerminated(PFObligationTerminated object)
      {
        return createPFObligationTerminatedAdapter();
      }
      @Override
      public Adapter casePFObligationTriggered(PFObligationTriggered object)
      {
        return createPFObligationTriggeredAdapter();
      }
      @Override
      public Adapter casePFContractSuspended(PFContractSuspended object)
      {
        return createPFContractSuspendedAdapter();
      }
      @Override
      public Adapter casePFContractResumed(PFContractResumed object)
      {
        return createPFContractResumedAdapter();
      }
      @Override
      public Adapter casePFContractTerminated(PFContractTerminated object)
      {
        return createPFContractTerminatedAdapter();
      }
      @Override
      public Adapter casePOr(POr object)
      {
        return createPOrAdapter();
      }
      @Override
      public Adapter casePAnd(PAnd object)
      {
        return createPAndAdapter();
      }
      @Override
      public Adapter casePEquality(PEquality object)
      {
        return createPEqualityAdapter();
      }
      @Override
      public Adapter casePComparison(PComparison object)
      {
        return createPComparisonAdapter();
      }
      @Override
      public Adapter casePAtomRecursive(PAtomRecursive object)
      {
        return createPAtomRecursiveAdapter();
      }
      @Override
      public Adapter caseNegatedPAtom(NegatedPAtom object)
      {
        return createNegatedPAtomAdapter();
      }
      @Override
      public Adapter casePAtomPredicate(PAtomPredicate object)
      {
        return createPAtomPredicateAdapter();
      }
      @Override
      public Adapter casePAtomFunction(PAtomFunction object)
      {
        return createPAtomFunctionAdapter();
      }
      @Override
      public Adapter casePAtomEnum(PAtomEnum object)
      {
        return createPAtomEnumAdapter();
      }
      @Override
      public Adapter casePAtomVariable(PAtomVariable object)
      {
        return createPAtomVariableAdapter();
      }
      @Override
      public Adapter casePAtomPredicateTrueLiteral(PAtomPredicateTrueLiteral object)
      {
        return createPAtomPredicateTrueLiteralAdapter();
      }
      @Override
      public Adapter casePAtomPredicateFalseLiteral(PAtomPredicateFalseLiteral object)
      {
        return createPAtomPredicateFalseLiteralAdapter();
      }
      @Override
      public Adapter casePAtomDoubleLiteral(PAtomDoubleLiteral object)
      {
        return createPAtomDoubleLiteralAdapter();
      }
      @Override
      public Adapter casePAtomIntLiteral(PAtomIntLiteral object)
      {
        return createPAtomIntLiteralAdapter();
      }
      @Override
      public Adapter casePAtomStringLiteral(PAtomStringLiteral object)
      {
        return createPAtomStringLiteralAdapter();
      }
      @Override
      public Adapter casePAtomDateLiteral(PAtomDateLiteral object)
      {
        return createPAtomDateLiteralAdapter();
      }
      @Override
      public Adapter casePredicateFunctionHappens(PredicateFunctionHappens object)
      {
        return createPredicateFunctionHappensAdapter();
      }
      @Override
      public Adapter casePredicateFunctionWHappensBefore(PredicateFunctionWHappensBefore object)
      {
        return createPredicateFunctionWHappensBeforeAdapter();
      }
      @Override
      public Adapter casePredicateFunctionSHappensBefore(PredicateFunctionSHappensBefore object)
      {
        return createPredicateFunctionSHappensBeforeAdapter();
      }
      @Override
      public Adapter casePredicateFunctionHappensWithin(PredicateFunctionHappensWithin object)
      {
        return createPredicateFunctionHappensWithinAdapter();
      }
      @Override
      public Adapter casePredicateFunctionWHappensBeforeEvent(PredicateFunctionWHappensBeforeEvent object)
      {
        return createPredicateFunctionWHappensBeforeEventAdapter();
      }
      @Override
      public Adapter casePredicateFunctionSHappensBeforeEvent(PredicateFunctionSHappensBeforeEvent object)
      {
        return createPredicateFunctionSHappensBeforeEventAdapter();
      }
      @Override
      public Adapter casePredicateFunctionHappensAfter(PredicateFunctionHappensAfter object)
      {
        return createPredicateFunctionHappensAfterAdapter();
      }
      @Override
      public Adapter casePredicateFunctionOccurs(PredicateFunctionOccurs object)
      {
        return createPredicateFunctionOccursAdapter();
      }
      @Override
      public Adapter casePredicateFunctionAssignment(PredicateFunctionAssignment object)
      {
        return createPredicateFunctionAssignmentAdapter();
      }
      @Override
      public Adapter casePredicateFunctionAssignmentOnly(PredicateFunctionAssignmentOnly object)
      {
        return createPredicateFunctionAssignmentOnlyAdapter();
      }
      @Override
      public Adapter casePredicateFunctionIsEqual(PredicateFunctionIsEqual object)
      {
        return createPredicateFunctionIsEqualAdapter();
      }
      @Override
      public Adapter casePredicateFunctionIsOwner(PredicateFunctionIsOwner object)
      {
        return createPredicateFunctionIsOwnerAdapter();
      }
      @Override
      public Adapter casePredicateFunctionCannotBeAssigned(PredicateFunctionCannotBeAssigned object)
      {
        return createPredicateFunctionCannotBeAssignedAdapter();
      }
      @Override
      public Adapter caseVariableEvent(VariableEvent object)
      {
        return createVariableEventAdapter();
      }
      @Override
      public Adapter casePowerEvent(PowerEvent object)
      {
        return createPowerEventAdapter();
      }
      @Override
      public Adapter caseObligationEvent(ObligationEvent object)
      {
        return createObligationEventAdapter();
      }
      @Override
      public Adapter caseContractEvent(ContractEvent object)
      {
        return createContractEventAdapter();
      }
      @Override
      public Adapter casePointFunction(PointFunction object)
      {
        return createPointFunctionAdapter();
      }
      @Override
      public Adapter casePointAtomParameterDotExpression(PointAtomParameterDotExpression object)
      {
        return createPointAtomParameterDotExpressionAdapter();
      }
      @Override
      public Adapter casePointAtomObligationEvent(PointAtomObligationEvent object)
      {
        return createPointAtomObligationEventAdapter();
      }
      @Override
      public Adapter casePointAtomContractEvent(PointAtomContractEvent object)
      {
        return createPointAtomContractEventAdapter();
      }
      @Override
      public Adapter casePointAtomPowerEvent(PointAtomPowerEvent object)
      {
        return createPointAtomPowerEventAdapter();
      }
      @Override
      public Adapter caseTimevalueInt(TimevalueInt object)
      {
        return createTimevalueIntAdapter();
      }
      @Override
      public Adapter caseTimevalueVariable(TimevalueVariable object)
      {
        return createTimevalueVariableAdapter();
      }
      @Override
      public Adapter caseIntervalFunction(IntervalFunction object)
      {
        return createIntervalFunctionAdapter();
      }
      @Override
      public Adapter caseSituationExpression(SituationExpression object)
      {
        return createSituationExpressionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.DomainType <em>Domain Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.DomainType
   * @generated
   */
  public Adapter createDomainTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Alias <em>Alias</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Alias
   * @generated
   */
  public Adapter createAliasAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Enumeration <em>Enumeration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Enumeration
   * @generated
   */
  public Adapter createEnumerationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.EnumItem <em>Enum Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.EnumItem
   * @generated
   */
  public Adapter createEnumItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.RegularType <em>Regular Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.RegularType
   * @generated
   */
  public Adapter createRegularTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Attribute <em>Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Attribute
   * @generated
   */
  public Adapter createAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.BaseType <em>Base Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.BaseType
   * @generated
   */
  public Adapter createBaseTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.OntologyType <em>Ontology Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.OntologyType
   * @generated
   */
  public Adapter createOntologyTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.AttributeModifier <em>Attribute Modifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.AttributeModifier
   * @generated
   */
  public Adapter createAttributeModifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Parameter <em>Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Parameter
   * @generated
   */
  public Adapter createParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.ParameterType <em>Parameter Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.ParameterType
   * @generated
   */
  public Adapter createParameterTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.OAssignment <em>OAssignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.OAssignment
   * @generated
   */
  public Adapter createOAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Ref <em>Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Ref
   * @generated
   */
  public Adapter createRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Assignment <em>Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Assignment
   * @generated
   */
  public Adapter createAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.FunctionCall <em>Function Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.FunctionCall
   * @generated
   */
  public Adapter createFunctionCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Obligation <em>Obligation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Obligation
   * @generated
   */
  public Adapter createObligationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Power <em>Power</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Power
   * @generated
   */
  public Adapter createPowerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PowerFunction <em>Power Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PowerFunction
   * @generated
   */
  public Adapter createPowerFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Proposition <em>Proposition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Proposition
   * @generated
   */
  public Adapter createPropositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PredicateFunction <em>Predicate Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PredicateFunction
   * @generated
   */
  public Adapter createPredicateFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.OtherFunction <em>Other Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.OtherFunction
   * @generated
   */
  public Adapter createOtherFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Event <em>Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Event
   * @generated
   */
  public Adapter createEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Point <em>Point</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Point
   * @generated
   */
  public Adapter createPointAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PointExpression <em>Point Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PointExpression
   * @generated
   */
  public Adapter createPointExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Timevalue <em>Timevalue</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Timevalue
   * @generated
   */
  public Adapter createTimevalueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Interval <em>Interval</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Interval
   * @generated
   */
  public Adapter createIntervalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.IntervalExpression <em>Interval Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.IntervalExpression
   * @generated
   */
  public Adapter createIntervalExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Situation <em>Situation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Situation
   * @generated
   */
  public Adapter createSituationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PowerState <em>Power State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PowerState
   * @generated
   */
  public Adapter createPowerStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.ObligationState <em>Obligation State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.ObligationState
   * @generated
   */
  public Adapter createObligationStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.ContractState <em>Contract State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.ContractState
   * @generated
   */
  public Adapter createContractStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.OAssignExpression <em>OAssign Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.OAssignExpression
   * @generated
   */
  public Adapter createOAssignExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.VariableDotExpression <em>Variable Dot Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.VariableDotExpression
   * @generated
   */
  public Adapter createVariableDotExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.VariableRef <em>Variable Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.VariableRef
   * @generated
   */
  public Adapter createVariableRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.AssignExpression <em>Assign Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.AssignExpression
   * @generated
   */
  public Adapter createAssignExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Or <em>Or</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Or
   * @generated
   */
  public Adapter createOrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.And <em>And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.And
   * @generated
   */
  public Adapter createAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Equality <em>Equality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Equality
   * @generated
   */
  public Adapter createEqualityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Comparison <em>Comparison</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Comparison
   * @generated
   */
  public Adapter createComparisonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Plus <em>Plus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Plus
   * @generated
   */
  public Adapter createPlusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Minus <em>Minus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Minus
   * @generated
   */
  public Adapter createMinusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Multi <em>Multi</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Multi
   * @generated
   */
  public Adapter createMultiAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.Div <em>Div</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.Div
   * @generated
   */
  public Adapter createDivAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PrimaryExpressionRecursive <em>Primary Expression Recursive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PrimaryExpressionRecursive
   * @generated
   */
  public Adapter createPrimaryExpressionRecursiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PrimaryExpressionFunctionCall <em>Primary Expression Function Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PrimaryExpressionFunctionCall
   * @generated
   */
  public Adapter createPrimaryExpressionFunctionCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.NegatedPrimaryExpression <em>Negated Primary Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.NegatedPrimaryExpression
   * @generated
   */
  public Adapter createNegatedPrimaryExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.AtomicExpressionTrue <em>Atomic Expression True</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.AtomicExpressionTrue
   * @generated
   */
  public Adapter createAtomicExpressionTrueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.AtomicExpressionFalse <em>Atomic Expression False</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.AtomicExpressionFalse
   * @generated
   */
  public Adapter createAtomicExpressionFalseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.AtomicExpressionDouble <em>Atomic Expression Double</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.AtomicExpressionDouble
   * @generated
   */
  public Adapter createAtomicExpressionDoubleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.AtomicExpressionInt <em>Atomic Expression Int</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.AtomicExpressionInt
   * @generated
   */
  public Adapter createAtomicExpressionIntAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.AtomicExpressionDate <em>Atomic Expression Date</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.AtomicExpressionDate
   * @generated
   */
  public Adapter createAtomicExpressionDateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.AtomicExpressionEnum <em>Atomic Expression Enum</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.AtomicExpressionEnum
   * @generated
   */
  public Adapter createAtomicExpressionEnumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.AtomicExpressionString <em>Atomic Expression String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.AtomicExpressionString
   * @generated
   */
  public Adapter createAtomicExpressionStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.AtomicExpressionParameter <em>Atomic Expression Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.AtomicExpressionParameter
   * @generated
   */
  public Adapter createAtomicExpressionParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.TwoArgMathFunction <em>Two Arg Math Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.TwoArgMathFunction
   * @generated
   */
  public Adapter createTwoArgMathFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.OneArgMathFunction <em>One Arg Math Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.OneArgMathFunction
   * @generated
   */
  public Adapter createOneArgMathFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.ThreeArgStringFunction <em>Three Arg String Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.ThreeArgStringFunction
   * @generated
   */
  public Adapter createThreeArgStringFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.TwoArgStringFunction <em>Two Arg String Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.TwoArgStringFunction
   * @generated
   */
  public Adapter createTwoArgStringFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.OneArgStringFunction <em>One Arg String Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.OneArgStringFunction
   * @generated
   */
  public Adapter createOneArgStringFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.ThreeArgDateFunction <em>Three Arg Date Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.ThreeArgDateFunction
   * @generated
   */
  public Adapter createThreeArgDateFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PFObligationSuspended <em>PF Obligation Suspended</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PFObligationSuspended
   * @generated
   */
  public Adapter createPFObligationSuspendedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PFObligationResumed <em>PF Obligation Resumed</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PFObligationResumed
   * @generated
   */
  public Adapter createPFObligationResumedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PFObligationDischarged <em>PF Obligation Discharged</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PFObligationDischarged
   * @generated
   */
  public Adapter createPFObligationDischargedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PFObligationTerminated <em>PF Obligation Terminated</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PFObligationTerminated
   * @generated
   */
  public Adapter createPFObligationTerminatedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PFObligationTriggered <em>PF Obligation Triggered</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PFObligationTriggered
   * @generated
   */
  public Adapter createPFObligationTriggeredAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PFContractSuspended <em>PF Contract Suspended</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PFContractSuspended
   * @generated
   */
  public Adapter createPFContractSuspendedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PFContractResumed <em>PF Contract Resumed</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PFContractResumed
   * @generated
   */
  public Adapter createPFContractResumedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PFContractTerminated <em>PF Contract Terminated</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PFContractTerminated
   * @generated
   */
  public Adapter createPFContractTerminatedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.POr <em>POr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.POr
   * @generated
   */
  public Adapter createPOrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PAnd <em>PAnd</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PAnd
   * @generated
   */
  public Adapter createPAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PEquality <em>PEquality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PEquality
   * @generated
   */
  public Adapter createPEqualityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PComparison <em>PComparison</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PComparison
   * @generated
   */
  public Adapter createPComparisonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PAtomRecursive <em>PAtom Recursive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PAtomRecursive
   * @generated
   */
  public Adapter createPAtomRecursiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.NegatedPAtom <em>Negated PAtom</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.NegatedPAtom
   * @generated
   */
  public Adapter createNegatedPAtomAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PAtomPredicate <em>PAtom Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PAtomPredicate
   * @generated
   */
  public Adapter createPAtomPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PAtomFunction <em>PAtom Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PAtomFunction
   * @generated
   */
  public Adapter createPAtomFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PAtomEnum <em>PAtom Enum</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PAtomEnum
   * @generated
   */
  public Adapter createPAtomEnumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PAtomVariable <em>PAtom Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PAtomVariable
   * @generated
   */
  public Adapter createPAtomVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PAtomPredicateTrueLiteral <em>PAtom Predicate True Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PAtomPredicateTrueLiteral
   * @generated
   */
  public Adapter createPAtomPredicateTrueLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PAtomPredicateFalseLiteral <em>PAtom Predicate False Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PAtomPredicateFalseLiteral
   * @generated
   */
  public Adapter createPAtomPredicateFalseLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PAtomDoubleLiteral <em>PAtom Double Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PAtomDoubleLiteral
   * @generated
   */
  public Adapter createPAtomDoubleLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PAtomIntLiteral <em>PAtom Int Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PAtomIntLiteral
   * @generated
   */
  public Adapter createPAtomIntLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PAtomStringLiteral <em>PAtom String Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PAtomStringLiteral
   * @generated
   */
  public Adapter createPAtomStringLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PAtomDateLiteral <em>PAtom Date Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PAtomDateLiteral
   * @generated
   */
  public Adapter createPAtomDateLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionHappens <em>Predicate Function Happens</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionHappens
   * @generated
   */
  public Adapter createPredicateFunctionHappensAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionWHappensBefore <em>Predicate Function WHappens Before</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionWHappensBefore
   * @generated
   */
  public Adapter createPredicateFunctionWHappensBeforeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionSHappensBefore <em>Predicate Function SHappens Before</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionSHappensBefore
   * @generated
   */
  public Adapter createPredicateFunctionSHappensBeforeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionHappensWithin <em>Predicate Function Happens Within</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionHappensWithin
   * @generated
   */
  public Adapter createPredicateFunctionHappensWithinAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionWHappensBeforeEvent <em>Predicate Function WHappens Before Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionWHappensBeforeEvent
   * @generated
   */
  public Adapter createPredicateFunctionWHappensBeforeEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionSHappensBeforeEvent <em>Predicate Function SHappens Before Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionSHappensBeforeEvent
   * @generated
   */
  public Adapter createPredicateFunctionSHappensBeforeEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionHappensAfter <em>Predicate Function Happens After</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionHappensAfter
   * @generated
   */
  public Adapter createPredicateFunctionHappensAfterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionOccurs <em>Predicate Function Occurs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionOccurs
   * @generated
   */
  public Adapter createPredicateFunctionOccursAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionAssignment <em>Predicate Function Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionAssignment
   * @generated
   */
  public Adapter createPredicateFunctionAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionAssignmentOnly <em>Predicate Function Assignment Only</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionAssignmentOnly
   * @generated
   */
  public Adapter createPredicateFunctionAssignmentOnlyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionIsEqual <em>Predicate Function Is Equal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionIsEqual
   * @generated
   */
  public Adapter createPredicateFunctionIsEqualAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionIsOwner <em>Predicate Function Is Owner</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionIsOwner
   * @generated
   */
  public Adapter createPredicateFunctionIsOwnerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionCannotBeAssigned <em>Predicate Function Cannot Be Assigned</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PredicateFunctionCannotBeAssigned
   * @generated
   */
  public Adapter createPredicateFunctionCannotBeAssignedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.VariableEvent <em>Variable Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.VariableEvent
   * @generated
   */
  public Adapter createVariableEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PowerEvent <em>Power Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PowerEvent
   * @generated
   */
  public Adapter createPowerEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.ObligationEvent <em>Obligation Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.ObligationEvent
   * @generated
   */
  public Adapter createObligationEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.ContractEvent <em>Contract Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.ContractEvent
   * @generated
   */
  public Adapter createContractEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PointFunction <em>Point Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PointFunction
   * @generated
   */
  public Adapter createPointFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PointAtomParameterDotExpression <em>Point Atom Parameter Dot Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PointAtomParameterDotExpression
   * @generated
   */
  public Adapter createPointAtomParameterDotExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PointAtomObligationEvent <em>Point Atom Obligation Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PointAtomObligationEvent
   * @generated
   */
  public Adapter createPointAtomObligationEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PointAtomContractEvent <em>Point Atom Contract Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PointAtomContractEvent
   * @generated
   */
  public Adapter createPointAtomContractEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.PointAtomPowerEvent <em>Point Atom Power Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.PointAtomPowerEvent
   * @generated
   */
  public Adapter createPointAtomPowerEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.TimevalueInt <em>Timevalue Int</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.TimevalueInt
   * @generated
   */
  public Adapter createTimevalueIntAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.TimevalueVariable <em>Timevalue Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.TimevalueVariable
   * @generated
   */
  public Adapter createTimevalueVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.IntervalFunction <em>Interval Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.IntervalFunction
   * @generated
   */
  public Adapter createIntervalFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ca.uottawa.csmlab.symboleo.symboleo.SituationExpression <em>Situation Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ca.uottawa.csmlab.symboleo.symboleo.SituationExpression
   * @generated
   */
  public Adapter createSituationExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //SymboleoAdapterFactory

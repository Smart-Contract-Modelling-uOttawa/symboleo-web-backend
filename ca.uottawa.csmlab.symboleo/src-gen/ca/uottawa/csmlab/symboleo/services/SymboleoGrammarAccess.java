/*
 * generated by Xtext 2.31.0
 */
package ca.uottawa.csmlab.symboleo.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SymboleoGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDomainNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDomainNameIDTerminalRuleCall_1_0 = (RuleCall)cDomainNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cDomainTypesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cDomainTypesDomainTypeParserRuleCall_2_0_0 = (RuleCall)cDomainTypesAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cEndDomainKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTimeGranularityKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cIsKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cTimeUnitsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cTimeUnitsTimeUnitParserRuleCall_4_2_0 = (RuleCall)cTimeUnitsAssignment_4_2.eContents().get(0);
		private final Keyword cContractKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cContractNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cContractNameIDTerminalRuleCall_6_0 = (RuleCall)cContractNameAssignment_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cParametersAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_8_0_0 = (RuleCall)cParametersAssignment_8_0.eContents().get(0);
		private final Keyword cCommaKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cParametersAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cParametersParameterParserRuleCall_9_0 = (RuleCall)cParametersAssignment_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cDeclarationsKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Group cGroup_11_1 = (Group)cGroup_11.eContents().get(1);
		private final Assignment cVariablesAssignment_11_1_0 = (Assignment)cGroup_11_1.eContents().get(0);
		private final RuleCall cVariablesVariableParserRuleCall_11_1_0_0 = (RuleCall)cVariablesAssignment_11_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_11_1_1 = (Keyword)cGroup_11_1.eContents().get(1);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cPreconditionsKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Group cGroup_12_1 = (Group)cGroup_12.eContents().get(1);
		private final Assignment cPreconditionsAssignment_12_1_0 = (Assignment)cGroup_12_1.eContents().get(0);
		private final RuleCall cPreconditionsPropositionParserRuleCall_12_1_0_0 = (RuleCall)cPreconditionsAssignment_12_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_12_1_1 = (Keyword)cGroup_12_1.eContents().get(1);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cPostconditionsKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Group cGroup_13_1 = (Group)cGroup_13.eContents().get(1);
		private final Assignment cPostconditionsAssignment_13_1_0 = (Assignment)cGroup_13_1.eContents().get(0);
		private final RuleCall cPostconditionsPropositionParserRuleCall_13_1_0_0 = (RuleCall)cPostconditionsAssignment_13_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_13_1_1 = (Keyword)cGroup_13_1.eContents().get(1);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cObligationsKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Group cGroup_14_1 = (Group)cGroup_14.eContents().get(1);
		private final Assignment cObligationsAssignment_14_1_0 = (Assignment)cGroup_14_1.eContents().get(0);
		private final RuleCall cObligationsObligationParserRuleCall_14_1_0_0 = (RuleCall)cObligationsAssignment_14_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_14_1_1 = (Keyword)cGroup_14_1.eContents().get(1);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Keyword cSurvivingKeyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Keyword cObligationsKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final Group cGroup_15_2 = (Group)cGroup_15.eContents().get(2);
		private final Assignment cSurvivingObligationsAssignment_15_2_0 = (Assignment)cGroup_15_2.eContents().get(0);
		private final RuleCall cSurvivingObligationsObligationParserRuleCall_15_2_0_0 = (RuleCall)cSurvivingObligationsAssignment_15_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_15_2_1 = (Keyword)cGroup_15_2.eContents().get(1);
		private final Group cGroup_16 = (Group)cGroup.eContents().get(16);
		private final Keyword cPowersKeyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Group cGroup_16_1 = (Group)cGroup_16.eContents().get(1);
		private final Assignment cPowersAssignment_16_1_0 = (Assignment)cGroup_16_1.eContents().get(0);
		private final RuleCall cPowersPowerParserRuleCall_16_1_0_0 = (RuleCall)cPowersAssignment_16_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_16_1_1 = (Keyword)cGroup_16_1.eContents().get(1);
		private final Group cGroup_17 = (Group)cGroup.eContents().get(17);
		private final Keyword cConstraintsKeyword_17_0 = (Keyword)cGroup_17.eContents().get(0);
		private final Group cGroup_17_1 = (Group)cGroup_17.eContents().get(1);
		private final Assignment cConstraintsAssignment_17_1_0 = (Assignment)cGroup_17_1.eContents().get(0);
		private final RuleCall cConstraintsPropositionParserRuleCall_17_1_0_0 = (RuleCall)cConstraintsAssignment_17_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_17_1_1 = (Keyword)cGroup_17_1.eContents().get(1);
		private final Keyword cEndContractKeyword_18 = (Keyword)cGroup.eContents().get(18);
		
		//Model:
		//    'Domain' domainName=ID
		//    (domainTypes+=DomainType ';')+
		//    'endDomain'
		//    ('TimeGranularity' 'is' timeUnits=TimeUnit)?
		//    'Contract' contractName=ID '(' (parameters+=Parameter ',')+ (parameters+=Parameter) ')'
		//    ('Declarations' (variables+=Variable ';')*)?
		//    ('Preconditions' (preconditions+=Proposition ';')*)?
		//    ('Postconditions' (postconditions+=Proposition ';')*)?
		//    ('Obligations' (obligations+=Obligation ';')*)+
		//    ('Surviving' 'Obligations' (survivingObligations+=Obligation ';')*)?
		//    ('Powers' (powers+=Power ';')*)?
		//    ('Constraints' (constraints+=Proposition ';')*)?
		//    'endContract';
		@Override public ParserRule getRule() { return rule; }
		
		//'Domain' domainName=ID
		//(domainTypes+=DomainType ';')+
		//'endDomain'
		//('TimeGranularity' 'is' timeUnits=TimeUnit)?
		//'Contract' contractName=ID '(' (parameters+=Parameter ',')+ (parameters+=Parameter) ')'
		//('Declarations' (variables+=Variable ';')*)?
		//('Preconditions' (preconditions+=Proposition ';')*)?
		//('Postconditions' (postconditions+=Proposition ';')*)?
		//('Obligations' (obligations+=Obligation ';')*)+
		//('Surviving' 'Obligations' (survivingObligations+=Obligation ';')*)?
		//('Powers' (powers+=Power ';')*)?
		//('Constraints' (constraints+=Proposition ';')*)?
		//'endContract'
		public Group getGroup() { return cGroup; }
		
		//'Domain'
		public Keyword getDomainKeyword_0() { return cDomainKeyword_0; }
		
		//domainName=ID
		public Assignment getDomainNameAssignment_1() { return cDomainNameAssignment_1; }
		
		//ID
		public RuleCall getDomainNameIDTerminalRuleCall_1_0() { return cDomainNameIDTerminalRuleCall_1_0; }
		
		//(domainTypes+=DomainType ';')+
		public Group getGroup_2() { return cGroup_2; }
		
		//domainTypes+=DomainType
		public Assignment getDomainTypesAssignment_2_0() { return cDomainTypesAssignment_2_0; }
		
		//DomainType
		public RuleCall getDomainTypesDomainTypeParserRuleCall_2_0_0() { return cDomainTypesDomainTypeParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//'endDomain'
		public Keyword getEndDomainKeyword_3() { return cEndDomainKeyword_3; }
		
		//('TimeGranularity' 'is' timeUnits=TimeUnit)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'TimeGranularity'
		public Keyword getTimeGranularityKeyword_4_0() { return cTimeGranularityKeyword_4_0; }
		
		//'is'
		public Keyword getIsKeyword_4_1() { return cIsKeyword_4_1; }
		
		//timeUnits=TimeUnit
		public Assignment getTimeUnitsAssignment_4_2() { return cTimeUnitsAssignment_4_2; }
		
		//TimeUnit
		public RuleCall getTimeUnitsTimeUnitParserRuleCall_4_2_0() { return cTimeUnitsTimeUnitParserRuleCall_4_2_0; }
		
		//'Contract'
		public Keyword getContractKeyword_5() { return cContractKeyword_5; }
		
		//contractName=ID
		public Assignment getContractNameAssignment_6() { return cContractNameAssignment_6; }
		
		//ID
		public RuleCall getContractNameIDTerminalRuleCall_6_0() { return cContractNameIDTerminalRuleCall_6_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }
		
		//(parameters+=Parameter ',')+
		public Group getGroup_8() { return cGroup_8; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_8_0() { return cParametersAssignment_8_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_8_0_0() { return cParametersParameterParserRuleCall_8_0_0; }
		
		//','
		public Keyword getCommaKeyword_8_1() { return cCommaKeyword_8_1; }
		
		//(parameters+=Parameter)
		public Assignment getParametersAssignment_9() { return cParametersAssignment_9; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_9_0() { return cParametersParameterParserRuleCall_9_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
		
		//('Declarations' (variables+=Variable ';')*)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'Declarations'
		public Keyword getDeclarationsKeyword_11_0() { return cDeclarationsKeyword_11_0; }
		
		//(variables+=Variable ';')*
		public Group getGroup_11_1() { return cGroup_11_1; }
		
		//variables+=Variable
		public Assignment getVariablesAssignment_11_1_0() { return cVariablesAssignment_11_1_0; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_11_1_0_0() { return cVariablesVariableParserRuleCall_11_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_11_1_1() { return cSemicolonKeyword_11_1_1; }
		
		//('Preconditions' (preconditions+=Proposition ';')*)?
		public Group getGroup_12() { return cGroup_12; }
		
		//'Preconditions'
		public Keyword getPreconditionsKeyword_12_0() { return cPreconditionsKeyword_12_0; }
		
		//(preconditions+=Proposition ';')*
		public Group getGroup_12_1() { return cGroup_12_1; }
		
		//preconditions+=Proposition
		public Assignment getPreconditionsAssignment_12_1_0() { return cPreconditionsAssignment_12_1_0; }
		
		//Proposition
		public RuleCall getPreconditionsPropositionParserRuleCall_12_1_0_0() { return cPreconditionsPropositionParserRuleCall_12_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_12_1_1() { return cSemicolonKeyword_12_1_1; }
		
		//('Postconditions' (postconditions+=Proposition ';')*)?
		public Group getGroup_13() { return cGroup_13; }
		
		//'Postconditions'
		public Keyword getPostconditionsKeyword_13_0() { return cPostconditionsKeyword_13_0; }
		
		//(postconditions+=Proposition ';')*
		public Group getGroup_13_1() { return cGroup_13_1; }
		
		//postconditions+=Proposition
		public Assignment getPostconditionsAssignment_13_1_0() { return cPostconditionsAssignment_13_1_0; }
		
		//Proposition
		public RuleCall getPostconditionsPropositionParserRuleCall_13_1_0_0() { return cPostconditionsPropositionParserRuleCall_13_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_13_1_1() { return cSemicolonKeyword_13_1_1; }
		
		//('Obligations' (obligations+=Obligation ';')*)+
		public Group getGroup_14() { return cGroup_14; }
		
		//'Obligations'
		public Keyword getObligationsKeyword_14_0() { return cObligationsKeyword_14_0; }
		
		//(obligations+=Obligation ';')*
		public Group getGroup_14_1() { return cGroup_14_1; }
		
		//obligations+=Obligation
		public Assignment getObligationsAssignment_14_1_0() { return cObligationsAssignment_14_1_0; }
		
		//Obligation
		public RuleCall getObligationsObligationParserRuleCall_14_1_0_0() { return cObligationsObligationParserRuleCall_14_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_14_1_1() { return cSemicolonKeyword_14_1_1; }
		
		//('Surviving' 'Obligations' (survivingObligations+=Obligation ';')*)?
		public Group getGroup_15() { return cGroup_15; }
		
		//'Surviving'
		public Keyword getSurvivingKeyword_15_0() { return cSurvivingKeyword_15_0; }
		
		//'Obligations'
		public Keyword getObligationsKeyword_15_1() { return cObligationsKeyword_15_1; }
		
		//(survivingObligations+=Obligation ';')*
		public Group getGroup_15_2() { return cGroup_15_2; }
		
		//survivingObligations+=Obligation
		public Assignment getSurvivingObligationsAssignment_15_2_0() { return cSurvivingObligationsAssignment_15_2_0; }
		
		//Obligation
		public RuleCall getSurvivingObligationsObligationParserRuleCall_15_2_0_0() { return cSurvivingObligationsObligationParserRuleCall_15_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_15_2_1() { return cSemicolonKeyword_15_2_1; }
		
		//('Powers' (powers+=Power ';')*)?
		public Group getGroup_16() { return cGroup_16; }
		
		//'Powers'
		public Keyword getPowersKeyword_16_0() { return cPowersKeyword_16_0; }
		
		//(powers+=Power ';')*
		public Group getGroup_16_1() { return cGroup_16_1; }
		
		//powers+=Power
		public Assignment getPowersAssignment_16_1_0() { return cPowersAssignment_16_1_0; }
		
		//Power
		public RuleCall getPowersPowerParserRuleCall_16_1_0_0() { return cPowersPowerParserRuleCall_16_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_16_1_1() { return cSemicolonKeyword_16_1_1; }
		
		//('Constraints' (constraints+=Proposition ';')*)?
		public Group getGroup_17() { return cGroup_17; }
		
		//'Constraints'
		public Keyword getConstraintsKeyword_17_0() { return cConstraintsKeyword_17_0; }
		
		//(constraints+=Proposition ';')*
		public Group getGroup_17_1() { return cGroup_17_1; }
		
		//constraints+=Proposition
		public Assignment getConstraintsAssignment_17_1_0() { return cConstraintsAssignment_17_1_0; }
		
		//Proposition
		public RuleCall getConstraintsPropositionParserRuleCall_17_1_0_0() { return cConstraintsPropositionParserRuleCall_17_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_17_1_1() { return cSemicolonKeyword_17_1_1; }
		
		//'endContract'
		public Keyword getEndContractKeyword_18() { return cEndContractKeyword_18; }
	}
	public class DomainTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.DomainType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAliasParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRegularTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumerationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DomainType:
		//    Alias | RegularType | Enumeration;
		@Override public ParserRule getRule() { return rule; }
		
		//Alias | RegularType | Enumeration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Alias
		public RuleCall getAliasParserRuleCall_0() { return cAliasParserRuleCall_0; }
		
		//RegularType
		public RuleCall getRegularTypeParserRuleCall_1() { return cRegularTypeParserRuleCall_1; }
		
		//Enumeration
		public RuleCall getEnumerationParserRuleCall_2() { return cEnumerationParserRuleCall_2; }
	}
	public class AliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.Alias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cIsAKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeBaseTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Alias:
		//    name=ID 'isA' type=BaseType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'isA' type=BaseType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'isA'
		public Keyword getIsAKeyword_1() { return cIsAKeyword_1; }
		
		//type=BaseType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//BaseType
		public RuleCall getTypeBaseTypeParserRuleCall_2_0() { return cTypeBaseTypeParserRuleCall_2_0; }
	}
	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cIsAnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEnumerationKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cEnumerationItemsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cEnumerationItemsEnumItemParserRuleCall_4_0_0 = (RuleCall)cEnumerationItemsAssignment_4_0.eContents().get(0);
		private final Keyword cCommaKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cEnumerationItemsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEnumerationItemsEnumItemParserRuleCall_5_0 = (RuleCall)cEnumerationItemsAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Enumeration:
		//    name=ID 'isAn' 'Enumeration' '(' (enumerationItems+=EnumItem ',')* (enumerationItems+=EnumItem) ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'isAn' 'Enumeration' '(' (enumerationItems+=EnumItem ',')* (enumerationItems+=EnumItem) ')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'isAn'
		public Keyword getIsAnKeyword_1() { return cIsAnKeyword_1; }
		
		//'Enumeration'
		public Keyword getEnumerationKeyword_2() { return cEnumerationKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(enumerationItems+=EnumItem ',')*
		public Group getGroup_4() { return cGroup_4; }
		
		//enumerationItems+=EnumItem
		public Assignment getEnumerationItemsAssignment_4_0() { return cEnumerationItemsAssignment_4_0; }
		
		//EnumItem
		public RuleCall getEnumerationItemsEnumItemParserRuleCall_4_0_0() { return cEnumerationItemsEnumItemParserRuleCall_4_0_0; }
		
		//','
		public Keyword getCommaKeyword_4_1() { return cCommaKeyword_4_1; }
		
		//(enumerationItems+=EnumItem)
		public Assignment getEnumerationItemsAssignment_5() { return cEnumerationItemsAssignment_5; }
		
		//EnumItem
		public RuleCall getEnumerationItemsEnumItemParserRuleCall_5_0() { return cEnumerationItemsEnumItemParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class EnumItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.EnumItem");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumItem:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class RegularTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.RegularType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Keyword cIsAKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Keyword cIsAnKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Assignment cOntologyTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOntologyTypeOntologyTypeParserRuleCall_0_2_0 = (RuleCall)cOntologyTypeAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cWithKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Group cGroup_0_3_1 = (Group)cGroup_0_3.eContents().get(1);
		private final Assignment cAttributesAssignment_0_3_1_0 = (Assignment)cGroup_0_3_1.eContents().get(0);
		private final RuleCall cAttributesAttributeParserRuleCall_0_3_1_0_0 = (RuleCall)cAttributesAssignment_0_3_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_3_1_1 = (Keyword)cGroup_0_3_1.eContents().get(1);
		private final Assignment cAttributesAssignment_0_3_2 = (Assignment)cGroup_0_3.eContents().get(2);
		private final RuleCall cAttributesAttributeParserRuleCall_0_3_2_0 = (RuleCall)cAttributesAssignment_0_3_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cIsAKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cIsAnKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRegularTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cRegularTypeRegularTypeCrossReference_1_2_0 = (CrossReference)cRegularTypeAssignment_1_2.eContents().get(0);
		private final RuleCall cRegularTypeRegularTypeIDTerminalRuleCall_1_2_0_1 = (RuleCall)cRegularTypeRegularTypeCrossReference_1_2_0.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cWithKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cGroup_1_3.eContents().get(1);
		private final Assignment cAttributesAssignment_1_3_1_0 = (Assignment)cGroup_1_3_1.eContents().get(0);
		private final RuleCall cAttributesAttributeParserRuleCall_1_3_1_0_0 = (RuleCall)cAttributesAssignment_1_3_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_3_1_1 = (Keyword)cGroup_1_3_1.eContents().get(1);
		private final Assignment cAttributesAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cAttributesAttributeParserRuleCall_1_3_2_0 = (RuleCall)cAttributesAssignment_1_3_2.eContents().get(0);
		
		//// TODO not extend itself, prevent cycles
		//RegularType:
		//    name=ID ('isA' | 'isAn') ontologyType=OntologyType ('with' (attributes+=Attribute ',')* (attributes+=Attribute))? |
		//    name=ID ('isA' | 'isAn') regularType=[RegularType] ('with' (attributes+=Attribute ',')* (attributes+=Attribute))?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('isA' | 'isAn') ontologyType=OntologyType ('with' (attributes+=Attribute ',')* (attributes+=Attribute))? |
		//name=ID ('isA' | 'isAn') regularType=[RegularType] ('with' (attributes+=Attribute ',')* (attributes+=Attribute))?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=ID ('isA' | 'isAn') ontologyType=OntologyType ('with' (attributes+=Attribute ',')* (attributes+=Attribute))?
		public Group getGroup_0() { return cGroup_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }
		
		//('isA' | 'isAn')
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//'isA'
		public Keyword getIsAKeyword_0_1_0() { return cIsAKeyword_0_1_0; }
		
		//'isAn'
		public Keyword getIsAnKeyword_0_1_1() { return cIsAnKeyword_0_1_1; }
		
		//ontologyType=OntologyType
		public Assignment getOntologyTypeAssignment_0_2() { return cOntologyTypeAssignment_0_2; }
		
		//OntologyType
		public RuleCall getOntologyTypeOntologyTypeParserRuleCall_0_2_0() { return cOntologyTypeOntologyTypeParserRuleCall_0_2_0; }
		
		//('with' (attributes+=Attribute ',')* (attributes+=Attribute))?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'with'
		public Keyword getWithKeyword_0_3_0() { return cWithKeyword_0_3_0; }
		
		//(attributes+=Attribute ',')*
		public Group getGroup_0_3_1() { return cGroup_0_3_1; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_0_3_1_0() { return cAttributesAssignment_0_3_1_0; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_0_3_1_0_0() { return cAttributesAttributeParserRuleCall_0_3_1_0_0; }
		
		//','
		public Keyword getCommaKeyword_0_3_1_1() { return cCommaKeyword_0_3_1_1; }
		
		//(attributes+=Attribute)
		public Assignment getAttributesAssignment_0_3_2() { return cAttributesAssignment_0_3_2; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_0_3_2_0() { return cAttributesAttributeParserRuleCall_0_3_2_0; }
		
		//name=ID ('isA' | 'isAn') regularType=[RegularType] ('with' (attributes+=Attribute ',')* (attributes+=Attribute))?
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//('isA' | 'isAn')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'isA'
		public Keyword getIsAKeyword_1_1_0() { return cIsAKeyword_1_1_0; }
		
		//'isAn'
		public Keyword getIsAnKeyword_1_1_1() { return cIsAnKeyword_1_1_1; }
		
		//regularType=[RegularType]
		public Assignment getRegularTypeAssignment_1_2() { return cRegularTypeAssignment_1_2; }
		
		//[RegularType]
		public CrossReference getRegularTypeRegularTypeCrossReference_1_2_0() { return cRegularTypeRegularTypeCrossReference_1_2_0; }
		
		//ID
		public RuleCall getRegularTypeRegularTypeIDTerminalRuleCall_1_2_0_1() { return cRegularTypeRegularTypeIDTerminalRuleCall_1_2_0_1; }
		
		//('with' (attributes+=Attribute ',')* (attributes+=Attribute))?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'with'
		public Keyword getWithKeyword_1_3_0() { return cWithKeyword_1_3_0; }
		
		//(attributes+=Attribute ',')*
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_1_3_1_0() { return cAttributesAssignment_1_3_1_0; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_1_3_1_0_0() { return cAttributesAttributeParserRuleCall_1_3_1_0_0; }
		
		//','
		public Keyword getCommaKeyword_1_3_1_1() { return cCommaKeyword_1_3_1_1; }
		
		//(attributes+=Attribute)
		public Assignment getAttributesAssignment_1_3_2() { return cAttributesAssignment_1_3_2; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_1_3_2_0() { return cAttributesAttributeParserRuleCall_1_3_2_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.Attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAttributeModifierAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAttributeModifierAttributeModifierParserRuleCall_0_0_0 = (RuleCall)cAttributeModifierAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cBaseTypeAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cBaseTypeBaseTypeParserRuleCall_0_3_0 = (RuleCall)cBaseTypeAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cAttributeModifierAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAttributeModifierAttributeModifierParserRuleCall_1_0_0 = (RuleCall)cAttributeModifierAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cDomainTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cDomainTypeDomainTypeCrossReference_1_3_0 = (CrossReference)cDomainTypeAssignment_1_3.eContents().get(0);
		private final RuleCall cDomainTypeDomainTypeIDTerminalRuleCall_1_3_0_1 = (RuleCall)cDomainTypeDomainTypeCrossReference_1_3_0.eContents().get(1);
		
		//Attribute:
		//    attributeModifier=AttributeModifier? name=ID ':' baseType=BaseType |
		//    attributeModifier=AttributeModifier? name=ID ':' domainType=[DomainType];
		@Override public ParserRule getRule() { return rule; }
		
		//attributeModifier=AttributeModifier? name=ID ':' baseType=BaseType |
		//attributeModifier=AttributeModifier? name=ID ':' domainType=[DomainType]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//attributeModifier=AttributeModifier? name=ID ':' baseType=BaseType
		public Group getGroup_0() { return cGroup_0; }
		
		//attributeModifier=AttributeModifier?
		public Assignment getAttributeModifierAssignment_0_0() { return cAttributeModifierAssignment_0_0; }
		
		//AttributeModifier
		public RuleCall getAttributeModifierAttributeModifierParserRuleCall_0_0_0() { return cAttributeModifierAttributeModifierParserRuleCall_0_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }
		
		//baseType=BaseType
		public Assignment getBaseTypeAssignment_0_3() { return cBaseTypeAssignment_0_3; }
		
		//BaseType
		public RuleCall getBaseTypeBaseTypeParserRuleCall_0_3_0() { return cBaseTypeBaseTypeParserRuleCall_0_3_0; }
		
		//attributeModifier=AttributeModifier? name=ID ':' domainType=[DomainType]
		public Group getGroup_1() { return cGroup_1; }
		
		//attributeModifier=AttributeModifier?
		public Assignment getAttributeModifierAssignment_1_0() { return cAttributeModifierAssignment_1_0; }
		
		//AttributeModifier
		public RuleCall getAttributeModifierAttributeModifierParserRuleCall_1_0_0() { return cAttributeModifierAttributeModifierParserRuleCall_1_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//domainType=[DomainType]
		public Assignment getDomainTypeAssignment_1_3() { return cDomainTypeAssignment_1_3; }
		
		//[DomainType]
		public CrossReference getDomainTypeDomainTypeCrossReference_1_3_0() { return cDomainTypeDomainTypeCrossReference_1_3_0; }
		
		//ID
		public RuleCall getDomainTypeDomainTypeIDTerminalRuleCall_1_3_0_1() { return cDomainTypeDomainTypeIDTerminalRuleCall_1_3_0_1; }
	}
	public class BaseTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.BaseType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameNumberKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameStringKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameDateKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameBooleanKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		
		//BaseType:
		//    name=("Number" | "String" | "Date" | "Boolean");
		@Override public ParserRule getRule() { return rule; }
		
		//name=("Number" | "String" | "Date" | "Boolean")
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//("Number" | "String" | "Date" | "Boolean")
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//"Number"
		public Keyword getNameNumberKeyword_0_0() { return cNameNumberKeyword_0_0; }
		
		//"String"
		public Keyword getNameStringKeyword_0_1() { return cNameStringKeyword_0_1; }
		
		//"Date"
		public Keyword getNameDateKeyword_0_2() { return cNameDateKeyword_0_2; }
		
		//"Boolean"
		public Keyword getNameBooleanKeyword_0_3() { return cNameBooleanKeyword_0_3; }
	}
	public class OntologyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.OntologyType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameAssetKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameEventKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameRoleKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameContractKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		
		//OntologyType:
		//    name=("Asset" | "Event" | "Role" | "Contract");
		@Override public ParserRule getRule() { return rule; }
		
		//name=("Asset" | "Event" | "Role" | "Contract")
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//("Asset" | "Event" | "Role" | "Contract")
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//"Asset"
		public Keyword getNameAssetKeyword_0_0() { return cNameAssetKeyword_0_0; }
		
		//"Event"
		public Keyword getNameEventKeyword_0_1() { return cNameEventKeyword_0_1; }
		
		//"Role"
		public Keyword getNameRoleKeyword_0_2() { return cNameRoleKeyword_0_2; }
		
		//"Contract"
		public Keyword getNameContractKeyword_0_3() { return cNameContractKeyword_0_3; }
	}
	public class AttributeModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.AttributeModifier");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameEnvKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//AttributeModifier:
		//    name=('Env');
		@Override public ParserRule getRule() { return rule; }
		
		//name=('Env')
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//('Env')
		public Keyword getNameEnvKeyword_0() { return cNameEnvKeyword_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeParameterTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Parameter:
		//    name=ID ':' type=ParameterType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=ParameterType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=ParameterType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//ParameterType
		public RuleCall getTypeParameterTypeParserRuleCall_2_0() { return cTypeParameterTypeParserRuleCall_2_0; }
	}
	public class ParameterTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.ParameterType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBaseTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBaseTypeBaseTypeParserRuleCall_0_0 = (RuleCall)cBaseTypeAssignment_0.eContents().get(0);
		private final Assignment cDomainTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cDomainTypeDomainTypeCrossReference_1_0 = (CrossReference)cDomainTypeAssignment_1.eContents().get(0);
		private final RuleCall cDomainTypeDomainTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cDomainTypeDomainTypeCrossReference_1_0.eContents().get(1);
		
		//ParameterType:
		//    baseType=BaseType |
		//    domainType=[DomainType];
		@Override public ParserRule getRule() { return rule; }
		
		//baseType=BaseType |
		//domainType=[DomainType]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//baseType=BaseType
		public Assignment getBaseTypeAssignment_0() { return cBaseTypeAssignment_0; }
		
		//BaseType
		public RuleCall getBaseTypeBaseTypeParserRuleCall_0_0() { return cBaseTypeBaseTypeParserRuleCall_0_0; }
		
		//domainType=[DomainType]
		public Assignment getDomainTypeAssignment_1() { return cDomainTypeAssignment_1; }
		
		//[DomainType]
		public CrossReference getDomainTypeDomainTypeCrossReference_1_0() { return cDomainTypeDomainTypeCrossReference_1_0; }
		
		//ID
		public RuleCall getDomainTypeDomainTypeIDTerminalRuleCall_1_0_1() { return cDomainTypeDomainTypeIDTerminalRuleCall_1_0_1; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeRegularTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeRegularTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeRegularTypeCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWithKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesAssignmentParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cAttributesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cAttributesAssignmentParserRuleCall_3_2_1_0 = (RuleCall)cAttributesAssignment_3_2_1.eContents().get(0);
		
		//Variable:
		//    name=ID ':' type=[RegularType] ('with' attributes+=Assignment (',' attributes+=Assignment)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=[RegularType] ('with' attributes+=Assignment (',' attributes+=Assignment)*)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=[RegularType]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[RegularType]
		public CrossReference getTypeRegularTypeCrossReference_2_0() { return cTypeRegularTypeCrossReference_2_0; }
		
		//ID
		public RuleCall getTypeRegularTypeIDTerminalRuleCall_2_0_1() { return cTypeRegularTypeIDTerminalRuleCall_2_0_1; }
		
		//('with' attributes+=Assignment (',' attributes+=Assignment)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'with'
		public Keyword getWithKeyword_3_0() { return cWithKeyword_3_0; }
		
		//attributes+=Assignment
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }
		
		//Assignment
		public RuleCall getAttributesAssignmentParserRuleCall_3_1_0() { return cAttributesAssignmentParserRuleCall_3_1_0; }
		
		//(',' attributes+=Assignment)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//attributes+=Assignment
		public Assignment getAttributesAssignment_3_2_1() { return cAttributesAssignment_3_2_1; }
		
		//Assignment
		public RuleCall getAttributesAssignmentParserRuleCall_3_2_1_0() { return cAttributesAssignmentParserRuleCall_3_2_1_0; }
	}
	public class OAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.OAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOAssignExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cName2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cName2VariableDotExpressionParserRuleCall_1_0 = (RuleCall)cName2Assignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOpColonEqualsSignKeyword_2_0 = (Keyword)cOpAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		////Assignment:
		////    {AssignVariable} name=ID ':=' value=VariableDotExpression |
		////    AssignmentB;
		//// Assign should be used for ENV parameters or parameters of the contract. any variable initiate in the declaration are
		////can not be used because the initial value will be assigned to the variable each time you trigger any events.
		//OAssignment:
		//    {OAssignExpression} name2= VariableDotExpression op=":=" (value=Expression);
		@Override public ParserRule getRule() { return rule; }
		
		//{OAssignExpression} name2= VariableDotExpression op=":=" (value=Expression)
		public Group getGroup() { return cGroup; }
		
		//{OAssignExpression}
		public Action getOAssignExpressionAction_0() { return cOAssignExpressionAction_0; }
		
		//name2= VariableDotExpression
		public Assignment getName2Assignment_1() { return cName2Assignment_1; }
		
		//VariableDotExpression
		public RuleCall getName2VariableDotExpressionParserRuleCall_1_0() { return cName2VariableDotExpressionParserRuleCall_1_0; }
		
		//op=":="
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//":="
		public Keyword getOpColonEqualsSignKeyword_2_0() { return cOpColonEqualsSignKeyword_2_0; }
		
		//(value=Expression)
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
	}
	public class VariableDotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.VariableDotExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVariableRefParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cVariableDotExpressionRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTailAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cTailAttributeCrossReference_1_2_0 = (CrossReference)cTailAssignment_1_2.eContents().get(0);
		private final RuleCall cTailAttributeIDTerminalRuleCall_1_2_0_1 = (RuleCall)cTailAttributeCrossReference_1_2_0.eContents().get(1);
		
		//VariableDotExpression returns Ref:
		//    VariableRef ({VariableDotExpression.ref=current} "." tail=[Attribute])*;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableRef ({VariableDotExpression.ref=current} "." tail=[Attribute])*
		public Group getGroup() { return cGroup; }
		
		//VariableRef
		public RuleCall getVariableRefParserRuleCall_0() { return cVariableRefParserRuleCall_0; }
		
		//({VariableDotExpression.ref=current} "." tail=[Attribute])*
		public Group getGroup_1() { return cGroup_1; }
		
		//{VariableDotExpression.ref=current}
		public Action getVariableDotExpressionRefAction_1_0() { return cVariableDotExpressionRefAction_1_0; }
		
		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//tail=[Attribute]
		public Assignment getTailAssignment_1_2() { return cTailAssignment_1_2; }
		
		//[Attribute]
		public CrossReference getTailAttributeCrossReference_1_2_0() { return cTailAttributeCrossReference_1_2_0; }
		
		//ID
		public RuleCall getTailAttributeIDTerminalRuleCall_1_2_0_1() { return cTailAttributeIDTerminalRuleCall_1_2_0_1; }
	}
	public class VariableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.VariableRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		
		//VariableRef returns Ref:
		//    {VariableRef} variable=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableRef} variable=ID
		public Group getGroup() { return cGroup; }
		
		//{VariableRef}
		public Action getVariableRefAction_0() { return cVariableRefAction_0; }
		
		//variable=ID
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//ID
		public RuleCall getVariableIDTerminalRuleCall_1_0() { return cVariableIDTerminalRuleCall_1_0; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssignExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Assignment:
		//    {AssignExpression} name=ID ':=' value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//{AssignExpression} name=ID ':=' value=Expression
		public Group getGroup() { return cGroup; }
		
		//{AssignExpression}
		public Action getAssignExpressionAction_0() { return cAssignExpressionAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }
		
		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
	}
	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.Double");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Double returns ecore::EDouble:
		//    INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class DateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.Date");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Date returns ecore::EDate:
		//  'Date' '(' STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Date' '(' STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'Date'
		public Keyword getDateKeyword_0() { return cDateKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.Expression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression: Or;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or returns Expression:
		//    And ({Or.left=current} "or" right=And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} "or" right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} "or" right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//"or"
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And returns Expression:
		//    Equality ({And.left=current} "and" right=Equality)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equality ({And.left=current} "and" right=Equality)*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({And.left=current} "and" right=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//"and"
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equality returns Expression:
		//    Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Equality.left=current} op=("==" | "!=") right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }
		
		//op=("==" | "!=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//("==" | "!=")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison returns Expression:
		//    Addition ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=Addition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Addition ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=Addition)*
		public Group getGroup() { return cGroup; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }
		
		//({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=Addition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//op=(">=" | "<=" | ">" | "<")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//(">=" | "<=" | ">" | "<")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }
		
		//right=Addition
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_2_0() { return cRightAdditionParserRuleCall_1_2_0; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition returns Expression:
		//    Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} '+' | {Minus.left=current} '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication returns Expression:
		//    PrimaryExpression (({Multi.left=current} '*' | {Div.left=current} '/') right=PrimaryExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression (({Multi.left=current} '*' | {Div.left=current} '/') right=PrimaryExpression)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//(({Multi.left=current} '*' | {Div.left=current} '/') right=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Multi.left=current} '*' | {Div.left=current} '/')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Multi.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Multi.left=current}
		public Action getMultiLeftAction_1_0_0_0() { return cMultiLeftAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//{Div.left=current} '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }
		
		//right=PrimaryExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_1_0() { return cRightPrimaryExpressionParserRuleCall_1_1_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPrimaryExpressionRecursiveAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cInnerAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cInnerExpressionParserRuleCall_0_2_0 = (RuleCall)cInnerAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPrimaryExpressionFunctionCallAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFunctionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFunctionFunctionCallParserRuleCall_1_1_0 = (RuleCall)cFunctionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNegatedPrimaryExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cNotKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionPrimaryExpressionParserRuleCall_2_2_0 = (RuleCall)cExpressionAssignment_2_2.eContents().get(0);
		private final RuleCall cAtomicExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PrimaryExpression returns Expression:
		//    {PrimaryExpressionRecursive} '(' inner=Expression ')' |
		//    {PrimaryExpressionFunctionCall} function=FunctionCall |
		//    {NegatedPrimaryExpression} "not" expression=PrimaryExpression |
		//    AtomicExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimaryExpressionRecursive} '(' inner=Expression ')' |
		//{PrimaryExpressionFunctionCall} function=FunctionCall |
		//{NegatedPrimaryExpression} "not" expression=PrimaryExpression |
		//AtomicExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{PrimaryExpressionRecursive} '(' inner=Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{PrimaryExpressionRecursive}
		public Action getPrimaryExpressionRecursiveAction_0_0() { return cPrimaryExpressionRecursiveAction_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//inner=Expression
		public Assignment getInnerAssignment_0_2() { return cInnerAssignment_0_2; }
		
		//Expression
		public RuleCall getInnerExpressionParserRuleCall_0_2_0() { return cInnerExpressionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//{PrimaryExpressionFunctionCall} function=FunctionCall
		public Group getGroup_1() { return cGroup_1; }
		
		//{PrimaryExpressionFunctionCall}
		public Action getPrimaryExpressionFunctionCallAction_1_0() { return cPrimaryExpressionFunctionCallAction_1_0; }
		
		//function=FunctionCall
		public Assignment getFunctionAssignment_1_1() { return cFunctionAssignment_1_1; }
		
		//FunctionCall
		public RuleCall getFunctionFunctionCallParserRuleCall_1_1_0() { return cFunctionFunctionCallParserRuleCall_1_1_0; }
		
		//{NegatedPrimaryExpression} "not" expression=PrimaryExpression
		public Group getGroup_2() { return cGroup_2; }
		
		//{NegatedPrimaryExpression}
		public Action getNegatedPrimaryExpressionAction_2_0() { return cNegatedPrimaryExpressionAction_2_0; }
		
		//"not"
		public Keyword getNotKeyword_2_1() { return cNotKeyword_2_1; }
		
		//expression=PrimaryExpression
		public Assignment getExpressionAssignment_2_2() { return cExpressionAssignment_2_2; }
		
		//PrimaryExpression
		public RuleCall getExpressionPrimaryExpressionParserRuleCall_2_2_0() { return cExpressionPrimaryExpressionParserRuleCall_2_2_0; }
		
		//AtomicExpression
		public RuleCall getAtomicExpressionParserRuleCall_3() { return cAtomicExpressionParserRuleCall_3; }
	}
	public class AtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.AtomicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAtomicExpressionTrueAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cValueTrueKeyword_0_1_0 = (Keyword)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAtomicExpressionFalseAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cValueFalseKeyword_1_1_0 = (Keyword)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cAtomicExpressionDoubleAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueDoubleParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cAtomicExpressionIntAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cAtomicExpressionDateAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueDateParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cAtomicExpressionEnumAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cEnumerationAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cEnumerationEnumerationCrossReference_5_1_0 = (CrossReference)cEnumerationAssignment_5_1.eContents().get(0);
		private final RuleCall cEnumerationEnumerationIDTerminalRuleCall_5_1_0_1 = (RuleCall)cEnumerationEnumerationCrossReference_5_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cEnumItemAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final CrossReference cEnumItemEnumItemCrossReference_5_3_0 = (CrossReference)cEnumItemAssignment_5_3.eContents().get(0);
		private final RuleCall cEnumItemEnumItemIDTerminalRuleCall_5_3_0_1 = (RuleCall)cEnumItemEnumItemCrossReference_5_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cAtomicExpressionStringAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cValueAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cAtomicExpressionParameterAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cValueAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cValueVariableDotExpressionParserRuleCall_7_1_0 = (RuleCall)cValueAssignment_7_1.eContents().get(0);
		
		//AtomicExpression returns Expression:
		//    {AtomicExpressionTrue} value="true" |
		//    {AtomicExpressionFalse} value="false" |
		//    {AtomicExpressionDouble} value=Double |
		//    {AtomicExpressionInt} value=INT |
		//    {AtomicExpressionDate} value= Date |
		//    {AtomicExpressionEnum} enumeration=[Enumeration]"("enumItem=[EnumItem]")" |
		//    {AtomicExpressionString} value=STRING |
		//    {AtomicExpressionParameter} value=VariableDotExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{AtomicExpressionTrue} value="true" |
		//{AtomicExpressionFalse} value="false" |
		//{AtomicExpressionDouble} value=Double |
		//{AtomicExpressionInt} value=INT |
		//{AtomicExpressionDate} value= Date |
		//{AtomicExpressionEnum} enumeration=[Enumeration]"("enumItem=[EnumItem]")" |
		//{AtomicExpressionString} value=STRING |
		//{AtomicExpressionParameter} value=VariableDotExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{AtomicExpressionTrue} value="true"
		public Group getGroup_0() { return cGroup_0; }
		
		//{AtomicExpressionTrue}
		public Action getAtomicExpressionTrueAction_0_0() { return cAtomicExpressionTrueAction_0_0; }
		
		//value="true"
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//"true"
		public Keyword getValueTrueKeyword_0_1_0() { return cValueTrueKeyword_0_1_0; }
		
		//{AtomicExpressionFalse} value="false"
		public Group getGroup_1() { return cGroup_1; }
		
		//{AtomicExpressionFalse}
		public Action getAtomicExpressionFalseAction_1_0() { return cAtomicExpressionFalseAction_1_0; }
		
		//value="false"
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//"false"
		public Keyword getValueFalseKeyword_1_1_0() { return cValueFalseKeyword_1_1_0; }
		
		//{AtomicExpressionDouble} value=Double
		public Group getGroup_2() { return cGroup_2; }
		
		//{AtomicExpressionDouble}
		public Action getAtomicExpressionDoubleAction_2_0() { return cAtomicExpressionDoubleAction_2_0; }
		
		//value=Double
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//Double
		public RuleCall getValueDoubleParserRuleCall_2_1_0() { return cValueDoubleParserRuleCall_2_1_0; }
		
		//{AtomicExpressionInt} value=INT
		public Group getGroup_3() { return cGroup_3; }
		
		//{AtomicExpressionInt}
		public Action getAtomicExpressionIntAction_3_0() { return cAtomicExpressionIntAction_3_0; }
		
		//value=INT
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_3_1_0() { return cValueINTTerminalRuleCall_3_1_0; }
		
		//{AtomicExpressionDate} value= Date
		public Group getGroup_4() { return cGroup_4; }
		
		//{AtomicExpressionDate}
		public Action getAtomicExpressionDateAction_4_0() { return cAtomicExpressionDateAction_4_0; }
		
		//value= Date
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//Date
		public RuleCall getValueDateParserRuleCall_4_1_0() { return cValueDateParserRuleCall_4_1_0; }
		
		//{AtomicExpressionEnum} enumeration=[Enumeration]"("enumItem=[EnumItem]")"
		public Group getGroup_5() { return cGroup_5; }
		
		//{AtomicExpressionEnum}
		public Action getAtomicExpressionEnumAction_5_0() { return cAtomicExpressionEnumAction_5_0; }
		
		//enumeration=[Enumeration]
		public Assignment getEnumerationAssignment_5_1() { return cEnumerationAssignment_5_1; }
		
		//[Enumeration]
		public CrossReference getEnumerationEnumerationCrossReference_5_1_0() { return cEnumerationEnumerationCrossReference_5_1_0; }
		
		//ID
		public RuleCall getEnumerationEnumerationIDTerminalRuleCall_5_1_0_1() { return cEnumerationEnumerationIDTerminalRuleCall_5_1_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }
		
		//enumItem=[EnumItem]
		public Assignment getEnumItemAssignment_5_3() { return cEnumItemAssignment_5_3; }
		
		//[EnumItem]
		public CrossReference getEnumItemEnumItemCrossReference_5_3_0() { return cEnumItemEnumItemCrossReference_5_3_0; }
		
		//ID
		public RuleCall getEnumItemEnumItemIDTerminalRuleCall_5_3_0_1() { return cEnumItemEnumItemIDTerminalRuleCall_5_3_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
		
		//{AtomicExpressionString} value=STRING
		public Group getGroup_6() { return cGroup_6; }
		
		//{AtomicExpressionString}
		public Action getAtomicExpressionStringAction_6_0() { return cAtomicExpressionStringAction_6_0; }
		
		//value=STRING
		public Assignment getValueAssignment_6_1() { return cValueAssignment_6_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_6_1_0() { return cValueSTRINGTerminalRuleCall_6_1_0; }
		
		//{AtomicExpressionParameter} value=VariableDotExpression
		public Group getGroup_7() { return cGroup_7; }
		
		//{AtomicExpressionParameter}
		public Action getAtomicExpressionParameterAction_7_0() { return cAtomicExpressionParameterAction_7_0; }
		
		//value=VariableDotExpression
		public Assignment getValueAssignment_7_1() { return cValueAssignment_7_1; }
		
		//VariableDotExpression
		public RuleCall getValueVariableDotExpressionParserRuleCall_7_1_0() { return cValueVariableDotExpressionParserRuleCall_7_1_0; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.FunctionCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMathFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDateFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FunctionCall:
		//    MathFunction | StringFunction | DateFunction
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MathFunction | StringFunction | DateFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MathFunction
		public RuleCall getMathFunctionParserRuleCall_0() { return cMathFunctionParserRuleCall_0; }
		
		//StringFunction
		public RuleCall getStringFunctionParserRuleCall_1() { return cStringFunctionParserRuleCall_1; }
		
		//DateFunction
		public RuleCall getDateFunctionParserRuleCall_2() { return cDateFunctionParserRuleCall_2; }
	}
	public class MathFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.MathFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTwoArgMathFunctionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cNameMathPowKeyword_0_1_0 = (Keyword)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cArg1Assignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cArg1ExpressionParserRuleCall_0_3_0 = (RuleCall)cArg1Assignment_0_3.eContents().get(0);
		private final Keyword cCommaKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cArg2Assignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cArg2ExpressionParserRuleCall_0_5_0 = (RuleCall)cArg2Assignment_0_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOneArgMathFunctionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cNameAlternatives_1_1_0 = (Alternatives)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cNameMathAbsKeyword_1_1_0_0 = (Keyword)cNameAlternatives_1_1_0.eContents().get(0);
		private final Keyword cNameMathFloorKeyword_1_1_0_1 = (Keyword)cNameAlternatives_1_1_0.eContents().get(1);
		private final Keyword cNameMathCbrtKeyword_1_1_0_2 = (Keyword)cNameAlternatives_1_1_0.eContents().get(2);
		private final Keyword cNameMathCeilKeyword_1_1_0_3 = (Keyword)cNameAlternatives_1_1_0.eContents().get(3);
		private final Keyword cNameMathExpKeyword_1_1_0_4 = (Keyword)cNameAlternatives_1_1_0.eContents().get(4);
		private final Keyword cNameMathSignKeyword_1_1_0_5 = (Keyword)cNameAlternatives_1_1_0.eContents().get(5);
		private final Keyword cNameMathSqrtKeyword_1_1_0_6 = (Keyword)cNameAlternatives_1_1_0.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cArg1Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cArg1ExpressionParserRuleCall_1_3_0 = (RuleCall)cArg1Assignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//MathFunction returns FunctionCall:
		//  {TwoArgMathFunction} name=('Math.pow') '(' arg1=Expression ',' arg2=Expression ')' |
		//  {OneArgMathFunction} name=('Math.abs'|'Math.floor'|'Math.cbrt'
		//    |'Math.ceil'|'Math.exp'|'Math.sign'|'Math.sqrt'
		//  ) '(' arg1=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{TwoArgMathFunction} name=('Math.pow') '(' arg1=Expression ',' arg2=Expression ')' |
		//{OneArgMathFunction} name=('Math.abs'|'Math.floor'|'Math.cbrt'
		//  |'Math.ceil'|'Math.exp'|'Math.sign'|'Math.sqrt'
		//) '(' arg1=Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{TwoArgMathFunction} name=('Math.pow') '(' arg1=Expression ',' arg2=Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{TwoArgMathFunction}
		public Action getTwoArgMathFunctionAction_0_0() { return cTwoArgMathFunctionAction_0_0; }
		
		//name=('Math.pow')
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//('Math.pow')
		public Keyword getNameMathPowKeyword_0_1_0() { return cNameMathPowKeyword_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//arg1=Expression
		public Assignment getArg1Assignment_0_3() { return cArg1Assignment_0_3; }
		
		//Expression
		public RuleCall getArg1ExpressionParserRuleCall_0_3_0() { return cArg1ExpressionParserRuleCall_0_3_0; }
		
		//','
		public Keyword getCommaKeyword_0_4() { return cCommaKeyword_0_4; }
		
		//arg2=Expression
		public Assignment getArg2Assignment_0_5() { return cArg2Assignment_0_5; }
		
		//Expression
		public RuleCall getArg2ExpressionParserRuleCall_0_5_0() { return cArg2ExpressionParserRuleCall_0_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_6() { return cRightParenthesisKeyword_0_6; }
		
		//{OneArgMathFunction} name=('Math.abs'|'Math.floor'|'Math.cbrt'
		//  |'Math.ceil'|'Math.exp'|'Math.sign'|'Math.sqrt'
		//) '(' arg1=Expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{OneArgMathFunction}
		public Action getOneArgMathFunctionAction_1_0() { return cOneArgMathFunctionAction_1_0; }
		
		//name=('Math.abs'|'Math.floor'|'Math.cbrt'
		//   |'Math.ceil'|'Math.exp'|'Math.sign'|'Math.sqrt'
		// )
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//('Math.abs'|'Math.floor'|'Math.cbrt'
		//    |'Math.ceil'|'Math.exp'|'Math.sign'|'Math.sqrt'
		//  )
		public Alternatives getNameAlternatives_1_1_0() { return cNameAlternatives_1_1_0; }
		
		//'Math.abs'
		public Keyword getNameMathAbsKeyword_1_1_0_0() { return cNameMathAbsKeyword_1_1_0_0; }
		
		//'Math.floor'
		public Keyword getNameMathFloorKeyword_1_1_0_1() { return cNameMathFloorKeyword_1_1_0_1; }
		
		//'Math.cbrt'
		public Keyword getNameMathCbrtKeyword_1_1_0_2() { return cNameMathCbrtKeyword_1_1_0_2; }
		
		//'Math.ceil'
		public Keyword getNameMathCeilKeyword_1_1_0_3() { return cNameMathCeilKeyword_1_1_0_3; }
		
		//'Math.exp'
		public Keyword getNameMathExpKeyword_1_1_0_4() { return cNameMathExpKeyword_1_1_0_4; }
		
		//'Math.sign'
		public Keyword getNameMathSignKeyword_1_1_0_5() { return cNameMathSignKeyword_1_1_0_5; }
		
		//'Math.sqrt'
		public Keyword getNameMathSqrtKeyword_1_1_0_6() { return cNameMathSqrtKeyword_1_1_0_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//arg1=Expression
		public Assignment getArg1Assignment_1_3() { return cArg1Assignment_1_3; }
		
		//Expression
		public RuleCall getArg1ExpressionParserRuleCall_1_3_0() { return cArg1ExpressionParserRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}
	public class StringFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.StringFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cThreeArgStringFunctionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cNameAlternatives_0_1_0 = (Alternatives)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cNameStringSubstringKeyword_0_1_0_0 = (Keyword)cNameAlternatives_0_1_0.eContents().get(0);
		private final Keyword cNameStringReplaceAllKeyword_0_1_0_1 = (Keyword)cNameAlternatives_0_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cArg1Assignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cArg1ExpressionParserRuleCall_0_3_0 = (RuleCall)cArg1Assignment_0_3.eContents().get(0);
		private final Keyword cCommaKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cArg2Assignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cArg2ExpressionParserRuleCall_0_5_0 = (RuleCall)cArg2Assignment_0_5.eContents().get(0);
		private final Keyword cCommaKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Assignment cArg3Assignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cArg3ExpressionParserRuleCall_0_7_0 = (RuleCall)cArg3Assignment_0_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_8 = (Keyword)cGroup_0.eContents().get(8);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTwoArgStringFunctionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cNameStringConcatKeyword_1_1_0 = (Keyword)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cArg1Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cArg1ExpressionParserRuleCall_1_3_0 = (RuleCall)cArg1Assignment_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cArg2Assignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cArg2ExpressionParserRuleCall_1_5_0 = (RuleCall)cArg2Assignment_1_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cOneArgStringFunctionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cNameAlternatives_2_1_0 = (Alternatives)cNameAssignment_2_1.eContents().get(0);
		private final Keyword cNameStringToLowerCaseKeyword_2_1_0_0 = (Keyword)cNameAlternatives_2_1_0.eContents().get(0);
		private final Keyword cNameStringToUpperCaseKeyword_2_1_0_1 = (Keyword)cNameAlternatives_2_1_0.eContents().get(1);
		private final Keyword cNameStringTrimEndKeyword_2_1_0_2 = (Keyword)cNameAlternatives_2_1_0.eContents().get(2);
		private final Keyword cNameStringTrimStartKeyword_2_1_0_3 = (Keyword)cNameAlternatives_2_1_0.eContents().get(3);
		private final Keyword cNameStringTrimKeyword_2_1_0_4 = (Keyword)cNameAlternatives_2_1_0.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cArg1Assignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cArg1ExpressionParserRuleCall_2_3_0 = (RuleCall)cArg1Assignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//StringFunction returns FunctionCall:
		//  {ThreeArgStringFunction} name=('String.substring'|'String.replaceAll') '(' arg1=Expression ',' arg2=Expression ',' arg3=Expression ')' |
		//  {TwoArgStringFunction} name=('String.concat') '(' arg1=Expression ',' arg2=Expression ')' |
		//  {OneArgStringFunction} name=('String.toLowerCase'|'String.toUpperCase'|'String.trimEnd'|'String.trimStart'|'String.trim') '(' arg1=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ThreeArgStringFunction} name=('String.substring'|'String.replaceAll') '(' arg1=Expression ',' arg2=Expression ',' arg3=Expression ')' |
		//{TwoArgStringFunction} name=('String.concat') '(' arg1=Expression ',' arg2=Expression ')' |
		//{OneArgStringFunction} name=('String.toLowerCase'|'String.toUpperCase'|'String.trimEnd'|'String.trimStart'|'String.trim') '(' arg1=Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ThreeArgStringFunction} name=('String.substring'|'String.replaceAll') '(' arg1=Expression ',' arg2=Expression ',' arg3=Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{ThreeArgStringFunction}
		public Action getThreeArgStringFunctionAction_0_0() { return cThreeArgStringFunctionAction_0_0; }
		
		//name=('String.substring'|'String.replaceAll')
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//('String.substring'|'String.replaceAll')
		public Alternatives getNameAlternatives_0_1_0() { return cNameAlternatives_0_1_0; }
		
		//'String.substring'
		public Keyword getNameStringSubstringKeyword_0_1_0_0() { return cNameStringSubstringKeyword_0_1_0_0; }
		
		//'String.replaceAll'
		public Keyword getNameStringReplaceAllKeyword_0_1_0_1() { return cNameStringReplaceAllKeyword_0_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//arg1=Expression
		public Assignment getArg1Assignment_0_3() { return cArg1Assignment_0_3; }
		
		//Expression
		public RuleCall getArg1ExpressionParserRuleCall_0_3_0() { return cArg1ExpressionParserRuleCall_0_3_0; }
		
		//','
		public Keyword getCommaKeyword_0_4() { return cCommaKeyword_0_4; }
		
		//arg2=Expression
		public Assignment getArg2Assignment_0_5() { return cArg2Assignment_0_5; }
		
		//Expression
		public RuleCall getArg2ExpressionParserRuleCall_0_5_0() { return cArg2ExpressionParserRuleCall_0_5_0; }
		
		//','
		public Keyword getCommaKeyword_0_6() { return cCommaKeyword_0_6; }
		
		//arg3=Expression
		public Assignment getArg3Assignment_0_7() { return cArg3Assignment_0_7; }
		
		//Expression
		public RuleCall getArg3ExpressionParserRuleCall_0_7_0() { return cArg3ExpressionParserRuleCall_0_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_8() { return cRightParenthesisKeyword_0_8; }
		
		//{TwoArgStringFunction} name=('String.concat') '(' arg1=Expression ',' arg2=Expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{TwoArgStringFunction}
		public Action getTwoArgStringFunctionAction_1_0() { return cTwoArgStringFunctionAction_1_0; }
		
		//name=('String.concat')
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//('String.concat')
		public Keyword getNameStringConcatKeyword_1_1_0() { return cNameStringConcatKeyword_1_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//arg1=Expression
		public Assignment getArg1Assignment_1_3() { return cArg1Assignment_1_3; }
		
		//Expression
		public RuleCall getArg1ExpressionParserRuleCall_1_3_0() { return cArg1ExpressionParserRuleCall_1_3_0; }
		
		//','
		public Keyword getCommaKeyword_1_4() { return cCommaKeyword_1_4; }
		
		//arg2=Expression
		public Assignment getArg2Assignment_1_5() { return cArg2Assignment_1_5; }
		
		//Expression
		public RuleCall getArg2ExpressionParserRuleCall_1_5_0() { return cArg2ExpressionParserRuleCall_1_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_6() { return cRightParenthesisKeyword_1_6; }
		
		//{OneArgStringFunction} name=('String.toLowerCase'|'String.toUpperCase'|'String.trimEnd'|'String.trimStart'|'String.trim') '(' arg1=Expression ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{OneArgStringFunction}
		public Action getOneArgStringFunctionAction_2_0() { return cOneArgStringFunctionAction_2_0; }
		
		//name=('String.toLowerCase'|'String.toUpperCase'|'String.trimEnd'|'String.trimStart'|'String.trim')
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//('String.toLowerCase'|'String.toUpperCase'|'String.trimEnd'|'String.trimStart'|'String.trim')
		public Alternatives getNameAlternatives_2_1_0() { return cNameAlternatives_2_1_0; }
		
		//'String.toLowerCase'
		public Keyword getNameStringToLowerCaseKeyword_2_1_0_0() { return cNameStringToLowerCaseKeyword_2_1_0_0; }
		
		//'String.toUpperCase'
		public Keyword getNameStringToUpperCaseKeyword_2_1_0_1() { return cNameStringToUpperCaseKeyword_2_1_0_1; }
		
		//'String.trimEnd'
		public Keyword getNameStringTrimEndKeyword_2_1_0_2() { return cNameStringTrimEndKeyword_2_1_0_2; }
		
		//'String.trimStart'
		public Keyword getNameStringTrimStartKeyword_2_1_0_3() { return cNameStringTrimStartKeyword_2_1_0_3; }
		
		//'String.trim'
		public Keyword getNameStringTrimKeyword_2_1_0_4() { return cNameStringTrimKeyword_2_1_0_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//arg1=Expression
		public Assignment getArg1Assignment_2_3() { return cArg1Assignment_2_3; }
		
		//Expression
		public RuleCall getArg1ExpressionParserRuleCall_2_3_0() { return cArg1ExpressionParserRuleCall_2_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
	}
	public class DateFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.DateFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThreeArgDateFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameDateAddKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArg1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArg1ExpressionParserRuleCall_3_0 = (RuleCall)cArg1Assignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueExpressionParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTimeUnitAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTimeUnitTimeUnitParserRuleCall_7_0 = (RuleCall)cTimeUnitAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//DateFunction returns FunctionCall:
		//    {ThreeArgDateFunction} name='Date.add' '(' arg1=Expression ',' value=Expression ',' timeUnit=TimeUnit  ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ThreeArgDateFunction} name='Date.add' '(' arg1=Expression ',' value=Expression ',' timeUnit=TimeUnit  ')'
		public Group getGroup() { return cGroup; }
		
		//{ThreeArgDateFunction}
		public Action getThreeArgDateFunctionAction_0() { return cThreeArgDateFunctionAction_0; }
		
		//name='Date.add'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'Date.add'
		public Keyword getNameDateAddKeyword_1_0() { return cNameDateAddKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//arg1=Expression
		public Assignment getArg1Assignment_3() { return cArg1Assignment_3; }
		
		//Expression
		public RuleCall getArg1ExpressionParserRuleCall_3_0() { return cArg1ExpressionParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//value=Expression
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_5_0() { return cValueExpressionParserRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//timeUnit=TimeUnit
		public Assignment getTimeUnitAssignment_7() { return cTimeUnitAssignment_7; }
		
		//TimeUnit
		public RuleCall getTimeUnitTimeUnitParserRuleCall_7_0() { return cTimeUnitTimeUnitParserRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class ObligationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.Obligation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTriggerAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTriggerPropositionParserRuleCall_2_0_0 = (RuleCall)cTriggerAssignment_2_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cOKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cObligationKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDebtorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDebtorVariableDotExpressionParserRuleCall_5_0 = (RuleCall)cDebtorAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCreditorAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCreditorVariableDotExpressionParserRuleCall_7_0 = (RuleCall)cCreditorAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAntecedentAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAntecedentPropositionParserRuleCall_9_0 = (RuleCall)cAntecedentAssignment_9.eContents().get(0);
		private final Keyword cCommaKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cConsequentAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cConsequentPropositionParserRuleCall_11_0 = (RuleCall)cConsequentAssignment_11.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Obligation:
		//    name=ID ':' (trigger=Proposition '->')? ('O' | 'Obligation') '(' debtor=VariableDotExpression ',' creditor=VariableDotExpression ',' antecedent=Proposition ',' consequent=Proposition ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' (trigger=Proposition '->')? ('O' | 'Obligation') '(' debtor=VariableDotExpression ',' creditor=VariableDotExpression ',' antecedent=Proposition ',' consequent=Proposition ')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(trigger=Proposition '->')?
		public Group getGroup_2() { return cGroup_2; }
		
		//trigger=Proposition
		public Assignment getTriggerAssignment_2_0() { return cTriggerAssignment_2_0; }
		
		//Proposition
		public RuleCall getTriggerPropositionParserRuleCall_2_0_0() { return cTriggerPropositionParserRuleCall_2_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_1() { return cHyphenMinusGreaterThanSignKeyword_2_1; }
		
		//('O' | 'Obligation')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'O'
		public Keyword getOKeyword_3_0() { return cOKeyword_3_0; }
		
		//'Obligation'
		public Keyword getObligationKeyword_3_1() { return cObligationKeyword_3_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//debtor=VariableDotExpression
		public Assignment getDebtorAssignment_5() { return cDebtorAssignment_5; }
		
		//VariableDotExpression
		public RuleCall getDebtorVariableDotExpressionParserRuleCall_5_0() { return cDebtorVariableDotExpressionParserRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//creditor=VariableDotExpression
		public Assignment getCreditorAssignment_7() { return cCreditorAssignment_7; }
		
		//VariableDotExpression
		public RuleCall getCreditorVariableDotExpressionParserRuleCall_7_0() { return cCreditorVariableDotExpressionParserRuleCall_7_0; }
		
		//','
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//antecedent=Proposition
		public Assignment getAntecedentAssignment_9() { return cAntecedentAssignment_9; }
		
		//Proposition
		public RuleCall getAntecedentPropositionParserRuleCall_9_0() { return cAntecedentPropositionParserRuleCall_9_0; }
		
		//','
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }
		
		//consequent=Proposition
		public Assignment getConsequentAssignment_11() { return cConsequentAssignment_11; }
		
		//Proposition
		public RuleCall getConsequentPropositionParserRuleCall_11_0() { return cConsequentPropositionParserRuleCall_11_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_12() { return cRightParenthesisKeyword_12; }
	}
	public class PowerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.Power");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cTriggerAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cTriggerPropositionParserRuleCall_2_0_0 = (RuleCall)cTriggerAssignment_2_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cPKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cPowerKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCreditorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCreditorVariableDotExpressionParserRuleCall_5_0 = (RuleCall)cCreditorAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDebtorAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDebtorVariableDotExpressionParserRuleCall_7_0 = (RuleCall)cDebtorAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAntecedentAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAntecedentPropositionParserRuleCall_9_0 = (RuleCall)cAntecedentAssignment_9.eContents().get(0);
		private final Keyword cCommaKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cConsequentAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cConsequentPowerFunctionParserRuleCall_11_0 = (RuleCall)cConsequentAssignment_11.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Power:
		//    name=ID ':' (trigger=Proposition '->')? ('P' | 'Power') '(' creditor=VariableDotExpression ',' debtor=VariableDotExpression ',' antecedent=Proposition ',' consequent=PowerFunction ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' (trigger=Proposition '->')? ('P' | 'Power') '(' creditor=VariableDotExpression ',' debtor=VariableDotExpression ',' antecedent=Proposition ',' consequent=PowerFunction ')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(trigger=Proposition '->')?
		public Group getGroup_2() { return cGroup_2; }
		
		//trigger=Proposition
		public Assignment getTriggerAssignment_2_0() { return cTriggerAssignment_2_0; }
		
		//Proposition
		public RuleCall getTriggerPropositionParserRuleCall_2_0_0() { return cTriggerPropositionParserRuleCall_2_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_1() { return cHyphenMinusGreaterThanSignKeyword_2_1; }
		
		//('P' | 'Power')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'P'
		public Keyword getPKeyword_3_0() { return cPKeyword_3_0; }
		
		//'Power'
		public Keyword getPowerKeyword_3_1() { return cPowerKeyword_3_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//creditor=VariableDotExpression
		public Assignment getCreditorAssignment_5() { return cCreditorAssignment_5; }
		
		//VariableDotExpression
		public RuleCall getCreditorVariableDotExpressionParserRuleCall_5_0() { return cCreditorVariableDotExpressionParserRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//debtor=VariableDotExpression
		public Assignment getDebtorAssignment_7() { return cDebtorAssignment_7; }
		
		//VariableDotExpression
		public RuleCall getDebtorVariableDotExpressionParserRuleCall_7_0() { return cDebtorVariableDotExpressionParserRuleCall_7_0; }
		
		//','
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//antecedent=Proposition
		public Assignment getAntecedentAssignment_9() { return cAntecedentAssignment_9; }
		
		//Proposition
		public RuleCall getAntecedentPropositionParserRuleCall_9_0() { return cAntecedentPropositionParserRuleCall_9_0; }
		
		//','
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }
		
		//consequent=PowerFunction
		public Assignment getConsequentAssignment_11() { return cConsequentAssignment_11; }
		
		//PowerFunction
		public RuleCall getConsequentPowerFunctionParserRuleCall_11_0() { return cConsequentPowerFunctionParserRuleCall_11_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_12() { return cRightParenthesisKeyword_12; }
	}
	public class PowerFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.PowerFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPFObligationSuspendedAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cActionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cActionSuspendedKeyword_0_1_0 = (Keyword)cActionAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cObligationsKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cNormAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final CrossReference cNormObligationCrossReference_0_4_0 = (CrossReference)cNormAssignment_0_4.eContents().get(0);
		private final RuleCall cNormObligationIDTerminalRuleCall_0_4_0_1 = (RuleCall)cNormObligationCrossReference_0_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPFObligationResumedAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cActionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cActionResumedKeyword_1_1_0 = (Keyword)cActionAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cObligationsKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cNormAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final CrossReference cNormObligationCrossReference_1_4_0 = (CrossReference)cNormAssignment_1_4.eContents().get(0);
		private final RuleCall cNormObligationIDTerminalRuleCall_1_4_0_1 = (RuleCall)cNormObligationCrossReference_1_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPFObligationDischargedAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cActionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cActionDischargedKeyword_2_1_0 = (Keyword)cActionAssignment_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cObligationsKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cNormAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final CrossReference cNormObligationCrossReference_2_4_0 = (CrossReference)cNormAssignment_2_4.eContents().get(0);
		private final RuleCall cNormObligationIDTerminalRuleCall_2_4_0_1 = (RuleCall)cNormObligationCrossReference_2_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cPFObligationTerminatedAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cActionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cActionTerminatedKeyword_3_1_0 = (Keyword)cActionAssignment_3_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cObligationsKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cNormAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final CrossReference cNormObligationCrossReference_3_4_0 = (CrossReference)cNormAssignment_3_4.eContents().get(0);
		private final RuleCall cNormObligationIDTerminalRuleCall_3_4_0_1 = (RuleCall)cNormObligationCrossReference_3_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cPFObligationTriggeredAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cActionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cActionTriggeredKeyword_4_1_0 = (Keyword)cActionAssignment_4_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cObligationsKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cNormAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final CrossReference cNormObligationCrossReference_4_4_0 = (CrossReference)cNormAssignment_4_4.eContents().get(0);
		private final RuleCall cNormObligationIDTerminalRuleCall_4_4_0_1 = (RuleCall)cNormObligationCrossReference_4_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cPFContractSuspendedAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cActionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Keyword cActionSuspendedKeyword_5_1_0 = (Keyword)cActionAssignment_5_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cNormAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final Keyword cNormSelfKeyword_5_3_0 = (Keyword)cNormAssignment_5_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cPFContractResumedAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cActionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Keyword cActionResumedKeyword_6_1_0 = (Keyword)cActionAssignment_6_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cNormAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final Keyword cNormSelfKeyword_6_3_0 = (Keyword)cNormAssignment_6_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cPFContractTerminatedAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cActionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final Keyword cActionTerminatedKeyword_7_1_0 = (Keyword)cActionAssignment_7_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cNormAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final Keyword cNormSelfKeyword_7_3_0 = (Keyword)cNormAssignment_7_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		
		//PowerFunction returns PowerFunction:
		//    {PFObligationSuspended} action = 'Suspended' '(' 'obligations.' norm = [Obligation] ')' |
		//    {PFObligationResumed} action = 'Resumed' '(' 'obligations.' norm = [Obligation] ')' |
		//    {PFObligationDischarged} action = 'Discharged' '(' 'obligations.' norm = [Obligation] ')' |
		//    {PFObligationTerminated} action = 'Terminated' '(' 'obligations.' norm = [Obligation] ')' |
		//    {PFObligationTriggered} action = 'Triggered' '(' 'obligations.' norm = [Obligation] ')' |
		//    //{PFPowerSuspended} action = 'Suspended_' '(' norm = [Power] ')' |
		//    //{PFPowerResumed} action = 'Resumed_' '(' norm = [Power] ')' |
		//    //{PFPowerTerminated} action = 'Terminated_' '(' norm = [Power] ')' |
		//    {PFContractSuspended} action = 'Suspended' '(' norm = 'self' ')' |
		//    {PFContractResumed} action = 'Resumed' '(' norm = 'self' ')' |
		//    {PFContractTerminated} action = 'Terminated' '(' norm = 'self' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{PFObligationSuspended} action = 'Suspended' '(' 'obligations.' norm = [Obligation] ')' |
		//{PFObligationResumed} action = 'Resumed' '(' 'obligations.' norm = [Obligation] ')' |
		//{PFObligationDischarged} action = 'Discharged' '(' 'obligations.' norm = [Obligation] ')' |
		//{PFObligationTerminated} action = 'Terminated' '(' 'obligations.' norm = [Obligation] ')' |
		//{PFObligationTriggered} action = 'Triggered' '(' 'obligations.' norm = [Obligation] ')' |
		////{PFPowerSuspended} action = 'Suspended_' '(' norm = [Power] ')' |
		////{PFPowerResumed} action = 'Resumed_' '(' norm = [Power] ')' |
		////{PFPowerTerminated} action = 'Terminated_' '(' norm = [Power] ')' |
		//{PFContractSuspended} action = 'Suspended' '(' norm = 'self' ')' |
		//{PFContractResumed} action = 'Resumed' '(' norm = 'self' ')' |
		//{PFContractTerminated} action = 'Terminated' '(' norm = 'self' ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{PFObligationSuspended} action = 'Suspended' '(' 'obligations.' norm = [Obligation] ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{PFObligationSuspended}
		public Action getPFObligationSuspendedAction_0_0() { return cPFObligationSuspendedAction_0_0; }
		
		//action = 'Suspended'
		public Assignment getActionAssignment_0_1() { return cActionAssignment_0_1; }
		
		//'Suspended'
		public Keyword getActionSuspendedKeyword_0_1_0() { return cActionSuspendedKeyword_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//'obligations.'
		public Keyword getObligationsKeyword_0_3() { return cObligationsKeyword_0_3; }
		
		//norm = [Obligation]
		public Assignment getNormAssignment_0_4() { return cNormAssignment_0_4; }
		
		//[Obligation]
		public CrossReference getNormObligationCrossReference_0_4_0() { return cNormObligationCrossReference_0_4_0; }
		
		//ID
		public RuleCall getNormObligationIDTerminalRuleCall_0_4_0_1() { return cNormObligationIDTerminalRuleCall_0_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }
		
		//{PFObligationResumed} action = 'Resumed' '(' 'obligations.' norm = [Obligation] ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{PFObligationResumed}
		public Action getPFObligationResumedAction_1_0() { return cPFObligationResumedAction_1_0; }
		
		//action = 'Resumed'
		public Assignment getActionAssignment_1_1() { return cActionAssignment_1_1; }
		
		//'Resumed'
		public Keyword getActionResumedKeyword_1_1_0() { return cActionResumedKeyword_1_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//'obligations.'
		public Keyword getObligationsKeyword_1_3() { return cObligationsKeyword_1_3; }
		
		//norm = [Obligation]
		public Assignment getNormAssignment_1_4() { return cNormAssignment_1_4; }
		
		//[Obligation]
		public CrossReference getNormObligationCrossReference_1_4_0() { return cNormObligationCrossReference_1_4_0; }
		
		//ID
		public RuleCall getNormObligationIDTerminalRuleCall_1_4_0_1() { return cNormObligationIDTerminalRuleCall_1_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
		
		//{PFObligationDischarged} action = 'Discharged' '(' 'obligations.' norm = [Obligation] ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{PFObligationDischarged}
		public Action getPFObligationDischargedAction_2_0() { return cPFObligationDischargedAction_2_0; }
		
		//action = 'Discharged'
		public Assignment getActionAssignment_2_1() { return cActionAssignment_2_1; }
		
		//'Discharged'
		public Keyword getActionDischargedKeyword_2_1_0() { return cActionDischargedKeyword_2_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//'obligations.'
		public Keyword getObligationsKeyword_2_3() { return cObligationsKeyword_2_3; }
		
		//norm = [Obligation]
		public Assignment getNormAssignment_2_4() { return cNormAssignment_2_4; }
		
		//[Obligation]
		public CrossReference getNormObligationCrossReference_2_4_0() { return cNormObligationCrossReference_2_4_0; }
		
		//ID
		public RuleCall getNormObligationIDTerminalRuleCall_2_4_0_1() { return cNormObligationIDTerminalRuleCall_2_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }
		
		//{PFObligationTerminated} action = 'Terminated' '(' 'obligations.' norm = [Obligation] ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//{PFObligationTerminated}
		public Action getPFObligationTerminatedAction_3_0() { return cPFObligationTerminatedAction_3_0; }
		
		//action = 'Terminated'
		public Assignment getActionAssignment_3_1() { return cActionAssignment_3_1; }
		
		//'Terminated'
		public Keyword getActionTerminatedKeyword_3_1_0() { return cActionTerminatedKeyword_3_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }
		
		//'obligations.'
		public Keyword getObligationsKeyword_3_3() { return cObligationsKeyword_3_3; }
		
		//norm = [Obligation]
		public Assignment getNormAssignment_3_4() { return cNormAssignment_3_4; }
		
		//[Obligation]
		public CrossReference getNormObligationCrossReference_3_4_0() { return cNormObligationCrossReference_3_4_0; }
		
		//ID
		public RuleCall getNormObligationIDTerminalRuleCall_3_4_0_1() { return cNormObligationIDTerminalRuleCall_3_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }
		
		//{PFObligationTriggered} action = 'Triggered' '(' 'obligations.' norm = [Obligation] ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//{PFObligationTriggered}
		public Action getPFObligationTriggeredAction_4_0() { return cPFObligationTriggeredAction_4_0; }
		
		//action = 'Triggered'
		public Assignment getActionAssignment_4_1() { return cActionAssignment_4_1; }
		
		//'Triggered'
		public Keyword getActionTriggeredKeyword_4_1_0() { return cActionTriggeredKeyword_4_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }
		
		//'obligations.'
		public Keyword getObligationsKeyword_4_3() { return cObligationsKeyword_4_3; }
		
		//norm = [Obligation]
		public Assignment getNormAssignment_4_4() { return cNormAssignment_4_4; }
		
		//[Obligation]
		public CrossReference getNormObligationCrossReference_4_4_0() { return cNormObligationCrossReference_4_4_0; }
		
		//ID
		public RuleCall getNormObligationIDTerminalRuleCall_4_4_0_1() { return cNormObligationIDTerminalRuleCall_4_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_5() { return cRightParenthesisKeyword_4_5; }
		
		////{PFPowerSuspended} action = 'Suspended_' '(' norm = [Power] ')' |
		////{PFPowerResumed} action = 'Resumed_' '(' norm = [Power] ')' |
		////{PFPowerTerminated} action = 'Terminated_' '(' norm = [Power] ')' |
		//{PFContractSuspended} action = 'Suspended' '(' norm = 'self' ')'
		public Group getGroup_5() { return cGroup_5; }
		
		////{PFPowerSuspended} action = 'Suspended_' '(' norm = [Power] ')' |
		////{PFPowerResumed} action = 'Resumed_' '(' norm = [Power] ')' |
		////{PFPowerTerminated} action = 'Terminated_' '(' norm = [Power] ')' |
		//{PFContractSuspended}
		public Action getPFContractSuspendedAction_5_0() { return cPFContractSuspendedAction_5_0; }
		
		//action = 'Suspended'
		public Assignment getActionAssignment_5_1() { return cActionAssignment_5_1; }
		
		//'Suspended'
		public Keyword getActionSuspendedKeyword_5_1_0() { return cActionSuspendedKeyword_5_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }
		
		//norm = 'self'
		public Assignment getNormAssignment_5_3() { return cNormAssignment_5_3; }
		
		//'self'
		public Keyword getNormSelfKeyword_5_3_0() { return cNormSelfKeyword_5_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
		
		//{PFContractResumed} action = 'Resumed' '(' norm = 'self' ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//{PFContractResumed}
		public Action getPFContractResumedAction_6_0() { return cPFContractResumedAction_6_0; }
		
		//action = 'Resumed'
		public Assignment getActionAssignment_6_1() { return cActionAssignment_6_1; }
		
		//'Resumed'
		public Keyword getActionResumedKeyword_6_1_0() { return cActionResumedKeyword_6_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_2() { return cLeftParenthesisKeyword_6_2; }
		
		//norm = 'self'
		public Assignment getNormAssignment_6_3() { return cNormAssignment_6_3; }
		
		//'self'
		public Keyword getNormSelfKeyword_6_3_0() { return cNormSelfKeyword_6_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_4() { return cRightParenthesisKeyword_6_4; }
		
		//{PFContractTerminated} action = 'Terminated' '(' norm = 'self' ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//{PFContractTerminated}
		public Action getPFContractTerminatedAction_7_0() { return cPFContractTerminatedAction_7_0; }
		
		//action = 'Terminated'
		public Assignment getActionAssignment_7_1() { return cActionAssignment_7_1; }
		
		//'Terminated'
		public Keyword getActionTerminatedKeyword_7_1_0() { return cActionTerminatedKeyword_7_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_2() { return cLeftParenthesisKeyword_7_2; }
		
		//norm = 'self'
		public Assignment getNormAssignment_7_3() { return cNormAssignment_7_3; }
		
		//'self'
		public Keyword getNormSelfKeyword_7_3_0() { return cNormSelfKeyword_7_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }
	}
	public class PropositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.Proposition");
		private final RuleCall cPOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Proposition: POr;
		@Override public ParserRule getRule() { return rule; }
		
		//POr
		public RuleCall getPOrParserRuleCall() { return cPOrParserRuleCall; }
	}
	public class POrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.POr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//POr returns Proposition:
		//    PAnd ({POr.left=current} "or" right=PAnd)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PAnd ({POr.left=current} "or" right=PAnd)*
		public Group getGroup() { return cGroup; }
		
		//PAnd
		public RuleCall getPAndParserRuleCall_0() { return cPAndParserRuleCall_0; }
		
		//({POr.left=current} "or" right=PAnd)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{POr.left=current}
		public Action getPOrLeftAction_1_0() { return cPOrLeftAction_1_0; }
		
		//"or"
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//right=PAnd
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PAnd
		public RuleCall getRightPAndParserRuleCall_1_2_0() { return cRightPAndParserRuleCall_1_2_0; }
	}
	public class PAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.PAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PAnd returns Proposition:
		//    PEquality ({PAnd.left=current} "and" right=PEquality)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PEquality ({PAnd.left=current} "and" right=PEquality)*
		public Group getGroup() { return cGroup; }
		
		//PEquality
		public RuleCall getPEqualityParserRuleCall_0() { return cPEqualityParserRuleCall_0; }
		
		//({PAnd.left=current} "and" right=PEquality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{PAnd.left=current}
		public Action getPAndLeftAction_1_0() { return cPAndLeftAction_1_0; }
		
		//"and"
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//right=PEquality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PEquality
		public RuleCall getRightPEqualityParserRuleCall_1_2_0() { return cRightPEqualityParserRuleCall_1_2_0; }
	}
	public class PEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.PEquality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PEquality returns Proposition:
		//    PComparison ({PEquality.left=current} op=("==" | "!=") right=PComparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PComparison ({PEquality.left=current} op=("==" | "!=") right=PComparison)*
		public Group getGroup() { return cGroup; }
		
		//PComparison
		public RuleCall getPComparisonParserRuleCall_0() { return cPComparisonParserRuleCall_0; }
		
		//({PEquality.left=current} op=("==" | "!=") right=PComparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{PEquality.left=current}
		public Action getPEqualityLeftAction_1_0() { return cPEqualityLeftAction_1_0; }
		
		//op=("==" | "!=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//("==" | "!=")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=PComparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PComparison
		public RuleCall getRightPComparisonParserRuleCall_1_2_0() { return cRightPComparisonParserRuleCall_1_2_0; }
	}
	public class PComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.PComparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPAtomicExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPAtomicExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PComparison returns Proposition:
		//    PAtomicExpression ({PComparison.left=current} op=(">=" | "<=" | ">" | "<") right=PAtomicExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PAtomicExpression ({PComparison.left=current} op=(">=" | "<=" | ">" | "<") right=PAtomicExpression)*
		public Group getGroup() { return cGroup; }
		
		//PAtomicExpression
		public RuleCall getPAtomicExpressionParserRuleCall_0() { return cPAtomicExpressionParserRuleCall_0; }
		
		//({PComparison.left=current} op=(">=" | "<=" | ">" | "<") right=PAtomicExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{PComparison.left=current}
		public Action getPComparisonLeftAction_1_0() { return cPComparisonLeftAction_1_0; }
		
		//op=(">=" | "<=" | ">" | "<")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//(">=" | "<=" | ">" | "<")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }
		
		//right=PAtomicExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PAtomicExpression
		public RuleCall getRightPAtomicExpressionParserRuleCall_1_2_0() { return cRightPAtomicExpressionParserRuleCall_1_2_0; }
	}
	public class PAtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.PAtomicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPAtomRecursiveAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cInnerAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cInnerPropositionParserRuleCall_0_2_0 = (RuleCall)cInnerAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNegatedPAtomAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNotKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNegatedAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNegatedPAtomicExpressionParserRuleCall_1_2_0 = (RuleCall)cNegatedAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPAtomPredicateAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cPredicateFunctionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPredicateFunctionPredicateFunctionParserRuleCall_2_1_0 = (RuleCall)cPredicateFunctionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cPAtomFunctionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cFunctionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFunctionOtherFunctionParserRuleCall_3_1_0 = (RuleCall)cFunctionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cPAtomEnumAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cEnumerationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cEnumerationEnumerationCrossReference_4_1_0 = (CrossReference)cEnumerationAssignment_4_1.eContents().get(0);
		private final RuleCall cEnumerationEnumerationIDTerminalRuleCall_4_1_0_1 = (RuleCall)cEnumerationEnumerationCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cEnumItemAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final CrossReference cEnumItemEnumItemCrossReference_4_3_0 = (CrossReference)cEnumItemAssignment_4_3.eContents().get(0);
		private final RuleCall cEnumItemEnumItemIDTerminalRuleCall_4_3_0_1 = (RuleCall)cEnumItemEnumItemCrossReference_4_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cPAtomVariableAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cVariableAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cVariableVariableDotExpressionParserRuleCall_5_1_0 = (RuleCall)cVariableAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cPAtomPredicateTrueLiteralAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Keyword cValueTrueKeyword_6_1_0 = (Keyword)cValueAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cPAtomPredicateFalseLiteralAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cValueAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final Keyword cValueFalseKeyword_7_1_0 = (Keyword)cValueAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cPAtomDoubleLiteralAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cValueAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cValueDoubleParserRuleCall_8_1_0 = (RuleCall)cValueAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cPAtomIntLiteralAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Assignment cValueAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_9_1_0 = (RuleCall)cValueAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cPAtomStringLiteralAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Assignment cValueAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_10_1_0 = (RuleCall)cValueAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cPAtomDateLiteralAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Assignment cValueAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cValueDateParserRuleCall_11_1_0 = (RuleCall)cValueAssignment_11_1.eContents().get(0);
		
		//PAtomicExpression returns Proposition:
		//    {PAtomRecursive} '(' inner=Proposition ')' |
		//    {NegatedPAtom} 'not' negated=PAtomicExpression |
		//    {PAtomPredicate} predicateFunction=PredicateFunction |
		//    {PAtomFunction} function=OtherFunction |
		//  {PAtomEnum} enumeration=[Enumeration]"("enumItem=[EnumItem]")" |
		//    {PAtomVariable} variable=VariableDotExpression |
		//    {PAtomPredicateTrueLiteral} value='true' |
		//    {PAtomPredicateFalseLiteral} value='false' |
		//    {PAtomDoubleLiteral} value=Double |
		//    {PAtomIntLiteral} value=INT |
		//    {PAtomStringLiteral} value=STRING |
		//    {PAtomDateLiteral} value= Date
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//  {PAtomRecursive} '(' inner=Proposition ')' |
		//  {NegatedPAtom} 'not' negated=PAtomicExpression |
		//  {PAtomPredicate} predicateFunction=PredicateFunction |
		//  {PAtomFunction} function=OtherFunction |
		//{PAtomEnum} enumeration=[Enumeration]"("enumItem=[EnumItem]")" |
		//  {PAtomVariable} variable=VariableDotExpression |
		//  {PAtomPredicateTrueLiteral} value='true' |
		//  {PAtomPredicateFalseLiteral} value='false' |
		//  {PAtomDoubleLiteral} value=Double |
		//  {PAtomIntLiteral} value=INT |
		//  {PAtomStringLiteral} value=STRING |
		//  {PAtomDateLiteral} value= Date
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{PAtomRecursive} '(' inner=Proposition ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{PAtomRecursive}
		public Action getPAtomRecursiveAction_0_0() { return cPAtomRecursiveAction_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//inner=Proposition
		public Assignment getInnerAssignment_0_2() { return cInnerAssignment_0_2; }
		
		//Proposition
		public RuleCall getInnerPropositionParserRuleCall_0_2_0() { return cInnerPropositionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//{NegatedPAtom} 'not' negated=PAtomicExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//{NegatedPAtom}
		public Action getNegatedPAtomAction_1_0() { return cNegatedPAtomAction_1_0; }
		
		//'not'
		public Keyword getNotKeyword_1_1() { return cNotKeyword_1_1; }
		
		//negated=PAtomicExpression
		public Assignment getNegatedAssignment_1_2() { return cNegatedAssignment_1_2; }
		
		//PAtomicExpression
		public RuleCall getNegatedPAtomicExpressionParserRuleCall_1_2_0() { return cNegatedPAtomicExpressionParserRuleCall_1_2_0; }
		
		//{PAtomPredicate} predicateFunction=PredicateFunction
		public Group getGroup_2() { return cGroup_2; }
		
		//{PAtomPredicate}
		public Action getPAtomPredicateAction_2_0() { return cPAtomPredicateAction_2_0; }
		
		//predicateFunction=PredicateFunction
		public Assignment getPredicateFunctionAssignment_2_1() { return cPredicateFunctionAssignment_2_1; }
		
		//PredicateFunction
		public RuleCall getPredicateFunctionPredicateFunctionParserRuleCall_2_1_0() { return cPredicateFunctionPredicateFunctionParserRuleCall_2_1_0; }
		
		//{PAtomFunction} function=OtherFunction
		public Group getGroup_3() { return cGroup_3; }
		
		//{PAtomFunction}
		public Action getPAtomFunctionAction_3_0() { return cPAtomFunctionAction_3_0; }
		
		//function=OtherFunction
		public Assignment getFunctionAssignment_3_1() { return cFunctionAssignment_3_1; }
		
		//OtherFunction
		public RuleCall getFunctionOtherFunctionParserRuleCall_3_1_0() { return cFunctionOtherFunctionParserRuleCall_3_1_0; }
		
		//{PAtomEnum} enumeration=[Enumeration]"("enumItem=[EnumItem]")"
		public Group getGroup_4() { return cGroup_4; }
		
		//{PAtomEnum}
		public Action getPAtomEnumAction_4_0() { return cPAtomEnumAction_4_0; }
		
		//enumeration=[Enumeration]
		public Assignment getEnumerationAssignment_4_1() { return cEnumerationAssignment_4_1; }
		
		//[Enumeration]
		public CrossReference getEnumerationEnumerationCrossReference_4_1_0() { return cEnumerationEnumerationCrossReference_4_1_0; }
		
		//ID
		public RuleCall getEnumerationEnumerationIDTerminalRuleCall_4_1_0_1() { return cEnumerationEnumerationIDTerminalRuleCall_4_1_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }
		
		//enumItem=[EnumItem]
		public Assignment getEnumItemAssignment_4_3() { return cEnumItemAssignment_4_3; }
		
		//[EnumItem]
		public CrossReference getEnumItemEnumItemCrossReference_4_3_0() { return cEnumItemEnumItemCrossReference_4_3_0; }
		
		//ID
		public RuleCall getEnumItemEnumItemIDTerminalRuleCall_4_3_0_1() { return cEnumItemEnumItemIDTerminalRuleCall_4_3_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//{PAtomVariable} variable=VariableDotExpression
		public Group getGroup_5() { return cGroup_5; }
		
		//{PAtomVariable}
		public Action getPAtomVariableAction_5_0() { return cPAtomVariableAction_5_0; }
		
		//variable=VariableDotExpression
		public Assignment getVariableAssignment_5_1() { return cVariableAssignment_5_1; }
		
		//VariableDotExpression
		public RuleCall getVariableVariableDotExpressionParserRuleCall_5_1_0() { return cVariableVariableDotExpressionParserRuleCall_5_1_0; }
		
		//{PAtomPredicateTrueLiteral} value='true'
		public Group getGroup_6() { return cGroup_6; }
		
		//{PAtomPredicateTrueLiteral}
		public Action getPAtomPredicateTrueLiteralAction_6_0() { return cPAtomPredicateTrueLiteralAction_6_0; }
		
		//value='true'
		public Assignment getValueAssignment_6_1() { return cValueAssignment_6_1; }
		
		//'true'
		public Keyword getValueTrueKeyword_6_1_0() { return cValueTrueKeyword_6_1_0; }
		
		//{PAtomPredicateFalseLiteral} value='false'
		public Group getGroup_7() { return cGroup_7; }
		
		//{PAtomPredicateFalseLiteral}
		public Action getPAtomPredicateFalseLiteralAction_7_0() { return cPAtomPredicateFalseLiteralAction_7_0; }
		
		//value='false'
		public Assignment getValueAssignment_7_1() { return cValueAssignment_7_1; }
		
		//'false'
		public Keyword getValueFalseKeyword_7_1_0() { return cValueFalseKeyword_7_1_0; }
		
		//{PAtomDoubleLiteral} value=Double
		public Group getGroup_8() { return cGroup_8; }
		
		//{PAtomDoubleLiteral}
		public Action getPAtomDoubleLiteralAction_8_0() { return cPAtomDoubleLiteralAction_8_0; }
		
		//value=Double
		public Assignment getValueAssignment_8_1() { return cValueAssignment_8_1; }
		
		//Double
		public RuleCall getValueDoubleParserRuleCall_8_1_0() { return cValueDoubleParserRuleCall_8_1_0; }
		
		//{PAtomIntLiteral} value=INT
		public Group getGroup_9() { return cGroup_9; }
		
		//{PAtomIntLiteral}
		public Action getPAtomIntLiteralAction_9_0() { return cPAtomIntLiteralAction_9_0; }
		
		//value=INT
		public Assignment getValueAssignment_9_1() { return cValueAssignment_9_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_9_1_0() { return cValueINTTerminalRuleCall_9_1_0; }
		
		//{PAtomStringLiteral} value=STRING
		public Group getGroup_10() { return cGroup_10; }
		
		//{PAtomStringLiteral}
		public Action getPAtomStringLiteralAction_10_0() { return cPAtomStringLiteralAction_10_0; }
		
		//value=STRING
		public Assignment getValueAssignment_10_1() { return cValueAssignment_10_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_10_1_0() { return cValueSTRINGTerminalRuleCall_10_1_0; }
		
		//{PAtomDateLiteral} value= Date
		public Group getGroup_11() { return cGroup_11; }
		
		//{PAtomDateLiteral}
		public Action getPAtomDateLiteralAction_11_0() { return cPAtomDateLiteralAction_11_0; }
		
		//value= Date
		public Assignment getValueAssignment_11_1() { return cValueAssignment_11_1; }
		
		//Date
		public RuleCall getValueDateParserRuleCall_11_1_0() { return cValueDateParserRuleCall_11_1_0; }
	}
	public class PredicateFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.PredicateFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPredicateFunctionHappensAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cNameHappensKeyword_0_1_0 = (Keyword)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cEventAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cEventEventParserRuleCall_0_3_0 = (RuleCall)cEventAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPredicateFunctionWHappensBeforeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cNameWhappensBeforeKeyword_1_1_0 = (Keyword)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cEventAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cEventEventParserRuleCall_1_3_0 = (RuleCall)cEventAssignment_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cPointAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cPointPointParserRuleCall_1_5_0 = (RuleCall)cPointAssignment_1_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPredicateFunctionSHappensBeforeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cNameShappensBeforeKeyword_2_1_0 = (Keyword)cNameAssignment_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cEventAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cEventEventParserRuleCall_2_3_0 = (RuleCall)cEventAssignment_2_3.eContents().get(0);
		private final Keyword cCommaKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cPointAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cPointPointParserRuleCall_2_5_0 = (RuleCall)cPointAssignment_2_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cPredicateFunctionHappensWithinAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cNameHappensWithinKeyword_3_1_0 = (Keyword)cNameAssignment_3_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cEventAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cEventEventParserRuleCall_3_3_0 = (RuleCall)cEventAssignment_3_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cIntervalAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cIntervalIntervalParserRuleCall_3_5_0 = (RuleCall)cIntervalAssignment_3_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cPredicateFunctionWHappensBeforeEventAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cNameWhappensBeforeEKeyword_4_1_0 = (Keyword)cNameAssignment_4_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cEvent1Assignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cEvent1EventParserRuleCall_4_3_0 = (RuleCall)cEvent1Assignment_4_3.eContents().get(0);
		private final Keyword cCommaKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Assignment cEvent2Assignment_4_5 = (Assignment)cGroup_4.eContents().get(5);
		private final RuleCall cEvent2EventParserRuleCall_4_5_0 = (RuleCall)cEvent2Assignment_4_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_6 = (Keyword)cGroup_4.eContents().get(6);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cPredicateFunctionSHappensBeforeEventAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cNameAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Keyword cNameShappensBeforeEKeyword_5_1_0 = (Keyword)cNameAssignment_5_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cEvent1Assignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cEvent1EventParserRuleCall_5_3_0 = (RuleCall)cEvent1Assignment_5_3.eContents().get(0);
		private final Keyword cCommaKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Assignment cEvent2Assignment_5_5 = (Assignment)cGroup_5.eContents().get(5);
		private final RuleCall cEvent2EventParserRuleCall_5_5_0 = (RuleCall)cEvent2Assignment_5_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_6 = (Keyword)cGroup_5.eContents().get(6);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cPredicateFunctionHappensAfterAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cNameAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Keyword cNameHappensAfterKeyword_6_1_0 = (Keyword)cNameAssignment_6_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cEventAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cEventEventParserRuleCall_6_3_0 = (RuleCall)cEventAssignment_6_3.eContents().get(0);
		private final Keyword cCommaKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Assignment cPointAssignment_6_5 = (Assignment)cGroup_6.eContents().get(5);
		private final RuleCall cPointPointParserRuleCall_6_5_0 = (RuleCall)cPointAssignment_6_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_6 = (Keyword)cGroup_6.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cPredicateFunctionOccursAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cNameAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final Keyword cNameOccursKeyword_7_1_0 = (Keyword)cNameAssignment_7_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cSituationAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cSituationSituationParserRuleCall_7_3_0 = (RuleCall)cSituationAssignment_7_3.eContents().get(0);
		private final Keyword cCommaKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Assignment cIntervalAssignment_7_5 = (Assignment)cGroup_7.eContents().get(5);
		private final RuleCall cIntervalIntervalParserRuleCall_7_5_0 = (RuleCall)cIntervalAssignment_7_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_6 = (Keyword)cGroup_7.eContents().get(6);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cPredicateFunctionAssignmentAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cNameAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final Keyword cNameHappensAssignKeyword_8_1_0 = (Keyword)cNameAssignment_8_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cEventAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cEventEventParserRuleCall_8_3_0 = (RuleCall)cEventAssignment_8_3.eContents().get(0);
		private final Keyword cCommaKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Group cGroup_8_5 = (Group)cGroup_8.eContents().get(5);
		private final Assignment cAssignmentAssignment_8_5_0 = (Assignment)cGroup_8_5.eContents().get(0);
		private final RuleCall cAssignmentOAssignmentParserRuleCall_8_5_0_0 = (RuleCall)cAssignmentAssignment_8_5_0.eContents().get(0);
		private final Group cGroup_8_5_1 = (Group)cGroup_8_5.eContents().get(1);
		private final Keyword cSemicolonKeyword_8_5_1_0 = (Keyword)cGroup_8_5_1.eContents().get(0);
		private final Assignment cAssignmentAssignment_8_5_1_1 = (Assignment)cGroup_8_5_1.eContents().get(1);
		private final RuleCall cAssignmentOAssignmentParserRuleCall_8_5_1_1_0 = (RuleCall)cAssignmentAssignment_8_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_6 = (Keyword)cGroup_8.eContents().get(6);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cPredicateFunctionAssignmentOnlyAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Assignment cNameAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final Keyword cNameAssignKeyword_9_1_0 = (Keyword)cNameAssignment_9_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Group cGroup_9_3 = (Group)cGroup_9.eContents().get(3);
		private final Assignment cAssignmentAssignment_9_3_0 = (Assignment)cGroup_9_3.eContents().get(0);
		private final RuleCall cAssignmentOAssignmentParserRuleCall_9_3_0_0 = (RuleCall)cAssignmentAssignment_9_3_0.eContents().get(0);
		private final Group cGroup_9_3_1 = (Group)cGroup_9_3.eContents().get(1);
		private final Keyword cSemicolonKeyword_9_3_1_0 = (Keyword)cGroup_9_3_1.eContents().get(0);
		private final Assignment cAssignmentAssignment_9_3_1_1 = (Assignment)cGroup_9_3_1.eContents().get(1);
		private final RuleCall cAssignmentOAssignmentParserRuleCall_9_3_1_1_0 = (RuleCall)cAssignmentAssignment_9_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		
		//PredicateFunction:
		//    {PredicateFunctionHappens} name='Happens' '(' event=Event ')' |
		//    {PredicateFunctionWHappensBefore} name='WhappensBefore' '(' event=Event ',' point=Point ')' |
		//    {PredicateFunctionSHappensBefore} name='ShappensBefore' '(' event=Event ',' point=Point ')' |
		//    {PredicateFunctionHappensWithin} name='HappensWithin' '(' event=Event ',' interval=Interval ')'|
		//    {PredicateFunctionWHappensBeforeEvent} name='WhappensBeforeE' '(' event1=Event ',' event2=Event ')' |
		//    {PredicateFunctionSHappensBeforeEvent} name='ShappensBeforeE' '(' event1=Event ',' event2=Event ')' |
		//    {PredicateFunctionHappensAfter} name='HappensAfter' '(' event=Event ',' point=Point ')' |
		//    {PredicateFunctionOccurs} name='Occurs' '(' situation=Situation ',' interval=Interval ')' |
		//    {PredicateFunctionAssignment} name='HappensAssign' '(' event=Event ',' (assignment+=OAssignment (';' assignment+=OAssignment )*)?')' |
		//    {PredicateFunctionAssignmentOnly} name='Assign' '(' (assignment+=OAssignment (';' assignment+=OAssignment )*)?')'
		//        ;
		@Override public ParserRule getRule() { return rule; }
		
		//{PredicateFunctionHappens} name='Happens' '(' event=Event ')' |
		//{PredicateFunctionWHappensBefore} name='WhappensBefore' '(' event=Event ',' point=Point ')' |
		//{PredicateFunctionSHappensBefore} name='ShappensBefore' '(' event=Event ',' point=Point ')' |
		//{PredicateFunctionHappensWithin} name='HappensWithin' '(' event=Event ',' interval=Interval ')'|
		//{PredicateFunctionWHappensBeforeEvent} name='WhappensBeforeE' '(' event1=Event ',' event2=Event ')' |
		//{PredicateFunctionSHappensBeforeEvent} name='ShappensBeforeE' '(' event1=Event ',' event2=Event ')' |
		//{PredicateFunctionHappensAfter} name='HappensAfter' '(' event=Event ',' point=Point ')' |
		//{PredicateFunctionOccurs} name='Occurs' '(' situation=Situation ',' interval=Interval ')' |
		//{PredicateFunctionAssignment} name='HappensAssign' '(' event=Event ',' (assignment+=OAssignment (';' assignment+=OAssignment )*)?')' |
		//{PredicateFunctionAssignmentOnly} name='Assign' '(' (assignment+=OAssignment (';' assignment+=OAssignment )*)?')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{PredicateFunctionHappens} name='Happens' '(' event=Event ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{PredicateFunctionHappens}
		public Action getPredicateFunctionHappensAction_0_0() { return cPredicateFunctionHappensAction_0_0; }
		
		//name='Happens'
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//'Happens'
		public Keyword getNameHappensKeyword_0_1_0() { return cNameHappensKeyword_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//event=Event
		public Assignment getEventAssignment_0_3() { return cEventAssignment_0_3; }
		
		//Event
		public RuleCall getEventEventParserRuleCall_0_3_0() { return cEventEventParserRuleCall_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//{PredicateFunctionWHappensBefore} name='WhappensBefore' '(' event=Event ',' point=Point ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{PredicateFunctionWHappensBefore}
		public Action getPredicateFunctionWHappensBeforeAction_1_0() { return cPredicateFunctionWHappensBeforeAction_1_0; }
		
		//name='WhappensBefore'
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//'WhappensBefore'
		public Keyword getNameWhappensBeforeKeyword_1_1_0() { return cNameWhappensBeforeKeyword_1_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//event=Event
		public Assignment getEventAssignment_1_3() { return cEventAssignment_1_3; }
		
		//Event
		public RuleCall getEventEventParserRuleCall_1_3_0() { return cEventEventParserRuleCall_1_3_0; }
		
		//','
		public Keyword getCommaKeyword_1_4() { return cCommaKeyword_1_4; }
		
		//point=Point
		public Assignment getPointAssignment_1_5() { return cPointAssignment_1_5; }
		
		//Point
		public RuleCall getPointPointParserRuleCall_1_5_0() { return cPointPointParserRuleCall_1_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_6() { return cRightParenthesisKeyword_1_6; }
		
		//{PredicateFunctionSHappensBefore} name='ShappensBefore' '(' event=Event ',' point=Point ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{PredicateFunctionSHappensBefore}
		public Action getPredicateFunctionSHappensBeforeAction_2_0() { return cPredicateFunctionSHappensBeforeAction_2_0; }
		
		//name='ShappensBefore'
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//'ShappensBefore'
		public Keyword getNameShappensBeforeKeyword_2_1_0() { return cNameShappensBeforeKeyword_2_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//event=Event
		public Assignment getEventAssignment_2_3() { return cEventAssignment_2_3; }
		
		//Event
		public RuleCall getEventEventParserRuleCall_2_3_0() { return cEventEventParserRuleCall_2_3_0; }
		
		//','
		public Keyword getCommaKeyword_2_4() { return cCommaKeyword_2_4; }
		
		//point=Point
		public Assignment getPointAssignment_2_5() { return cPointAssignment_2_5; }
		
		//Point
		public RuleCall getPointPointParserRuleCall_2_5_0() { return cPointPointParserRuleCall_2_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_6() { return cRightParenthesisKeyword_2_6; }
		
		//{PredicateFunctionHappensWithin} name='HappensWithin' '(' event=Event ',' interval=Interval ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//{PredicateFunctionHappensWithin}
		public Action getPredicateFunctionHappensWithinAction_3_0() { return cPredicateFunctionHappensWithinAction_3_0; }
		
		//name='HappensWithin'
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }
		
		//'HappensWithin'
		public Keyword getNameHappensWithinKeyword_3_1_0() { return cNameHappensWithinKeyword_3_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }
		
		//event=Event
		public Assignment getEventAssignment_3_3() { return cEventAssignment_3_3; }
		
		//Event
		public RuleCall getEventEventParserRuleCall_3_3_0() { return cEventEventParserRuleCall_3_3_0; }
		
		//','
		public Keyword getCommaKeyword_3_4() { return cCommaKeyword_3_4; }
		
		//interval=Interval
		public Assignment getIntervalAssignment_3_5() { return cIntervalAssignment_3_5; }
		
		//Interval
		public RuleCall getIntervalIntervalParserRuleCall_3_5_0() { return cIntervalIntervalParserRuleCall_3_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_6() { return cRightParenthesisKeyword_3_6; }
		
		//{PredicateFunctionWHappensBeforeEvent} name='WhappensBeforeE' '(' event1=Event ',' event2=Event ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//{PredicateFunctionWHappensBeforeEvent}
		public Action getPredicateFunctionWHappensBeforeEventAction_4_0() { return cPredicateFunctionWHappensBeforeEventAction_4_0; }
		
		//name='WhappensBeforeE'
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }
		
		//'WhappensBeforeE'
		public Keyword getNameWhappensBeforeEKeyword_4_1_0() { return cNameWhappensBeforeEKeyword_4_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }
		
		//event1=Event
		public Assignment getEvent1Assignment_4_3() { return cEvent1Assignment_4_3; }
		
		//Event
		public RuleCall getEvent1EventParserRuleCall_4_3_0() { return cEvent1EventParserRuleCall_4_3_0; }
		
		//','
		public Keyword getCommaKeyword_4_4() { return cCommaKeyword_4_4; }
		
		//event2=Event
		public Assignment getEvent2Assignment_4_5() { return cEvent2Assignment_4_5; }
		
		//Event
		public RuleCall getEvent2EventParserRuleCall_4_5_0() { return cEvent2EventParserRuleCall_4_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_6() { return cRightParenthesisKeyword_4_6; }
		
		//{PredicateFunctionSHappensBeforeEvent} name='ShappensBeforeE' '(' event1=Event ',' event2=Event ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//{PredicateFunctionSHappensBeforeEvent}
		public Action getPredicateFunctionSHappensBeforeEventAction_5_0() { return cPredicateFunctionSHappensBeforeEventAction_5_0; }
		
		//name='ShappensBeforeE'
		public Assignment getNameAssignment_5_1() { return cNameAssignment_5_1; }
		
		//'ShappensBeforeE'
		public Keyword getNameShappensBeforeEKeyword_5_1_0() { return cNameShappensBeforeEKeyword_5_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }
		
		//event1=Event
		public Assignment getEvent1Assignment_5_3() { return cEvent1Assignment_5_3; }
		
		//Event
		public RuleCall getEvent1EventParserRuleCall_5_3_0() { return cEvent1EventParserRuleCall_5_3_0; }
		
		//','
		public Keyword getCommaKeyword_5_4() { return cCommaKeyword_5_4; }
		
		//event2=Event
		public Assignment getEvent2Assignment_5_5() { return cEvent2Assignment_5_5; }
		
		//Event
		public RuleCall getEvent2EventParserRuleCall_5_5_0() { return cEvent2EventParserRuleCall_5_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_6() { return cRightParenthesisKeyword_5_6; }
		
		//{PredicateFunctionHappensAfter} name='HappensAfter' '(' event=Event ',' point=Point ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//{PredicateFunctionHappensAfter}
		public Action getPredicateFunctionHappensAfterAction_6_0() { return cPredicateFunctionHappensAfterAction_6_0; }
		
		//name='HappensAfter'
		public Assignment getNameAssignment_6_1() { return cNameAssignment_6_1; }
		
		//'HappensAfter'
		public Keyword getNameHappensAfterKeyword_6_1_0() { return cNameHappensAfterKeyword_6_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_2() { return cLeftParenthesisKeyword_6_2; }
		
		//event=Event
		public Assignment getEventAssignment_6_3() { return cEventAssignment_6_3; }
		
		//Event
		public RuleCall getEventEventParserRuleCall_6_3_0() { return cEventEventParserRuleCall_6_3_0; }
		
		//','
		public Keyword getCommaKeyword_6_4() { return cCommaKeyword_6_4; }
		
		//point=Point
		public Assignment getPointAssignment_6_5() { return cPointAssignment_6_5; }
		
		//Point
		public RuleCall getPointPointParserRuleCall_6_5_0() { return cPointPointParserRuleCall_6_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_6() { return cRightParenthesisKeyword_6_6; }
		
		//{PredicateFunctionOccurs} name='Occurs' '(' situation=Situation ',' interval=Interval ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//{PredicateFunctionOccurs}
		public Action getPredicateFunctionOccursAction_7_0() { return cPredicateFunctionOccursAction_7_0; }
		
		//name='Occurs'
		public Assignment getNameAssignment_7_1() { return cNameAssignment_7_1; }
		
		//'Occurs'
		public Keyword getNameOccursKeyword_7_1_0() { return cNameOccursKeyword_7_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_2() { return cLeftParenthesisKeyword_7_2; }
		
		//situation=Situation
		public Assignment getSituationAssignment_7_3() { return cSituationAssignment_7_3; }
		
		//Situation
		public RuleCall getSituationSituationParserRuleCall_7_3_0() { return cSituationSituationParserRuleCall_7_3_0; }
		
		//','
		public Keyword getCommaKeyword_7_4() { return cCommaKeyword_7_4; }
		
		//interval=Interval
		public Assignment getIntervalAssignment_7_5() { return cIntervalAssignment_7_5; }
		
		//Interval
		public RuleCall getIntervalIntervalParserRuleCall_7_5_0() { return cIntervalIntervalParserRuleCall_7_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_6() { return cRightParenthesisKeyword_7_6; }
		
		//{PredicateFunctionAssignment} name='HappensAssign' '(' event=Event ',' (assignment+=OAssignment (';' assignment+=OAssignment )*)?')'
		public Group getGroup_8() { return cGroup_8; }
		
		//{PredicateFunctionAssignment}
		public Action getPredicateFunctionAssignmentAction_8_0() { return cPredicateFunctionAssignmentAction_8_0; }
		
		//name='HappensAssign'
		public Assignment getNameAssignment_8_1() { return cNameAssignment_8_1; }
		
		//'HappensAssign'
		public Keyword getNameHappensAssignKeyword_8_1_0() { return cNameHappensAssignKeyword_8_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_2() { return cLeftParenthesisKeyword_8_2; }
		
		//event=Event
		public Assignment getEventAssignment_8_3() { return cEventAssignment_8_3; }
		
		//Event
		public RuleCall getEventEventParserRuleCall_8_3_0() { return cEventEventParserRuleCall_8_3_0; }
		
		//','
		public Keyword getCommaKeyword_8_4() { return cCommaKeyword_8_4; }
		
		//(assignment+=OAssignment (';' assignment+=OAssignment )*)?
		public Group getGroup_8_5() { return cGroup_8_5; }
		
		//assignment+=OAssignment
		public Assignment getAssignmentAssignment_8_5_0() { return cAssignmentAssignment_8_5_0; }
		
		//OAssignment
		public RuleCall getAssignmentOAssignmentParserRuleCall_8_5_0_0() { return cAssignmentOAssignmentParserRuleCall_8_5_0_0; }
		
		//(';' assignment+=OAssignment )*
		public Group getGroup_8_5_1() { return cGroup_8_5_1; }
		
		//';'
		public Keyword getSemicolonKeyword_8_5_1_0() { return cSemicolonKeyword_8_5_1_0; }
		
		//assignment+=OAssignment
		public Assignment getAssignmentAssignment_8_5_1_1() { return cAssignmentAssignment_8_5_1_1; }
		
		//OAssignment
		public RuleCall getAssignmentOAssignmentParserRuleCall_8_5_1_1_0() { return cAssignmentOAssignmentParserRuleCall_8_5_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_6() { return cRightParenthesisKeyword_8_6; }
		
		//{PredicateFunctionAssignmentOnly} name='Assign' '(' (assignment+=OAssignment (';' assignment+=OAssignment )*)?')'
		public Group getGroup_9() { return cGroup_9; }
		
		//{PredicateFunctionAssignmentOnly}
		public Action getPredicateFunctionAssignmentOnlyAction_9_0() { return cPredicateFunctionAssignmentOnlyAction_9_0; }
		
		//name='Assign'
		public Assignment getNameAssignment_9_1() { return cNameAssignment_9_1; }
		
		//'Assign'
		public Keyword getNameAssignKeyword_9_1_0() { return cNameAssignKeyword_9_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_9_2() { return cLeftParenthesisKeyword_9_2; }
		
		//(assignment+=OAssignment (';' assignment+=OAssignment )*)?
		public Group getGroup_9_3() { return cGroup_9_3; }
		
		//assignment+=OAssignment
		public Assignment getAssignmentAssignment_9_3_0() { return cAssignmentAssignment_9_3_0; }
		
		//OAssignment
		public RuleCall getAssignmentOAssignmentParserRuleCall_9_3_0_0() { return cAssignmentOAssignmentParserRuleCall_9_3_0_0; }
		
		//(';' assignment+=OAssignment )*
		public Group getGroup_9_3_1() { return cGroup_9_3_1; }
		
		//';'
		public Keyword getSemicolonKeyword_9_3_1_0() { return cSemicolonKeyword_9_3_1_0; }
		
		//assignment+=OAssignment
		public Assignment getAssignmentAssignment_9_3_1_1() { return cAssignmentAssignment_9_3_1_1; }
		
		//OAssignment
		public RuleCall getAssignmentOAssignmentParserRuleCall_9_3_1_1_0() { return cAssignmentOAssignmentParserRuleCall_9_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9_4() { return cRightParenthesisKeyword_9_4; }
	}
	public class OtherFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.OtherFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPredicateFunctionIsEqualAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cNameIsEqualKeyword_0_1_0 = (Keyword)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cArg1Assignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cArg1IDTerminalRuleCall_0_3_0 = (RuleCall)cArg1Assignment_0_3.eContents().get(0);
		private final Keyword cCommaKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cArg2Assignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cArg2IDTerminalRuleCall_0_5_0 = (RuleCall)cArg2Assignment_0_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPredicateFunctionIsOwnerAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cNameIsOwnerKeyword_1_1_0 = (Keyword)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cArg1Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cArg1IDTerminalRuleCall_1_3_0 = (RuleCall)cArg1Assignment_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cArg2Assignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cArg2IDTerminalRuleCall_1_5_0 = (RuleCall)cArg2Assignment_1_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPredicateFunctionCannotBeAssignedAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cNameCannotBeAssignedKeyword_2_1_0 = (Keyword)cNameAssignment_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cArg1Assignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cArg1IDTerminalRuleCall_2_3_0 = (RuleCall)cArg1Assignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//                                              //('with' attributes+=Assignment (',' attributes+=Assignment)*)?;
		//    //{PredicateFunctionAssignmentOnly} name='Assign' '(' (assignment+=OAssignment)* (';' assignment+=OAssignment )?')'
		//OtherFunction:
		//  {PredicateFunctionIsEqual} name='IsEqual' '(' arg1=ID ',' arg2=ID ')' |
		//  {PredicateFunctionIsOwner} name='IsOwner' '(' arg1=ID ',' arg2=ID ')' |
		//  {PredicateFunctionCannotBeAssigned} name='CannotBeAssigned' '(' arg1=ID ')'
		//  ;
		@Override public ParserRule getRule() { return rule; }
		
		//{PredicateFunctionIsEqual} name='IsEqual' '(' arg1=ID ',' arg2=ID ')' |
		//{PredicateFunctionIsOwner} name='IsOwner' '(' arg1=ID ',' arg2=ID ')' |
		//{PredicateFunctionCannotBeAssigned} name='CannotBeAssigned' '(' arg1=ID ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{PredicateFunctionIsEqual} name='IsEqual' '(' arg1=ID ',' arg2=ID ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{PredicateFunctionIsEqual}
		public Action getPredicateFunctionIsEqualAction_0_0() { return cPredicateFunctionIsEqualAction_0_0; }
		
		//name='IsEqual'
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//'IsEqual'
		public Keyword getNameIsEqualKeyword_0_1_0() { return cNameIsEqualKeyword_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//arg1=ID
		public Assignment getArg1Assignment_0_3() { return cArg1Assignment_0_3; }
		
		//ID
		public RuleCall getArg1IDTerminalRuleCall_0_3_0() { return cArg1IDTerminalRuleCall_0_3_0; }
		
		//','
		public Keyword getCommaKeyword_0_4() { return cCommaKeyword_0_4; }
		
		//arg2=ID
		public Assignment getArg2Assignment_0_5() { return cArg2Assignment_0_5; }
		
		//ID
		public RuleCall getArg2IDTerminalRuleCall_0_5_0() { return cArg2IDTerminalRuleCall_0_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_6() { return cRightParenthesisKeyword_0_6; }
		
		//{PredicateFunctionIsOwner} name='IsOwner' '(' arg1=ID ',' arg2=ID ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{PredicateFunctionIsOwner}
		public Action getPredicateFunctionIsOwnerAction_1_0() { return cPredicateFunctionIsOwnerAction_1_0; }
		
		//name='IsOwner'
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//'IsOwner'
		public Keyword getNameIsOwnerKeyword_1_1_0() { return cNameIsOwnerKeyword_1_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//arg1=ID
		public Assignment getArg1Assignment_1_3() { return cArg1Assignment_1_3; }
		
		//ID
		public RuleCall getArg1IDTerminalRuleCall_1_3_0() { return cArg1IDTerminalRuleCall_1_3_0; }
		
		//','
		public Keyword getCommaKeyword_1_4() { return cCommaKeyword_1_4; }
		
		//arg2=ID
		public Assignment getArg2Assignment_1_5() { return cArg2Assignment_1_5; }
		
		//ID
		public RuleCall getArg2IDTerminalRuleCall_1_5_0() { return cArg2IDTerminalRuleCall_1_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_6() { return cRightParenthesisKeyword_1_6; }
		
		//{PredicateFunctionCannotBeAssigned} name='CannotBeAssigned' '(' arg1=ID ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{PredicateFunctionCannotBeAssigned}
		public Action getPredicateFunctionCannotBeAssignedAction_2_0() { return cPredicateFunctionCannotBeAssignedAction_2_0; }
		
		//name='CannotBeAssigned'
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//'CannotBeAssigned'
		public Keyword getNameCannotBeAssignedKeyword_2_1_0() { return cNameCannotBeAssignedKeyword_2_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//arg1=ID
		public Assignment getArg1Assignment_2_3() { return cArg1Assignment_2_3; }
		
		//ID
		public RuleCall getArg1IDTerminalRuleCall_2_3_0() { return cArg1IDTerminalRuleCall_2_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObligationEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cContractEventParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPowerEventParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Event:
		//    VariableEvent |
		//    ObligationEvent |
		//    ContractEvent |
		//    PowerEvent;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableEvent |
		//ObligationEvent |
		//ContractEvent |
		//PowerEvent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableEvent
		public RuleCall getVariableEventParserRuleCall_0() { return cVariableEventParserRuleCall_0; }
		
		//ObligationEvent
		public RuleCall getObligationEventParserRuleCall_1() { return cObligationEventParserRuleCall_1; }
		
		//ContractEvent
		public RuleCall getContractEventParserRuleCall_2() { return cContractEventParserRuleCall_2; }
		
		//PowerEvent
		public RuleCall getPowerEventParserRuleCall_3() { return cPowerEventParserRuleCall_3; }
	}
	public class VariableEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.VariableEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableDotExpressionParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		
		//VariableEvent returns Event:
		//    {VariableEvent} variable=VariableDotExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableEvent} variable=VariableDotExpression
		public Group getGroup() { return cGroup; }
		
		//{VariableEvent}
		public Action getVariableEventAction_0() { return cVariableEventAction_0; }
		
		//variable=VariableDotExpression
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//VariableDotExpression
		public RuleCall getVariableVariableDotExpressionParserRuleCall_1_0() { return cVariableVariableDotExpressionParserRuleCall_1_0; }
	}
	public class PowerEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.PowerEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPowerEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEventNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventNamePowerEventNameParserRuleCall_1_0 = (RuleCall)cEventNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPowersKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPowerVariableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cPowerVariablePowerCrossReference_4_0 = (CrossReference)cPowerVariableAssignment_4.eContents().get(0);
		private final RuleCall cPowerVariablePowerIDTerminalRuleCall_4_0_1 = (RuleCall)cPowerVariablePowerCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PowerEvent returns Event:
		//    {PowerEvent} eventName=PowerEventName '(' 'powers.' powerVariable=[Power] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{PowerEvent} eventName=PowerEventName '(' 'powers.' powerVariable=[Power] ')'
		public Group getGroup() { return cGroup; }
		
		//{PowerEvent}
		public Action getPowerEventAction_0() { return cPowerEventAction_0; }
		
		//eventName=PowerEventName
		public Assignment getEventNameAssignment_1() { return cEventNameAssignment_1; }
		
		//PowerEventName
		public RuleCall getEventNamePowerEventNameParserRuleCall_1_0() { return cEventNamePowerEventNameParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'powers.'
		public Keyword getPowersKeyword_3() { return cPowersKeyword_3; }
		
		//powerVariable=[Power]
		public Assignment getPowerVariableAssignment_4() { return cPowerVariableAssignment_4; }
		
		//[Power]
		public CrossReference getPowerVariablePowerCrossReference_4_0() { return cPowerVariablePowerCrossReference_4_0; }
		
		//ID
		public RuleCall getPowerVariablePowerIDTerminalRuleCall_4_0_1() { return cPowerVariablePowerIDTerminalRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class PowerEventNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.PowerEventName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTriggeredKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cActivatedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSuspendedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cResumedKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cExertedKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExpiredKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cTerminatedKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//PowerEventName:
		//    'Triggered' | 'Activated' | 'Suspended' | 'Resumed' | 'Exerted' | 'Expired' | 'Terminated';
		@Override public ParserRule getRule() { return rule; }
		
		//'Triggered' | 'Activated' | 'Suspended' | 'Resumed' | 'Exerted' | 'Expired' | 'Terminated'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Triggered'
		public Keyword getTriggeredKeyword_0() { return cTriggeredKeyword_0; }
		
		//'Activated'
		public Keyword getActivatedKeyword_1() { return cActivatedKeyword_1; }
		
		//'Suspended'
		public Keyword getSuspendedKeyword_2() { return cSuspendedKeyword_2; }
		
		//'Resumed'
		public Keyword getResumedKeyword_3() { return cResumedKeyword_3; }
		
		//'Exerted'
		public Keyword getExertedKeyword_4() { return cExertedKeyword_4; }
		
		//'Expired'
		public Keyword getExpiredKeyword_5() { return cExpiredKeyword_5; }
		
		//'Terminated'
		public Keyword getTerminatedKeyword_6() { return cTerminatedKeyword_6; }
	}
	public class ObligationEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.ObligationEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObligationEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEventNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventNameObligationEventNameParserRuleCall_1_0 = (RuleCall)cEventNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cObligationsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cObligationVariableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cObligationVariableObligationCrossReference_4_0 = (CrossReference)cObligationVariableAssignment_4.eContents().get(0);
		private final RuleCall cObligationVariableObligationIDTerminalRuleCall_4_0_1 = (RuleCall)cObligationVariableObligationCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ObligationEvent returns Event:
		//    {ObligationEvent} eventName=ObligationEventName '(' 'obligations.' obligationVariable=[Obligation] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ObligationEvent} eventName=ObligationEventName '(' 'obligations.' obligationVariable=[Obligation] ')'
		public Group getGroup() { return cGroup; }
		
		//{ObligationEvent}
		public Action getObligationEventAction_0() { return cObligationEventAction_0; }
		
		//eventName=ObligationEventName
		public Assignment getEventNameAssignment_1() { return cEventNameAssignment_1; }
		
		//ObligationEventName
		public RuleCall getEventNameObligationEventNameParserRuleCall_1_0() { return cEventNameObligationEventNameParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'obligations.'
		public Keyword getObligationsKeyword_3() { return cObligationsKeyword_3; }
		
		//obligationVariable=[Obligation]
		public Assignment getObligationVariableAssignment_4() { return cObligationVariableAssignment_4; }
		
		//[Obligation]
		public CrossReference getObligationVariableObligationCrossReference_4_0() { return cObligationVariableObligationCrossReference_4_0; }
		
		//ID
		public RuleCall getObligationVariableObligationIDTerminalRuleCall_4_0_1() { return cObligationVariableObligationIDTerminalRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ObligationEventNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.ObligationEventName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTriggeredKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cActivatedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSuspendedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cResumedKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cDischargedKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExpiredKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cFulfilledKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cViolatedKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cTerminatedKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//ObligationEventName:
		//    'Triggered' | 'Activated' | 'Suspended' | 'Resumed' | 'Discharged' | 'Expired' | 'Fulfilled' | 'Violated' | 'Terminated';
		@Override public ParserRule getRule() { return rule; }
		
		//'Triggered' | 'Activated' | 'Suspended' | 'Resumed' | 'Discharged' | 'Expired' | 'Fulfilled' | 'Violated' | 'Terminated'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Triggered'
		public Keyword getTriggeredKeyword_0() { return cTriggeredKeyword_0; }
		
		//'Activated'
		public Keyword getActivatedKeyword_1() { return cActivatedKeyword_1; }
		
		//'Suspended'
		public Keyword getSuspendedKeyword_2() { return cSuspendedKeyword_2; }
		
		//'Resumed'
		public Keyword getResumedKeyword_3() { return cResumedKeyword_3; }
		
		//'Discharged'
		public Keyword getDischargedKeyword_4() { return cDischargedKeyword_4; }
		
		//'Expired'
		public Keyword getExpiredKeyword_5() { return cExpiredKeyword_5; }
		
		//'Fulfilled'
		public Keyword getFulfilledKeyword_6() { return cFulfilledKeyword_6; }
		
		//'Violated'
		public Keyword getViolatedKeyword_7() { return cViolatedKeyword_7; }
		
		//'Terminated'
		public Keyword getTerminatedKeyword_8() { return cTerminatedKeyword_8; }
	}
	public class ContractEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.ContractEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContractEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEventNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventNameContractEventNameParserRuleCall_1_0 = (RuleCall)cEventNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSelfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ContractEvent returns Event:
		//    {ContractEvent} eventName=ContractEventName '(' 'self' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ContractEvent} eventName=ContractEventName '(' 'self' ')'
		public Group getGroup() { return cGroup; }
		
		//{ContractEvent}
		public Action getContractEventAction_0() { return cContractEventAction_0; }
		
		//eventName=ContractEventName
		public Assignment getEventNameAssignment_1() { return cEventNameAssignment_1; }
		
		//ContractEventName
		public RuleCall getEventNameContractEventNameParserRuleCall_1_0() { return cEventNameContractEventNameParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'self'
		public Keyword getSelfKeyword_3() { return cSelfKeyword_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ContractEventNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.ContractEventName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cActivatedKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSuspendedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cResumedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFulfilledObligationsKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cRevokedPartyKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAssignedPartyKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cTerminatedKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cRescindedKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//ContractEventName:
		//    'Activated' | 'Suspended' | 'Resumed' | 'FulfilledObligations' | 'RevokedParty' | 'AssignedParty' | 'Terminated' | 'Rescinded';
		@Override public ParserRule getRule() { return rule; }
		
		//'Activated' | 'Suspended' | 'Resumed' | 'FulfilledObligations' | 'RevokedParty' | 'AssignedParty' | 'Terminated' | 'Rescinded'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Activated'
		public Keyword getActivatedKeyword_0() { return cActivatedKeyword_0; }
		
		//'Suspended'
		public Keyword getSuspendedKeyword_1() { return cSuspendedKeyword_1; }
		
		//'Resumed'
		public Keyword getResumedKeyword_2() { return cResumedKeyword_2; }
		
		//'FulfilledObligations'
		public Keyword getFulfilledObligationsKeyword_3() { return cFulfilledObligationsKeyword_3; }
		
		//'RevokedParty'
		public Keyword getRevokedPartyKeyword_4() { return cRevokedPartyKeyword_4; }
		
		//'AssignedParty'
		public Keyword getAssignedPartyKeyword_5() { return cAssignedPartyKeyword_5; }
		
		//'Terminated'
		public Keyword getTerminatedKeyword_6() { return cTerminatedKeyword_6; }
		
		//'Rescinded'
		public Keyword getRescindedKeyword_7() { return cRescindedKeyword_7; }
	}
	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.Point");
		private final Assignment cPointExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPointExpressionPointExpressionParserRuleCall_0 = (RuleCall)cPointExpressionAssignment.eContents().get(0);
		
		//Point:
		//    pointExpression=PointExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//pointExpression=PointExpression
		public Assignment getPointExpressionAssignment() { return cPointExpressionAssignment; }
		
		//PointExpression
		public RuleCall getPointExpressionPointExpressionParserRuleCall_0() { return cPointExpressionPointExpressionParserRuleCall_0; }
	}
	public class PointExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.PointExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPointFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPointAtomParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PointExpression:
		//    PointFunction |
		//    PointAtom;
		@Override public ParserRule getRule() { return rule; }
		
		//PointFunction |
		//PointAtom
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PointFunction
		public RuleCall getPointFunctionParserRuleCall_0() { return cPointFunctionParserRuleCall_0; }
		
		//PointAtom
		public RuleCall getPointAtomParserRuleCall_1() { return cPointAtomParserRuleCall_1; }
	}
	public class PointFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.PointFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPointFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePointFunctionNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgPointExpressionParserRuleCall_3_0 = (RuleCall)cArgAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueTimevalueParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTimeUnitAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTimeUnitTimeUnitParserRuleCall_7_0 = (RuleCall)cTimeUnitAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//PointFunction returns PointExpression:
		//    {PointFunction} name=PointFunctionName '(' arg=PointExpression ',' value=Timevalue ',' timeUnit=TimeUnit ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{PointFunction} name=PointFunctionName '(' arg=PointExpression ',' value=Timevalue ',' timeUnit=TimeUnit ')'
		public Group getGroup() { return cGroup; }
		
		//{PointFunction}
		public Action getPointFunctionAction_0() { return cPointFunctionAction_0; }
		
		//name=PointFunctionName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//PointFunctionName
		public RuleCall getNamePointFunctionNameParserRuleCall_1_0() { return cNamePointFunctionNameParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//arg=PointExpression
		public Assignment getArgAssignment_3() { return cArgAssignment_3; }
		
		//PointExpression
		public RuleCall getArgPointExpressionParserRuleCall_3_0() { return cArgPointExpressionParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//value=Timevalue
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//Timevalue
		public RuleCall getValueTimevalueParserRuleCall_5_0() { return cValueTimevalueParserRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//timeUnit=TimeUnit
		public Assignment getTimeUnitAssignment_7() { return cTimeUnitAssignment_7; }
		
		//TimeUnit
		public RuleCall getTimeUnitTimeUnitParserRuleCall_7_0() { return cTimeUnitTimeUnitParserRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class PointFunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.PointFunctionName");
		private final Keyword cDateAddKeyword = (Keyword)rule.eContents().get(1);
		
		//PointFunctionName:
		//    'Date.add';
		@Override public ParserRule getRule() { return rule; }
		
		//'Date.add'
		public Keyword getDateAddKeyword() { return cDateAddKeyword; }
	}
	public class PointAtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.PointAtom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPointAtomParameterDotExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cVariableAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVariableVariableDotExpressionParserRuleCall_0_1_0 = (RuleCall)cVariableAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPointAtomObligationEventAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cObligationEventAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cObligationEventObligationEventParserRuleCall_1_1_0 = (RuleCall)cObligationEventAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPointAtomContractEventAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cContractEventAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cContractEventContractEventParserRuleCall_2_1_0 = (RuleCall)cContractEventAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cPointAtomPowerEventAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cPowerEventAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPowerEventPowerEventParserRuleCall_3_1_0 = (RuleCall)cPowerEventAssignment_3_1.eContents().get(0);
		
		//PointAtom returns PointExpression:
		//    {PointAtomParameterDotExpression} variable=VariableDotExpression |
		//    {PointAtomObligationEvent} obligationEvent=ObligationEvent |
		//    {PointAtomContractEvent} contractEvent=ContractEvent |
		//    {PointAtomPowerEvent} powerEvent=PowerEvent;
		@Override public ParserRule getRule() { return rule; }
		
		//{PointAtomParameterDotExpression} variable=VariableDotExpression |
		//{PointAtomObligationEvent} obligationEvent=ObligationEvent |
		//{PointAtomContractEvent} contractEvent=ContractEvent |
		//{PointAtomPowerEvent} powerEvent=PowerEvent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{PointAtomParameterDotExpression} variable=VariableDotExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//{PointAtomParameterDotExpression}
		public Action getPointAtomParameterDotExpressionAction_0_0() { return cPointAtomParameterDotExpressionAction_0_0; }
		
		//variable=VariableDotExpression
		public Assignment getVariableAssignment_0_1() { return cVariableAssignment_0_1; }
		
		//VariableDotExpression
		public RuleCall getVariableVariableDotExpressionParserRuleCall_0_1_0() { return cVariableVariableDotExpressionParserRuleCall_0_1_0; }
		
		//{PointAtomObligationEvent} obligationEvent=ObligationEvent
		public Group getGroup_1() { return cGroup_1; }
		
		//{PointAtomObligationEvent}
		public Action getPointAtomObligationEventAction_1_0() { return cPointAtomObligationEventAction_1_0; }
		
		//obligationEvent=ObligationEvent
		public Assignment getObligationEventAssignment_1_1() { return cObligationEventAssignment_1_1; }
		
		//ObligationEvent
		public RuleCall getObligationEventObligationEventParserRuleCall_1_1_0() { return cObligationEventObligationEventParserRuleCall_1_1_0; }
		
		//{PointAtomContractEvent} contractEvent=ContractEvent
		public Group getGroup_2() { return cGroup_2; }
		
		//{PointAtomContractEvent}
		public Action getPointAtomContractEventAction_2_0() { return cPointAtomContractEventAction_2_0; }
		
		//contractEvent=ContractEvent
		public Assignment getContractEventAssignment_2_1() { return cContractEventAssignment_2_1; }
		
		//ContractEvent
		public RuleCall getContractEventContractEventParserRuleCall_2_1_0() { return cContractEventContractEventParserRuleCall_2_1_0; }
		
		//{PointAtomPowerEvent} powerEvent=PowerEvent
		public Group getGroup_3() { return cGroup_3; }
		
		//{PointAtomPowerEvent}
		public Action getPointAtomPowerEventAction_3_0() { return cPointAtomPowerEventAction_3_0; }
		
		//powerEvent=PowerEvent
		public Assignment getPowerEventAssignment_3_1() { return cPowerEventAssignment_3_1; }
		
		//PowerEvent
		public RuleCall getPowerEventPowerEventParserRuleCall_3_1_0() { return cPowerEventPowerEventParserRuleCall_3_1_0; }
	}
	public class TimevalueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.Timevalue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTimevalueIntAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTimevalueVariableAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cVariableAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariableVariableDotExpressionParserRuleCall_1_1_0 = (RuleCall)cVariableAssignment_1_1.eContents().get(0);
		
		//Timevalue:
		//    {TimevalueInt} value=INT |
		//    {TimevalueVariable} variable=VariableDotExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{TimevalueInt} value=INT |
		//{TimevalueVariable} variable=VariableDotExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{TimevalueInt} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{TimevalueInt}
		public Action getTimevalueIntAction_0_0() { return cTimevalueIntAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{TimevalueVariable} variable=VariableDotExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//{TimevalueVariable}
		public Action getTimevalueVariableAction_1_0() { return cTimevalueVariableAction_1_0; }
		
		//variable=VariableDotExpression
		public Assignment getVariableAssignment_1_1() { return cVariableAssignment_1_1; }
		
		//VariableDotExpression
		public RuleCall getVariableVariableDotExpressionParserRuleCall_1_1_0() { return cVariableVariableDotExpressionParserRuleCall_1_1_0; }
	}
	public class TimeUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSecondsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMinutesKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHoursKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDaysKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cWeeksKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cMonthsKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cYearsKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//TimeUnit:
		//    'seconds' | 'minutes' | 'hours' | 'days' | 'weeks' | 'months' | 'years';
		@Override public ParserRule getRule() { return rule; }
		
		//'seconds' | 'minutes' | 'hours' | 'days' | 'weeks' | 'months' | 'years'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'seconds'
		public Keyword getSecondsKeyword_0() { return cSecondsKeyword_0; }
		
		//'minutes'
		public Keyword getMinutesKeyword_1() { return cMinutesKeyword_1; }
		
		//'hours'
		public Keyword getHoursKeyword_2() { return cHoursKeyword_2; }
		
		//'days'
		public Keyword getDaysKeyword_3() { return cDaysKeyword_3; }
		
		//'weeks'
		public Keyword getWeeksKeyword_4() { return cWeeksKeyword_4; }
		
		//'months'
		public Keyword getMonthsKeyword_5() { return cMonthsKeyword_5; }
		
		//'years'
		public Keyword getYearsKeyword_6() { return cYearsKeyword_6; }
	}
	public class IntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.Interval");
		private final Assignment cIntervalExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIntervalExpressionIntervalExpressionParserRuleCall_0 = (RuleCall)cIntervalExpressionAssignment.eContents().get(0);
		
		//Interval:
		//    intervalExpression=IntervalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//intervalExpression=IntervalExpression
		public Assignment getIntervalExpressionAssignment() { return cIntervalExpressionAssignment; }
		
		//IntervalExpression
		public RuleCall getIntervalExpressionIntervalExpressionParserRuleCall_0() { return cIntervalExpressionIntervalExpressionParserRuleCall_0; }
	}
	public class IntervalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.IntervalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntervalFunctionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cIntervalKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cArg1Assignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cArg1PointExpressionParserRuleCall_0_3_0 = (RuleCall)cArg1Assignment_0_3.eContents().get(0);
		private final Keyword cCommaKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cArg2Assignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cArg2PointExpressionParserRuleCall_0_5_0 = (RuleCall)cArg2Assignment_0_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSituationExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSituationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSituationSituationParserRuleCall_1_1_0 = (RuleCall)cSituationAssignment_1_1.eContents().get(0);
		
		//IntervalExpression:
		//    {IntervalFunction} 'Interval' '(' arg1=PointExpression ',' arg2=PointExpression ')' |
		//    {SituationExpression} situation=Situation;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntervalFunction} 'Interval' '(' arg1=PointExpression ',' arg2=PointExpression ')' |
		//{SituationExpression} situation=Situation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntervalFunction} 'Interval' '(' arg1=PointExpression ',' arg2=PointExpression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntervalFunction}
		public Action getIntervalFunctionAction_0_0() { return cIntervalFunctionAction_0_0; }
		
		//'Interval'
		public Keyword getIntervalKeyword_0_1() { return cIntervalKeyword_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//arg1=PointExpression
		public Assignment getArg1Assignment_0_3() { return cArg1Assignment_0_3; }
		
		//PointExpression
		public RuleCall getArg1PointExpressionParserRuleCall_0_3_0() { return cArg1PointExpressionParserRuleCall_0_3_0; }
		
		//','
		public Keyword getCommaKeyword_0_4() { return cCommaKeyword_0_4; }
		
		//arg2=PointExpression
		public Assignment getArg2Assignment_0_5() { return cArg2Assignment_0_5; }
		
		//PointExpression
		public RuleCall getArg2PointExpressionParserRuleCall_0_5_0() { return cArg2PointExpressionParserRuleCall_0_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_6() { return cRightParenthesisKeyword_0_6; }
		
		//{SituationExpression} situation=Situation
		public Group getGroup_1() { return cGroup_1; }
		
		//{SituationExpression}
		public Action getSituationExpressionAction_1_0() { return cSituationExpressionAction_1_0; }
		
		//situation=Situation
		public Assignment getSituationAssignment_1_1() { return cSituationAssignment_1_1; }
		
		//Situation
		public RuleCall getSituationSituationParserRuleCall_1_1_0() { return cSituationSituationParserRuleCall_1_1_0; }
	}
	public class SituationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.Situation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObligationStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContractStateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPowerStateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Situation:
		//    ObligationState |
		//    ContractState |
		//    PowerState;
		@Override public ParserRule getRule() { return rule; }
		
		//ObligationState |
		//ContractState |
		//PowerState
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ObligationState
		public RuleCall getObligationStateParserRuleCall_0() { return cObligationStateParserRuleCall_0; }
		
		//ContractState
		public RuleCall getContractStateParserRuleCall_1() { return cContractStateParserRuleCall_1; }
		
		//PowerState
		public RuleCall getPowerStateParserRuleCall_2() { return cPowerStateParserRuleCall_2; }
	}
	public class PowerStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.PowerState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStateNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStateNamePowerStateNameParserRuleCall_0_0 = (RuleCall)cStateNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPowersKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPowerVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPowerVariablePowerCrossReference_3_0 = (CrossReference)cPowerVariableAssignment_3.eContents().get(0);
		private final RuleCall cPowerVariablePowerIDTerminalRuleCall_3_0_1 = (RuleCall)cPowerVariablePowerCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PowerState:
		//    stateName=PowerStateName '(' 'powers.' powerVariable=[Power] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//stateName=PowerStateName '(' 'powers.' powerVariable=[Power] ')'
		public Group getGroup() { return cGroup; }
		
		//stateName=PowerStateName
		public Assignment getStateNameAssignment_0() { return cStateNameAssignment_0; }
		
		//PowerStateName
		public RuleCall getStateNamePowerStateNameParserRuleCall_0_0() { return cStateNamePowerStateNameParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'powers.'
		public Keyword getPowersKeyword_2() { return cPowersKeyword_2; }
		
		//powerVariable=[Power]
		public Assignment getPowerVariableAssignment_3() { return cPowerVariableAssignment_3; }
		
		//[Power]
		public CrossReference getPowerVariablePowerCrossReference_3_0() { return cPowerVariablePowerCrossReference_3_0; }
		
		//ID
		public RuleCall getPowerVariablePowerIDTerminalRuleCall_3_0_1() { return cPowerVariablePowerIDTerminalRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class PowerStateNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.PowerStateName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUnsuccessfulTerminationKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cActiveKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInEffectKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cSuspensionKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cSuccessfulTerminationKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//PowerStateName:
		//    'Create' | 'UnsuccessfulTermination' | 'Active' | 'InEffect' | 'Suspension' | 'SuccessfulTermination';
		@Override public ParserRule getRule() { return rule; }
		
		//'Create' | 'UnsuccessfulTermination' | 'Active' | 'InEffect' | 'Suspension' | 'SuccessfulTermination'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//'UnsuccessfulTermination'
		public Keyword getUnsuccessfulTerminationKeyword_1() { return cUnsuccessfulTerminationKeyword_1; }
		
		//'Active'
		public Keyword getActiveKeyword_2() { return cActiveKeyword_2; }
		
		//'InEffect'
		public Keyword getInEffectKeyword_3() { return cInEffectKeyword_3; }
		
		//'Suspension'
		public Keyword getSuspensionKeyword_4() { return cSuspensionKeyword_4; }
		
		//'SuccessfulTermination'
		public Keyword getSuccessfulTerminationKeyword_5() { return cSuccessfulTerminationKeyword_5; }
	}
	public class ObligationStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.ObligationState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStateNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStateNameObligationStateNameParserRuleCall_0_0 = (RuleCall)cStateNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cObligationsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cObligationVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cObligationVariableObligationCrossReference_3_0 = (CrossReference)cObligationVariableAssignment_3.eContents().get(0);
		private final RuleCall cObligationVariableObligationIDTerminalRuleCall_3_0_1 = (RuleCall)cObligationVariableObligationCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ObligationState:
		//    stateName=ObligationStateName '(' 'obligations.' obligationVariable=[Obligation] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//stateName=ObligationStateName '(' 'obligations.' obligationVariable=[Obligation] ')'
		public Group getGroup() { return cGroup; }
		
		//stateName=ObligationStateName
		public Assignment getStateNameAssignment_0() { return cStateNameAssignment_0; }
		
		//ObligationStateName
		public RuleCall getStateNameObligationStateNameParserRuleCall_0_0() { return cStateNameObligationStateNameParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'obligations.'
		public Keyword getObligationsKeyword_2() { return cObligationsKeyword_2; }
		
		//obligationVariable=[Obligation]
		public Assignment getObligationVariableAssignment_3() { return cObligationVariableAssignment_3; }
		
		//[Obligation]
		public CrossReference getObligationVariableObligationCrossReference_3_0() { return cObligationVariableObligationCrossReference_3_0; }
		
		//ID
		public RuleCall getObligationVariableObligationIDTerminalRuleCall_3_0_1() { return cObligationVariableObligationIDTerminalRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ObligationStateNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.ObligationStateName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDischargeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cActiveKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInEffectKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cSuspensionKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cViolationKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cFulfillmentKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cUnsuccessfulTerminationKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//ObligationStateName:
		//    'Create' | 'Discharge' | 'Active' | 'InEffect' | 'Suspension' | 'Violation' | 'Fulfillment' | 'UnsuccessfulTermination';
		@Override public ParserRule getRule() { return rule; }
		
		//'Create' | 'Discharge' | 'Active' | 'InEffect' | 'Suspension' | 'Violation' | 'Fulfillment' | 'UnsuccessfulTermination'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//'Discharge'
		public Keyword getDischargeKeyword_1() { return cDischargeKeyword_1; }
		
		//'Active'
		public Keyword getActiveKeyword_2() { return cActiveKeyword_2; }
		
		//'InEffect'
		public Keyword getInEffectKeyword_3() { return cInEffectKeyword_3; }
		
		//'Suspension'
		public Keyword getSuspensionKeyword_4() { return cSuspensionKeyword_4; }
		
		//'Violation'
		public Keyword getViolationKeyword_5() { return cViolationKeyword_5; }
		
		//'Fulfillment'
		public Keyword getFulfillmentKeyword_6() { return cFulfillmentKeyword_6; }
		
		//'UnsuccessfulTermination'
		public Keyword getUnsuccessfulTerminationKeyword_7() { return cUnsuccessfulTerminationKeyword_7; }
	}
	public class ContractStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.ContractState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStateNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStateNameContractStateNameParserRuleCall_0_0 = (RuleCall)cStateNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSelfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ContractState:
		//    stateName=ContractStateName '(' 'self' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//stateName=ContractStateName '(' 'self' ')'
		public Group getGroup() { return cGroup; }
		
		//stateName=ContractStateName
		public Assignment getStateNameAssignment_0() { return cStateNameAssignment_0; }
		
		//ContractStateName
		public RuleCall getStateNameContractStateNameParserRuleCall_0_0() { return cStateNameContractStateNameParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'self'
		public Keyword getSelfKeyword_2() { return cSelfKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ContractStateNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ca.uottawa.csmlab.symboleo.Symboleo.ContractStateName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFormKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUnAssignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cInEffectKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSuspensionKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cRescissionKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cSuccessfulTerminationKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cUnsuccessfulTerminationKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cActiveKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//ContractStateName:
		//    'Form' | 'UnAssign' | 'InEffect' | 'Suspension' | 'Rescission' | 'SuccessfulTermination' | 'UnsuccessfulTermination' | 'Active';
		@Override public ParserRule getRule() { return rule; }
		
		//'Form' | 'UnAssign' | 'InEffect' | 'Suspension' | 'Rescission' | 'SuccessfulTermination' | 'UnsuccessfulTermination' | 'Active'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Form'
		public Keyword getFormKeyword_0() { return cFormKeyword_0; }
		
		//'UnAssign'
		public Keyword getUnAssignKeyword_1() { return cUnAssignKeyword_1; }
		
		//'InEffect'
		public Keyword getInEffectKeyword_2() { return cInEffectKeyword_2; }
		
		//'Suspension'
		public Keyword getSuspensionKeyword_3() { return cSuspensionKeyword_3; }
		
		//'Rescission'
		public Keyword getRescissionKeyword_4() { return cRescissionKeyword_4; }
		
		//'SuccessfulTermination'
		public Keyword getSuccessfulTerminationKeyword_5() { return cSuccessfulTerminationKeyword_5; }
		
		//'UnsuccessfulTermination'
		public Keyword getUnsuccessfulTerminationKeyword_6() { return cUnsuccessfulTerminationKeyword_6; }
		
		//'Active'
		public Keyword getActiveKeyword_7() { return cActiveKeyword_7; }
	}
	
	
	private final ModelElements pModel;
	private final DomainTypeElements pDomainType;
	private final AliasElements pAlias;
	private final EnumerationElements pEnumeration;
	private final EnumItemElements pEnumItem;
	private final RegularTypeElements pRegularType;
	private final AttributeElements pAttribute;
	private final BaseTypeElements pBaseType;
	private final OntologyTypeElements pOntologyType;
	private final AttributeModifierElements pAttributeModifier;
	private final ParameterElements pParameter;
	private final ParameterTypeElements pParameterType;
	private final VariableElements pVariable;
	private final OAssignmentElements pOAssignment;
	private final VariableDotExpressionElements pVariableDotExpression;
	private final VariableRefElements pVariableRef;
	private final AssignmentElements pAssignment;
	private final DoubleElements pDouble;
	private final DateElements pDate;
	private final ExpressionElements pExpression;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final AtomicExpressionElements pAtomicExpression;
	private final FunctionCallElements pFunctionCall;
	private final MathFunctionElements pMathFunction;
	private final StringFunctionElements pStringFunction;
	private final DateFunctionElements pDateFunction;
	private final ObligationElements pObligation;
	private final PowerElements pPower;
	private final PowerFunctionElements pPowerFunction;
	private final PropositionElements pProposition;
	private final POrElements pPOr;
	private final PAndElements pPAnd;
	private final PEqualityElements pPEquality;
	private final PComparisonElements pPComparison;
	private final PAtomicExpressionElements pPAtomicExpression;
	private final PredicateFunctionElements pPredicateFunction;
	private final OtherFunctionElements pOtherFunction;
	private final EventElements pEvent;
	private final VariableEventElements pVariableEvent;
	private final PowerEventElements pPowerEvent;
	private final PowerEventNameElements pPowerEventName;
	private final ObligationEventElements pObligationEvent;
	private final ObligationEventNameElements pObligationEventName;
	private final ContractEventElements pContractEvent;
	private final ContractEventNameElements pContractEventName;
	private final PointElements pPoint;
	private final PointExpressionElements pPointExpression;
	private final PointFunctionElements pPointFunction;
	private final PointFunctionNameElements pPointFunctionName;
	private final PointAtomElements pPointAtom;
	private final TimevalueElements pTimevalue;
	private final TimeUnitElements pTimeUnit;
	private final IntervalElements pInterval;
	private final IntervalExpressionElements pIntervalExpression;
	private final SituationElements pSituation;
	private final PowerStateElements pPowerState;
	private final PowerStateNameElements pPowerStateName;
	private final ObligationStateElements pObligationState;
	private final ObligationStateNameElements pObligationStateName;
	private final ContractStateElements pContractState;
	private final ContractStateNameElements pContractStateName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SymboleoGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDomainType = new DomainTypeElements();
		this.pAlias = new AliasElements();
		this.pEnumeration = new EnumerationElements();
		this.pEnumItem = new EnumItemElements();
		this.pRegularType = new RegularTypeElements();
		this.pAttribute = new AttributeElements();
		this.pBaseType = new BaseTypeElements();
		this.pOntologyType = new OntologyTypeElements();
		this.pAttributeModifier = new AttributeModifierElements();
		this.pParameter = new ParameterElements();
		this.pParameterType = new ParameterTypeElements();
		this.pVariable = new VariableElements();
		this.pOAssignment = new OAssignmentElements();
		this.pVariableDotExpression = new VariableDotExpressionElements();
		this.pVariableRef = new VariableRefElements();
		this.pAssignment = new AssignmentElements();
		this.pDouble = new DoubleElements();
		this.pDate = new DateElements();
		this.pExpression = new ExpressionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pAtomicExpression = new AtomicExpressionElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pMathFunction = new MathFunctionElements();
		this.pStringFunction = new StringFunctionElements();
		this.pDateFunction = new DateFunctionElements();
		this.pObligation = new ObligationElements();
		this.pPower = new PowerElements();
		this.pPowerFunction = new PowerFunctionElements();
		this.pProposition = new PropositionElements();
		this.pPOr = new POrElements();
		this.pPAnd = new PAndElements();
		this.pPEquality = new PEqualityElements();
		this.pPComparison = new PComparisonElements();
		this.pPAtomicExpression = new PAtomicExpressionElements();
		this.pPredicateFunction = new PredicateFunctionElements();
		this.pOtherFunction = new OtherFunctionElements();
		this.pEvent = new EventElements();
		this.pVariableEvent = new VariableEventElements();
		this.pPowerEvent = new PowerEventElements();
		this.pPowerEventName = new PowerEventNameElements();
		this.pObligationEvent = new ObligationEventElements();
		this.pObligationEventName = new ObligationEventNameElements();
		this.pContractEvent = new ContractEventElements();
		this.pContractEventName = new ContractEventNameElements();
		this.pPoint = new PointElements();
		this.pPointExpression = new PointExpressionElements();
		this.pPointFunction = new PointFunctionElements();
		this.pPointFunctionName = new PointFunctionNameElements();
		this.pPointAtom = new PointAtomElements();
		this.pTimevalue = new TimevalueElements();
		this.pTimeUnit = new TimeUnitElements();
		this.pInterval = new IntervalElements();
		this.pIntervalExpression = new IntervalExpressionElements();
		this.pSituation = new SituationElements();
		this.pPowerState = new PowerStateElements();
		this.pPowerStateName = new PowerStateNameElements();
		this.pObligationState = new ObligationStateElements();
		this.pObligationStateName = new ObligationStateNameElements();
		this.pContractState = new ContractStateElements();
		this.pContractStateName = new ContractStateNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ca.uottawa.csmlab.symboleo.Symboleo".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    'Domain' domainName=ID
	//    (domainTypes+=DomainType ';')+
	//    'endDomain'
	//    ('TimeGranularity' 'is' timeUnits=TimeUnit)?
	//    'Contract' contractName=ID '(' (parameters+=Parameter ',')+ (parameters+=Parameter) ')'
	//    ('Declarations' (variables+=Variable ';')*)?
	//    ('Preconditions' (preconditions+=Proposition ';')*)?
	//    ('Postconditions' (postconditions+=Proposition ';')*)?
	//    ('Obligations' (obligations+=Obligation ';')*)+
	//    ('Surviving' 'Obligations' (survivingObligations+=Obligation ';')*)?
	//    ('Powers' (powers+=Power ';')*)?
	//    ('Constraints' (constraints+=Proposition ';')*)?
	//    'endContract';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//DomainType:
	//    Alias | RegularType | Enumeration;
	public DomainTypeElements getDomainTypeAccess() {
		return pDomainType;
	}
	
	public ParserRule getDomainTypeRule() {
		return getDomainTypeAccess().getRule();
	}
	
	//Alias:
	//    name=ID 'isA' type=BaseType;
	public AliasElements getAliasAccess() {
		return pAlias;
	}
	
	public ParserRule getAliasRule() {
		return getAliasAccess().getRule();
	}
	
	//Enumeration:
	//    name=ID 'isAn' 'Enumeration' '(' (enumerationItems+=EnumItem ',')* (enumerationItems+=EnumItem) ')';
	public EnumerationElements getEnumerationAccess() {
		return pEnumeration;
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}
	
	//EnumItem:
	//    name=ID;
	public EnumItemElements getEnumItemAccess() {
		return pEnumItem;
	}
	
	public ParserRule getEnumItemRule() {
		return getEnumItemAccess().getRule();
	}
	
	//// TODO not extend itself, prevent cycles
	//RegularType:
	//    name=ID ('isA' | 'isAn') ontologyType=OntologyType ('with' (attributes+=Attribute ',')* (attributes+=Attribute))? |
	//    name=ID ('isA' | 'isAn') regularType=[RegularType] ('with' (attributes+=Attribute ',')* (attributes+=Attribute))?;
	public RegularTypeElements getRegularTypeAccess() {
		return pRegularType;
	}
	
	public ParserRule getRegularTypeRule() {
		return getRegularTypeAccess().getRule();
	}
	
	//Attribute:
	//    attributeModifier=AttributeModifier? name=ID ':' baseType=BaseType |
	//    attributeModifier=AttributeModifier? name=ID ':' domainType=[DomainType];
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//BaseType:
	//    name=("Number" | "String" | "Date" | "Boolean");
	public BaseTypeElements getBaseTypeAccess() {
		return pBaseType;
	}
	
	public ParserRule getBaseTypeRule() {
		return getBaseTypeAccess().getRule();
	}
	
	//OntologyType:
	//    name=("Asset" | "Event" | "Role" | "Contract");
	public OntologyTypeElements getOntologyTypeAccess() {
		return pOntologyType;
	}
	
	public ParserRule getOntologyTypeRule() {
		return getOntologyTypeAccess().getRule();
	}
	
	//AttributeModifier:
	//    name=('Env');
	public AttributeModifierElements getAttributeModifierAccess() {
		return pAttributeModifier;
	}
	
	public ParserRule getAttributeModifierRule() {
		return getAttributeModifierAccess().getRule();
	}
	
	//Parameter:
	//    name=ID ':' type=ParameterType;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//ParameterType:
	//    baseType=BaseType |
	//    domainType=[DomainType];
	public ParameterTypeElements getParameterTypeAccess() {
		return pParameterType;
	}
	
	public ParserRule getParameterTypeRule() {
		return getParameterTypeAccess().getRule();
	}
	
	//Variable:
	//    name=ID ':' type=[RegularType] ('with' attributes+=Assignment (',' attributes+=Assignment)*)?;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	////Assignment:
	////    {AssignVariable} name=ID ':=' value=VariableDotExpression |
	////    AssignmentB;
	//// Assign should be used for ENV parameters or parameters of the contract. any variable initiate in the declaration are
	////can not be used because the initial value will be assigned to the variable each time you trigger any events.
	//OAssignment:
	//    {OAssignExpression} name2= VariableDotExpression op=":=" (value=Expression);
	public OAssignmentElements getOAssignmentAccess() {
		return pOAssignment;
	}
	
	public ParserRule getOAssignmentRule() {
		return getOAssignmentAccess().getRule();
	}
	
	//VariableDotExpression returns Ref:
	//    VariableRef ({VariableDotExpression.ref=current} "." tail=[Attribute])*;
	public VariableDotExpressionElements getVariableDotExpressionAccess() {
		return pVariableDotExpression;
	}
	
	public ParserRule getVariableDotExpressionRule() {
		return getVariableDotExpressionAccess().getRule();
	}
	
	//VariableRef returns Ref:
	//    {VariableRef} variable=ID;
	public VariableRefElements getVariableRefAccess() {
		return pVariableRef;
	}
	
	public ParserRule getVariableRefRule() {
		return getVariableRefAccess().getRule();
	}
	
	//Assignment:
	//    {AssignExpression} name=ID ':=' value=Expression;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Double returns ecore::EDouble:
	//    INT '.' INT;
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}
	
	//Date returns ecore::EDate:
	//  'Date' '(' STRING ')';
	public DateElements getDateAccess() {
		return pDate;
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}
	
	//Expression: Or;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Or returns Expression:
	//    And ({Or.left=current} "or" right=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And returns Expression:
	//    Equality ({And.left=current} "and" right=Equality)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equality returns Expression:
	//    Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Comparison returns Expression:
	//    Addition ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=Addition)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//Addition returns Expression:
	//    Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication returns Expression:
	//    PrimaryExpression (({Multi.left=current} '*' | {Div.left=current} '/') right=PrimaryExpression)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//PrimaryExpression returns Expression:
	//    {PrimaryExpressionRecursive} '(' inner=Expression ')' |
	//    {PrimaryExpressionFunctionCall} function=FunctionCall |
	//    {NegatedPrimaryExpression} "not" expression=PrimaryExpression |
	//    AtomicExpression
	//;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//AtomicExpression returns Expression:
	//    {AtomicExpressionTrue} value="true" |
	//    {AtomicExpressionFalse} value="false" |
	//    {AtomicExpressionDouble} value=Double |
	//    {AtomicExpressionInt} value=INT |
	//    {AtomicExpressionDate} value= Date |
	//    {AtomicExpressionEnum} enumeration=[Enumeration]"("enumItem=[EnumItem]")" |
	//    {AtomicExpressionString} value=STRING |
	//    {AtomicExpressionParameter} value=VariableDotExpression
	//;
	public AtomicExpressionElements getAtomicExpressionAccess() {
		return pAtomicExpression;
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}
	
	//FunctionCall:
	//    MathFunction | StringFunction | DateFunction
	//;
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//MathFunction returns FunctionCall:
	//  {TwoArgMathFunction} name=('Math.pow') '(' arg1=Expression ',' arg2=Expression ')' |
	//  {OneArgMathFunction} name=('Math.abs'|'Math.floor'|'Math.cbrt'
	//    |'Math.ceil'|'Math.exp'|'Math.sign'|'Math.sqrt'
	//  ) '(' arg1=Expression ')';
	public MathFunctionElements getMathFunctionAccess() {
		return pMathFunction;
	}
	
	public ParserRule getMathFunctionRule() {
		return getMathFunctionAccess().getRule();
	}
	
	//StringFunction returns FunctionCall:
	//  {ThreeArgStringFunction} name=('String.substring'|'String.replaceAll') '(' arg1=Expression ',' arg2=Expression ',' arg3=Expression ')' |
	//  {TwoArgStringFunction} name=('String.concat') '(' arg1=Expression ',' arg2=Expression ')' |
	//  {OneArgStringFunction} name=('String.toLowerCase'|'String.toUpperCase'|'String.trimEnd'|'String.trimStart'|'String.trim') '(' arg1=Expression ')';
	public StringFunctionElements getStringFunctionAccess() {
		return pStringFunction;
	}
	
	public ParserRule getStringFunctionRule() {
		return getStringFunctionAccess().getRule();
	}
	
	//DateFunction returns FunctionCall:
	//    {ThreeArgDateFunction} name='Date.add' '(' arg1=Expression ',' value=Expression ',' timeUnit=TimeUnit  ')'
	//;
	public DateFunctionElements getDateFunctionAccess() {
		return pDateFunction;
	}
	
	public ParserRule getDateFunctionRule() {
		return getDateFunctionAccess().getRule();
	}
	
	//Obligation:
	//    name=ID ':' (trigger=Proposition '->')? ('O' | 'Obligation') '(' debtor=VariableDotExpression ',' creditor=VariableDotExpression ',' antecedent=Proposition ',' consequent=Proposition ')';
	public ObligationElements getObligationAccess() {
		return pObligation;
	}
	
	public ParserRule getObligationRule() {
		return getObligationAccess().getRule();
	}
	
	//Power:
	//    name=ID ':' (trigger=Proposition '->')? ('P' | 'Power') '(' creditor=VariableDotExpression ',' debtor=VariableDotExpression ',' antecedent=Proposition ',' consequent=PowerFunction ')';
	public PowerElements getPowerAccess() {
		return pPower;
	}
	
	public ParserRule getPowerRule() {
		return getPowerAccess().getRule();
	}
	
	//PowerFunction returns PowerFunction:
	//    {PFObligationSuspended} action = 'Suspended' '(' 'obligations.' norm = [Obligation] ')' |
	//    {PFObligationResumed} action = 'Resumed' '(' 'obligations.' norm = [Obligation] ')' |
	//    {PFObligationDischarged} action = 'Discharged' '(' 'obligations.' norm = [Obligation] ')' |
	//    {PFObligationTerminated} action = 'Terminated' '(' 'obligations.' norm = [Obligation] ')' |
	//    {PFObligationTriggered} action = 'Triggered' '(' 'obligations.' norm = [Obligation] ')' |
	//    //{PFPowerSuspended} action = 'Suspended_' '(' norm = [Power] ')' |
	//    //{PFPowerResumed} action = 'Resumed_' '(' norm = [Power] ')' |
	//    //{PFPowerTerminated} action = 'Terminated_' '(' norm = [Power] ')' |
	//    {PFContractSuspended} action = 'Suspended' '(' norm = 'self' ')' |
	//    {PFContractResumed} action = 'Resumed' '(' norm = 'self' ')' |
	//    {PFContractTerminated} action = 'Terminated' '(' norm = 'self' ')';
	public PowerFunctionElements getPowerFunctionAccess() {
		return pPowerFunction;
	}
	
	public ParserRule getPowerFunctionRule() {
		return getPowerFunctionAccess().getRule();
	}
	
	//Proposition: POr;
	public PropositionElements getPropositionAccess() {
		return pProposition;
	}
	
	public ParserRule getPropositionRule() {
		return getPropositionAccess().getRule();
	}
	
	//POr returns Proposition:
	//    PAnd ({POr.left=current} "or" right=PAnd)*;
	public POrElements getPOrAccess() {
		return pPOr;
	}
	
	public ParserRule getPOrRule() {
		return getPOrAccess().getRule();
	}
	
	//PAnd returns Proposition:
	//    PEquality ({PAnd.left=current} "and" right=PEquality)*;
	public PAndElements getPAndAccess() {
		return pPAnd;
	}
	
	public ParserRule getPAndRule() {
		return getPAndAccess().getRule();
	}
	
	//PEquality returns Proposition:
	//    PComparison ({PEquality.left=current} op=("==" | "!=") right=PComparison)*;
	public PEqualityElements getPEqualityAccess() {
		return pPEquality;
	}
	
	public ParserRule getPEqualityRule() {
		return getPEqualityAccess().getRule();
	}
	
	//PComparison returns Proposition:
	//    PAtomicExpression ({PComparison.left=current} op=(">=" | "<=" | ">" | "<") right=PAtomicExpression)*;
	public PComparisonElements getPComparisonAccess() {
		return pPComparison;
	}
	
	public ParserRule getPComparisonRule() {
		return getPComparisonAccess().getRule();
	}
	
	//PAtomicExpression returns Proposition:
	//    {PAtomRecursive} '(' inner=Proposition ')' |
	//    {NegatedPAtom} 'not' negated=PAtomicExpression |
	//    {PAtomPredicate} predicateFunction=PredicateFunction |
	//    {PAtomFunction} function=OtherFunction |
	//  {PAtomEnum} enumeration=[Enumeration]"("enumItem=[EnumItem]")" |
	//    {PAtomVariable} variable=VariableDotExpression |
	//    {PAtomPredicateTrueLiteral} value='true' |
	//    {PAtomPredicateFalseLiteral} value='false' |
	//    {PAtomDoubleLiteral} value=Double |
	//    {PAtomIntLiteral} value=INT |
	//    {PAtomStringLiteral} value=STRING |
	//    {PAtomDateLiteral} value= Date
	//    ;
	public PAtomicExpressionElements getPAtomicExpressionAccess() {
		return pPAtomicExpression;
	}
	
	public ParserRule getPAtomicExpressionRule() {
		return getPAtomicExpressionAccess().getRule();
	}
	
	//PredicateFunction:
	//    {PredicateFunctionHappens} name='Happens' '(' event=Event ')' |
	//    {PredicateFunctionWHappensBefore} name='WhappensBefore' '(' event=Event ',' point=Point ')' |
	//    {PredicateFunctionSHappensBefore} name='ShappensBefore' '(' event=Event ',' point=Point ')' |
	//    {PredicateFunctionHappensWithin} name='HappensWithin' '(' event=Event ',' interval=Interval ')'|
	//    {PredicateFunctionWHappensBeforeEvent} name='WhappensBeforeE' '(' event1=Event ',' event2=Event ')' |
	//    {PredicateFunctionSHappensBeforeEvent} name='ShappensBeforeE' '(' event1=Event ',' event2=Event ')' |
	//    {PredicateFunctionHappensAfter} name='HappensAfter' '(' event=Event ',' point=Point ')' |
	//    {PredicateFunctionOccurs} name='Occurs' '(' situation=Situation ',' interval=Interval ')' |
	//    {PredicateFunctionAssignment} name='HappensAssign' '(' event=Event ',' (assignment+=OAssignment (';' assignment+=OAssignment )*)?')' |
	//    {PredicateFunctionAssignmentOnly} name='Assign' '(' (assignment+=OAssignment (';' assignment+=OAssignment )*)?')'
	//        ;
	public PredicateFunctionElements getPredicateFunctionAccess() {
		return pPredicateFunction;
	}
	
	public ParserRule getPredicateFunctionRule() {
		return getPredicateFunctionAccess().getRule();
	}
	
	//                                              //('with' attributes+=Assignment (',' attributes+=Assignment)*)?;
	//    //{PredicateFunctionAssignmentOnly} name='Assign' '(' (assignment+=OAssignment)* (';' assignment+=OAssignment )?')'
	//OtherFunction:
	//  {PredicateFunctionIsEqual} name='IsEqual' '(' arg1=ID ',' arg2=ID ')' |
	//  {PredicateFunctionIsOwner} name='IsOwner' '(' arg1=ID ',' arg2=ID ')' |
	//  {PredicateFunctionCannotBeAssigned} name='CannotBeAssigned' '(' arg1=ID ')'
	//  ;
	public OtherFunctionElements getOtherFunctionAccess() {
		return pOtherFunction;
	}
	
	public ParserRule getOtherFunctionRule() {
		return getOtherFunctionAccess().getRule();
	}
	
	//Event:
	//    VariableEvent |
	//    ObligationEvent |
	//    ContractEvent |
	//    PowerEvent;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//VariableEvent returns Event:
	//    {VariableEvent} variable=VariableDotExpression
	//;
	public VariableEventElements getVariableEventAccess() {
		return pVariableEvent;
	}
	
	public ParserRule getVariableEventRule() {
		return getVariableEventAccess().getRule();
	}
	
	//PowerEvent returns Event:
	//    {PowerEvent} eventName=PowerEventName '(' 'powers.' powerVariable=[Power] ')';
	public PowerEventElements getPowerEventAccess() {
		return pPowerEvent;
	}
	
	public ParserRule getPowerEventRule() {
		return getPowerEventAccess().getRule();
	}
	
	//PowerEventName:
	//    'Triggered' | 'Activated' | 'Suspended' | 'Resumed' | 'Exerted' | 'Expired' | 'Terminated';
	public PowerEventNameElements getPowerEventNameAccess() {
		return pPowerEventName;
	}
	
	public ParserRule getPowerEventNameRule() {
		return getPowerEventNameAccess().getRule();
	}
	
	//ObligationEvent returns Event:
	//    {ObligationEvent} eventName=ObligationEventName '(' 'obligations.' obligationVariable=[Obligation] ')';
	public ObligationEventElements getObligationEventAccess() {
		return pObligationEvent;
	}
	
	public ParserRule getObligationEventRule() {
		return getObligationEventAccess().getRule();
	}
	
	//ObligationEventName:
	//    'Triggered' | 'Activated' | 'Suspended' | 'Resumed' | 'Discharged' | 'Expired' | 'Fulfilled' | 'Violated' | 'Terminated';
	public ObligationEventNameElements getObligationEventNameAccess() {
		return pObligationEventName;
	}
	
	public ParserRule getObligationEventNameRule() {
		return getObligationEventNameAccess().getRule();
	}
	
	//ContractEvent returns Event:
	//    {ContractEvent} eventName=ContractEventName '(' 'self' ')';
	public ContractEventElements getContractEventAccess() {
		return pContractEvent;
	}
	
	public ParserRule getContractEventRule() {
		return getContractEventAccess().getRule();
	}
	
	//ContractEventName:
	//    'Activated' | 'Suspended' | 'Resumed' | 'FulfilledObligations' | 'RevokedParty' | 'AssignedParty' | 'Terminated' | 'Rescinded';
	public ContractEventNameElements getContractEventNameAccess() {
		return pContractEventName;
	}
	
	public ParserRule getContractEventNameRule() {
		return getContractEventNameAccess().getRule();
	}
	
	//Point:
	//    pointExpression=PointExpression;
	public PointElements getPointAccess() {
		return pPoint;
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}
	
	//PointExpression:
	//    PointFunction |
	//    PointAtom;
	public PointExpressionElements getPointExpressionAccess() {
		return pPointExpression;
	}
	
	public ParserRule getPointExpressionRule() {
		return getPointExpressionAccess().getRule();
	}
	
	//PointFunction returns PointExpression:
	//    {PointFunction} name=PointFunctionName '(' arg=PointExpression ',' value=Timevalue ',' timeUnit=TimeUnit ')';
	public PointFunctionElements getPointFunctionAccess() {
		return pPointFunction;
	}
	
	public ParserRule getPointFunctionRule() {
		return getPointFunctionAccess().getRule();
	}
	
	//PointFunctionName:
	//    'Date.add';
	public PointFunctionNameElements getPointFunctionNameAccess() {
		return pPointFunctionName;
	}
	
	public ParserRule getPointFunctionNameRule() {
		return getPointFunctionNameAccess().getRule();
	}
	
	//PointAtom returns PointExpression:
	//    {PointAtomParameterDotExpression} variable=VariableDotExpression |
	//    {PointAtomObligationEvent} obligationEvent=ObligationEvent |
	//    {PointAtomContractEvent} contractEvent=ContractEvent |
	//    {PointAtomPowerEvent} powerEvent=PowerEvent;
	public PointAtomElements getPointAtomAccess() {
		return pPointAtom;
	}
	
	public ParserRule getPointAtomRule() {
		return getPointAtomAccess().getRule();
	}
	
	//Timevalue:
	//    {TimevalueInt} value=INT |
	//    {TimevalueVariable} variable=VariableDotExpression
	//;
	public TimevalueElements getTimevalueAccess() {
		return pTimevalue;
	}
	
	public ParserRule getTimevalueRule() {
		return getTimevalueAccess().getRule();
	}
	
	//TimeUnit:
	//    'seconds' | 'minutes' | 'hours' | 'days' | 'weeks' | 'months' | 'years';
	public TimeUnitElements getTimeUnitAccess() {
		return pTimeUnit;
	}
	
	public ParserRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}
	
	//Interval:
	//    intervalExpression=IntervalExpression;
	public IntervalElements getIntervalAccess() {
		return pInterval;
	}
	
	public ParserRule getIntervalRule() {
		return getIntervalAccess().getRule();
	}
	
	//IntervalExpression:
	//    {IntervalFunction} 'Interval' '(' arg1=PointExpression ',' arg2=PointExpression ')' |
	//    {SituationExpression} situation=Situation;
	public IntervalExpressionElements getIntervalExpressionAccess() {
		return pIntervalExpression;
	}
	
	public ParserRule getIntervalExpressionRule() {
		return getIntervalExpressionAccess().getRule();
	}
	
	//Situation:
	//    ObligationState |
	//    ContractState |
	//    PowerState;
	public SituationElements getSituationAccess() {
		return pSituation;
	}
	
	public ParserRule getSituationRule() {
		return getSituationAccess().getRule();
	}
	
	//PowerState:
	//    stateName=PowerStateName '(' 'powers.' powerVariable=[Power] ')';
	public PowerStateElements getPowerStateAccess() {
		return pPowerState;
	}
	
	public ParserRule getPowerStateRule() {
		return getPowerStateAccess().getRule();
	}
	
	//PowerStateName:
	//    'Create' | 'UnsuccessfulTermination' | 'Active' | 'InEffect' | 'Suspension' | 'SuccessfulTermination';
	public PowerStateNameElements getPowerStateNameAccess() {
		return pPowerStateName;
	}
	
	public ParserRule getPowerStateNameRule() {
		return getPowerStateNameAccess().getRule();
	}
	
	//ObligationState:
	//    stateName=ObligationStateName '(' 'obligations.' obligationVariable=[Obligation] ')';
	public ObligationStateElements getObligationStateAccess() {
		return pObligationState;
	}
	
	public ParserRule getObligationStateRule() {
		return getObligationStateAccess().getRule();
	}
	
	//ObligationStateName:
	//    'Create' | 'Discharge' | 'Active' | 'InEffect' | 'Suspension' | 'Violation' | 'Fulfillment' | 'UnsuccessfulTermination';
	public ObligationStateNameElements getObligationStateNameAccess() {
		return pObligationStateName;
	}
	
	public ParserRule getObligationStateNameRule() {
		return getObligationStateNameAccess().getRule();
	}
	
	//ContractState:
	//    stateName=ContractStateName '(' 'self' ')';
	public ContractStateElements getContractStateAccess() {
		return pContractState;
	}
	
	public ParserRule getContractStateRule() {
		return getContractStateAccess().getRule();
	}
	
	//ContractStateName:
	//    'Form' | 'UnAssign' | 'InEffect' | 'Suspension' | 'Rescission' | 'SuccessfulTermination' | 'UnsuccessfulTermination' | 'Active';
	public ContractStateNameElements getContractStateNameAccess() {
		return pContractStateName;
	}
	
	public ParserRule getContractStateNameRule() {
		return getContractStateNameAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

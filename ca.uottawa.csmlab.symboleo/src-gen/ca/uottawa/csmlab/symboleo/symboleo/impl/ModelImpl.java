/**
 * generated by Xtext 2.31.0
 */
package ca.uottawa.csmlab.symboleo.symboleo.impl;

import ca.uottawa.csmlab.symboleo.symboleo.DomainType;
import ca.uottawa.csmlab.symboleo.symboleo.Model;
import ca.uottawa.csmlab.symboleo.symboleo.Obligation;
import ca.uottawa.csmlab.symboleo.symboleo.Parameter;
import ca.uottawa.csmlab.symboleo.symboleo.Power;
import ca.uottawa.csmlab.symboleo.symboleo.Proposition;
import ca.uottawa.csmlab.symboleo.symboleo.SymboleoPackage;
import ca.uottawa.csmlab.symboleo.symboleo.Variable;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.ModelImpl#getDomainName <em>Domain Name</em>}</li>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.ModelImpl#getDomainTypes <em>Domain Types</em>}</li>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.ModelImpl#getTimeUnits <em>Time Units</em>}</li>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.ModelImpl#getContractName <em>Contract Name</em>}</li>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.ModelImpl#getParameters <em>Parameters</em>}</li>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.ModelImpl#getVariables <em>Variables</em>}</li>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.ModelImpl#getPreconditions <em>Preconditions</em>}</li>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.ModelImpl#getPostconditions <em>Postconditions</em>}</li>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.ModelImpl#getObligations <em>Obligations</em>}</li>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.ModelImpl#getSurvivingObligations <em>Surviving Obligations</em>}</li>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.ModelImpl#getPowers <em>Powers</em>}</li>
 *   <li>{@link ca.uottawa.csmlab.symboleo.symboleo.impl.ModelImpl#getConstraints <em>Constraints</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The default value of the '{@link #getDomainName() <em>Domain Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomainName()
   * @generated
   * @ordered
   */
  protected static final String DOMAIN_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDomainName() <em>Domain Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomainName()
   * @generated
   * @ordered
   */
  protected String domainName = DOMAIN_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getDomainTypes() <em>Domain Types</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDomainTypes()
   * @generated
   * @ordered
   */
  protected EList<DomainType> domainTypes;

  /**
   * The default value of the '{@link #getTimeUnits() <em>Time Units</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeUnits()
   * @generated
   * @ordered
   */
  protected static final String TIME_UNITS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTimeUnits() <em>Time Units</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeUnits()
   * @generated
   * @ordered
   */
  protected String timeUnits = TIME_UNITS_EDEFAULT;

  /**
   * The default value of the '{@link #getContractName() <em>Contract Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContractName()
   * @generated
   * @ordered
   */
  protected static final String CONTRACT_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getContractName() <em>Contract Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContractName()
   * @generated
   * @ordered
   */
  protected String contractName = CONTRACT_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getParameters() <em>Parameters</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameters()
   * @generated
   * @ordered
   */
  protected EList<Parameter> parameters;

  /**
   * The cached value of the '{@link #getVariables() <em>Variables</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariables()
   * @generated
   * @ordered
   */
  protected EList<Variable> variables;

  /**
   * The cached value of the '{@link #getPreconditions() <em>Preconditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPreconditions()
   * @generated
   * @ordered
   */
  protected EList<Proposition> preconditions;

  /**
   * The cached value of the '{@link #getPostconditions() <em>Postconditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPostconditions()
   * @generated
   * @ordered
   */
  protected EList<Proposition> postconditions;

  /**
   * The cached value of the '{@link #getObligations() <em>Obligations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObligations()
   * @generated
   * @ordered
   */
  protected EList<Obligation> obligations;

  /**
   * The cached value of the '{@link #getSurvivingObligations() <em>Surviving Obligations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSurvivingObligations()
   * @generated
   * @ordered
   */
  protected EList<Obligation> survivingObligations;

  /**
   * The cached value of the '{@link #getPowers() <em>Powers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPowers()
   * @generated
   * @ordered
   */
  protected EList<Power> powers;

  /**
   * The cached value of the '{@link #getConstraints() <em>Constraints</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraints()
   * @generated
   * @ordered
   */
  protected EList<Proposition> constraints;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SymboleoPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDomainName()
  {
    return domainName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDomainName(String newDomainName)
  {
    String oldDomainName = domainName;
    domainName = newDomainName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SymboleoPackage.MODEL__DOMAIN_NAME, oldDomainName, domainName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<DomainType> getDomainTypes()
  {
    if (domainTypes == null)
    {
      domainTypes = new EObjectContainmentEList<DomainType>(DomainType.class, this, SymboleoPackage.MODEL__DOMAIN_TYPES);
    }
    return domainTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTimeUnits()
  {
    return timeUnits;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTimeUnits(String newTimeUnits)
  {
    String oldTimeUnits = timeUnits;
    timeUnits = newTimeUnits;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SymboleoPackage.MODEL__TIME_UNITS, oldTimeUnits, timeUnits));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getContractName()
  {
    return contractName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setContractName(String newContractName)
  {
    String oldContractName = contractName;
    contractName = newContractName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SymboleoPackage.MODEL__CONTRACT_NAME, oldContractName, contractName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Parameter> getParameters()
  {
    if (parameters == null)
    {
      parameters = new EObjectContainmentEList<Parameter>(Parameter.class, this, SymboleoPackage.MODEL__PARAMETERS);
    }
    return parameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Variable> getVariables()
  {
    if (variables == null)
    {
      variables = new EObjectContainmentEList<Variable>(Variable.class, this, SymboleoPackage.MODEL__VARIABLES);
    }
    return variables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Proposition> getPreconditions()
  {
    if (preconditions == null)
    {
      preconditions = new EObjectContainmentEList<Proposition>(Proposition.class, this, SymboleoPackage.MODEL__PRECONDITIONS);
    }
    return preconditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Proposition> getPostconditions()
  {
    if (postconditions == null)
    {
      postconditions = new EObjectContainmentEList<Proposition>(Proposition.class, this, SymboleoPackage.MODEL__POSTCONDITIONS);
    }
    return postconditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Obligation> getObligations()
  {
    if (obligations == null)
    {
      obligations = new EObjectContainmentEList<Obligation>(Obligation.class, this, SymboleoPackage.MODEL__OBLIGATIONS);
    }
    return obligations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Obligation> getSurvivingObligations()
  {
    if (survivingObligations == null)
    {
      survivingObligations = new EObjectContainmentEList<Obligation>(Obligation.class, this, SymboleoPackage.MODEL__SURVIVING_OBLIGATIONS);
    }
    return survivingObligations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Power> getPowers()
  {
    if (powers == null)
    {
      powers = new EObjectContainmentEList<Power>(Power.class, this, SymboleoPackage.MODEL__POWERS);
    }
    return powers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Proposition> getConstraints()
  {
    if (constraints == null)
    {
      constraints = new EObjectContainmentEList<Proposition>(Proposition.class, this, SymboleoPackage.MODEL__CONSTRAINTS);
    }
    return constraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SymboleoPackage.MODEL__DOMAIN_TYPES:
        return ((InternalEList<?>)getDomainTypes()).basicRemove(otherEnd, msgs);
      case SymboleoPackage.MODEL__PARAMETERS:
        return ((InternalEList<?>)getParameters()).basicRemove(otherEnd, msgs);
      case SymboleoPackage.MODEL__VARIABLES:
        return ((InternalEList<?>)getVariables()).basicRemove(otherEnd, msgs);
      case SymboleoPackage.MODEL__PRECONDITIONS:
        return ((InternalEList<?>)getPreconditions()).basicRemove(otherEnd, msgs);
      case SymboleoPackage.MODEL__POSTCONDITIONS:
        return ((InternalEList<?>)getPostconditions()).basicRemove(otherEnd, msgs);
      case SymboleoPackage.MODEL__OBLIGATIONS:
        return ((InternalEList<?>)getObligations()).basicRemove(otherEnd, msgs);
      case SymboleoPackage.MODEL__SURVIVING_OBLIGATIONS:
        return ((InternalEList<?>)getSurvivingObligations()).basicRemove(otherEnd, msgs);
      case SymboleoPackage.MODEL__POWERS:
        return ((InternalEList<?>)getPowers()).basicRemove(otherEnd, msgs);
      case SymboleoPackage.MODEL__CONSTRAINTS:
        return ((InternalEList<?>)getConstraints()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SymboleoPackage.MODEL__DOMAIN_NAME:
        return getDomainName();
      case SymboleoPackage.MODEL__DOMAIN_TYPES:
        return getDomainTypes();
      case SymboleoPackage.MODEL__TIME_UNITS:
        return getTimeUnits();
      case SymboleoPackage.MODEL__CONTRACT_NAME:
        return getContractName();
      case SymboleoPackage.MODEL__PARAMETERS:
        return getParameters();
      case SymboleoPackage.MODEL__VARIABLES:
        return getVariables();
      case SymboleoPackage.MODEL__PRECONDITIONS:
        return getPreconditions();
      case SymboleoPackage.MODEL__POSTCONDITIONS:
        return getPostconditions();
      case SymboleoPackage.MODEL__OBLIGATIONS:
        return getObligations();
      case SymboleoPackage.MODEL__SURVIVING_OBLIGATIONS:
        return getSurvivingObligations();
      case SymboleoPackage.MODEL__POWERS:
        return getPowers();
      case SymboleoPackage.MODEL__CONSTRAINTS:
        return getConstraints();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SymboleoPackage.MODEL__DOMAIN_NAME:
        setDomainName((String)newValue);
        return;
      case SymboleoPackage.MODEL__DOMAIN_TYPES:
        getDomainTypes().clear();
        getDomainTypes().addAll((Collection<? extends DomainType>)newValue);
        return;
      case SymboleoPackage.MODEL__TIME_UNITS:
        setTimeUnits((String)newValue);
        return;
      case SymboleoPackage.MODEL__CONTRACT_NAME:
        setContractName((String)newValue);
        return;
      case SymboleoPackage.MODEL__PARAMETERS:
        getParameters().clear();
        getParameters().addAll((Collection<? extends Parameter>)newValue);
        return;
      case SymboleoPackage.MODEL__VARIABLES:
        getVariables().clear();
        getVariables().addAll((Collection<? extends Variable>)newValue);
        return;
      case SymboleoPackage.MODEL__PRECONDITIONS:
        getPreconditions().clear();
        getPreconditions().addAll((Collection<? extends Proposition>)newValue);
        return;
      case SymboleoPackage.MODEL__POSTCONDITIONS:
        getPostconditions().clear();
        getPostconditions().addAll((Collection<? extends Proposition>)newValue);
        return;
      case SymboleoPackage.MODEL__OBLIGATIONS:
        getObligations().clear();
        getObligations().addAll((Collection<? extends Obligation>)newValue);
        return;
      case SymboleoPackage.MODEL__SURVIVING_OBLIGATIONS:
        getSurvivingObligations().clear();
        getSurvivingObligations().addAll((Collection<? extends Obligation>)newValue);
        return;
      case SymboleoPackage.MODEL__POWERS:
        getPowers().clear();
        getPowers().addAll((Collection<? extends Power>)newValue);
        return;
      case SymboleoPackage.MODEL__CONSTRAINTS:
        getConstraints().clear();
        getConstraints().addAll((Collection<? extends Proposition>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SymboleoPackage.MODEL__DOMAIN_NAME:
        setDomainName(DOMAIN_NAME_EDEFAULT);
        return;
      case SymboleoPackage.MODEL__DOMAIN_TYPES:
        getDomainTypes().clear();
        return;
      case SymboleoPackage.MODEL__TIME_UNITS:
        setTimeUnits(TIME_UNITS_EDEFAULT);
        return;
      case SymboleoPackage.MODEL__CONTRACT_NAME:
        setContractName(CONTRACT_NAME_EDEFAULT);
        return;
      case SymboleoPackage.MODEL__PARAMETERS:
        getParameters().clear();
        return;
      case SymboleoPackage.MODEL__VARIABLES:
        getVariables().clear();
        return;
      case SymboleoPackage.MODEL__PRECONDITIONS:
        getPreconditions().clear();
        return;
      case SymboleoPackage.MODEL__POSTCONDITIONS:
        getPostconditions().clear();
        return;
      case SymboleoPackage.MODEL__OBLIGATIONS:
        getObligations().clear();
        return;
      case SymboleoPackage.MODEL__SURVIVING_OBLIGATIONS:
        getSurvivingObligations().clear();
        return;
      case SymboleoPackage.MODEL__POWERS:
        getPowers().clear();
        return;
      case SymboleoPackage.MODEL__CONSTRAINTS:
        getConstraints().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SymboleoPackage.MODEL__DOMAIN_NAME:
        return DOMAIN_NAME_EDEFAULT == null ? domainName != null : !DOMAIN_NAME_EDEFAULT.equals(domainName);
      case SymboleoPackage.MODEL__DOMAIN_TYPES:
        return domainTypes != null && !domainTypes.isEmpty();
      case SymboleoPackage.MODEL__TIME_UNITS:
        return TIME_UNITS_EDEFAULT == null ? timeUnits != null : !TIME_UNITS_EDEFAULT.equals(timeUnits);
      case SymboleoPackage.MODEL__CONTRACT_NAME:
        return CONTRACT_NAME_EDEFAULT == null ? contractName != null : !CONTRACT_NAME_EDEFAULT.equals(contractName);
      case SymboleoPackage.MODEL__PARAMETERS:
        return parameters != null && !parameters.isEmpty();
      case SymboleoPackage.MODEL__VARIABLES:
        return variables != null && !variables.isEmpty();
      case SymboleoPackage.MODEL__PRECONDITIONS:
        return preconditions != null && !preconditions.isEmpty();
      case SymboleoPackage.MODEL__POSTCONDITIONS:
        return postconditions != null && !postconditions.isEmpty();
      case SymboleoPackage.MODEL__OBLIGATIONS:
        return obligations != null && !obligations.isEmpty();
      case SymboleoPackage.MODEL__SURVIVING_OBLIGATIONS:
        return survivingObligations != null && !survivingObligations.isEmpty();
      case SymboleoPackage.MODEL__POWERS:
        return powers != null && !powers.isEmpty();
      case SymboleoPackage.MODEL__CONSTRAINTS:
        return constraints != null && !constraints.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (domainName: ");
    result.append(domainName);
    result.append(", timeUnits: ");
    result.append(timeUnits);
    result.append(", contractName: ");
    result.append(contractName);
    result.append(')');
    return result.toString();
  }

} //ModelImpl
